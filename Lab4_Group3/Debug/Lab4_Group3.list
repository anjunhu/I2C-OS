
Lab4_Group3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f68  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800a128  0800a128  0001a128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a468  0800a468  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a468  0800a468  0001a468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a470  0800a470  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a470  0800a470  0001a470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a474  0800a474  0001a474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0800a478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200002a0  0800a718  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800a718  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019674  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032e3  00000000  00000000  00039944  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c0  00000000  00000000  0003cc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  0003e1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b9fa  00000000  00000000  0003f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013886  00000000  00000000  0006afca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010ff1c  00000000  00000000  0007e850  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e76c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000661c  00000000  00000000  0018e7e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002a0 	.word	0x200002a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a110 	.word	0x0800a110

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002a4 	.word	0x200002a4
 80001fc:	0800a110 	.word	0x0800a110

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 f843 	bl	8002054 <SENSOR_IO_Read>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f023 0304 	bic.w	r3, r3, #4
 8000fd8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f023 0303 	bic.w	r3, r3, #3
 8000fe8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	2120      	movs	r1, #32
 8001002:	4618      	mov	r0, r3
 8001004:	f001 f80c 	bl	8002020 <SENSOR_IO_Write>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800101e:	f000 fff5 	bl	800200c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	210f      	movs	r1, #15
 8001028:	4618      	mov	r0, r3
 800102a:	f001 f813 	bl	8002054 <SENSOR_IO_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	b2d8      	uxtb	r0, r3
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2302      	movs	r3, #2
 8001050:	21b0      	movs	r1, #176	; 0xb0
 8001052:	f001 f81d 	bl	8002090 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800105e:	7b7b      	ldrb	r3, [r7, #13]
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	b2d8      	uxtb	r0, r3
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	2302      	movs	r3, #2
 8001070:	21b6      	movs	r1, #182	; 0xb6
 8001072:	f001 f80d 	bl	8002090 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001076:	7b7b      	ldrb	r3, [r7, #13]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	b2d8      	uxtb	r0, r3
 8001088:	f107 020c 	add.w	r2, r7, #12
 800108c:	2302      	movs	r3, #2
 800108e:	21ba      	movs	r1, #186	; 0xba
 8001090:	f000 fffe 	bl	8002090 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	f107 020c 	add.w	r2, r7, #12
 80010aa:	2302      	movs	r3, #2
 80010ac:	21a8      	movs	r1, #168	; 0xa8
 80010ae:	f000 ffef 	bl	8002090 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80010c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80010c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80010d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80010ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800116c <HTS221_H_ReadHumidity+0x130>
 800112a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	dd01      	ble.n	8001138 <HTS221_H_ReadHumidity+0xfc>
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HTS221_H_ReadHumidity+0x134>)
 8001136:	e00a      	b.n	800114e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001138:	edd7 7a04 	vldr	s15, [r7, #16]
 800113c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001144:	d502      	bpl.n	800114c <HTS221_H_ReadHumidity+0x110>
 8001146:	f04f 0300 	mov.w	r3, #0
 800114a:	e000      	b.n	800114e <HTS221_H_ReadHumidity+0x112>
 800114c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800114e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001150:	edd7 7a04 	vldr	s15, [r7, #16]
 8001154:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001158:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800115c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	447a0000 	.word	0x447a0000
 8001170:	447a0000 	.word	0x447a0000

08001174 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2120      	movs	r1, #32
 8001186:	4618      	mov	r0, r3
 8001188:	f000 ff64 	bl	8002054 <SENSOR_IO_Read>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f023 0304 	bic.w	r3, r3, #4
 8001196:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f023 0303 	bic.w	r3, r3, #3
 80011a6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011b6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	2120      	movs	r1, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 ff2d 	bl	8002020 <SENSOR_IO_Write>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b088      	sub	sp, #32
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	f107 0208 	add.w	r2, r7, #8
 80011e0:	2302      	movs	r3, #2
 80011e2:	21b2      	movs	r1, #178	; 0xb2
 80011e4:	f000 ff54 	bl	8002090 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2135      	movs	r1, #53	; 0x35
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 ff30 	bl	8002054 <SENSOR_IO_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80011f8:	7ffb      	ldrb	r3, [r7, #31]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001202:	b21a      	sxth	r2, r3
 8001204:	7a3b      	ldrb	r3, [r7, #8]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	019b      	lsls	r3, r3, #6
 8001210:	b21b      	sxth	r3, r3
 8001212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001216:	b21a      	sxth	r2, r3
 8001218:	7a7b      	ldrb	r3, [r7, #9]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001220:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001224:	10db      	asrs	r3, r3, #3
 8001226:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001228:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800122c:	10db      	asrs	r3, r3, #3
 800122e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	b2d8      	uxtb	r0, r3
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	2304      	movs	r3, #4
 800123a:	21bc      	movs	r1, #188	; 0xbc
 800123c:	f000 ff28 	bl	8002090 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001240:	7a7b      	ldrb	r3, [r7, #9]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	7a3b      	ldrb	r3, [r7, #8]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	b2d8      	uxtb	r0, r3
 8001260:	f107 0208 	add.w	r2, r7, #8
 8001264:	2302      	movs	r3, #2
 8001266:	21aa      	movs	r1, #170	; 0xaa
 8001268:	f000 ff12 	bl	8002090 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800126c:	7a7b      	ldrb	r3, [r7, #9]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	7a3b      	ldrb	r3, [r7, #8]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800127a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800127e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001290:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	ee07 3a90 	vmov	s15, r3
}
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	463b      	mov	r3, r7
 80012e4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80012e8:	783b      	ldrb	r3, [r7, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	2120      	movs	r1, #32
 80012ee:	203c      	movs	r0, #60	; 0x3c
 80012f0:	f000 fe96 	bl	8002020 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	461a      	mov	r2, r3
 80012f8:	2121      	movs	r1, #33	; 0x21
 80012fa:	203c      	movs	r0, #60	; 0x3c
 80012fc:	f000 fe90 	bl	8002020 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001300:	78bb      	ldrb	r3, [r7, #2]
 8001302:	461a      	mov	r2, r3
 8001304:	2122      	movs	r1, #34	; 0x22
 8001306:	203c      	movs	r0, #60	; 0x3c
 8001308:	f000 fe8a 	bl	8002020 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	461a      	mov	r2, r3
 8001310:	2123      	movs	r1, #35	; 0x23
 8001312:	203c      	movs	r0, #60	; 0x3c
 8001314:	f000 fe84 	bl	8002020 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001318:	793b      	ldrb	r3, [r7, #4]
 800131a:	461a      	mov	r2, r3
 800131c:	2124      	movs	r1, #36	; 0x24
 800131e:	203c      	movs	r0, #60	; 0x3c
 8001320:	f000 fe7e 	bl	8002020 <SENSOR_IO_Write>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001332:	2300      	movs	r3, #0
 8001334:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001336:	2122      	movs	r1, #34	; 0x22
 8001338:	203c      	movs	r0, #60	; 0x3c
 800133a:	f000 fe8b 	bl	8002054 <SENSOR_IO_Read>
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f023 0303 	bic.w	r3, r3, #3
 8001348:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f043 0303 	orr.w	r3, r3, #3
 8001350:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	461a      	mov	r2, r3
 8001356:	2122      	movs	r1, #34	; 0x22
 8001358:	203c      	movs	r0, #60	; 0x3c
 800135a:	f000 fe61 	bl	8002020 <SENSOR_IO_Write>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800136a:	f000 fe4f 	bl	800200c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800136e:	210f      	movs	r1, #15
 8001370:	203c      	movs	r0, #60	; 0x3c
 8001372:	f000 fe6f 	bl	8002054 <SENSOR_IO_Read>
 8001376:	4603      	mov	r3, r0
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}

0800137c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800138a:	2122      	movs	r1, #34	; 0x22
 800138c:	203c      	movs	r0, #60	; 0x3c
 800138e:	f000 fe61 	bl	8002054 <SENSOR_IO_Read>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	f023 0320 	bic.w	r3, r3, #32
 800139c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f043 0320 	orr.w	r3, r3, #32
 80013aa:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	461a      	mov	r2, r3
 80013b0:	2122      	movs	r1, #34	; 0x22
 80013b2:	203c      	movs	r0, #60	; 0x3c
 80013b4:	f000 fe34 	bl	8002020 <SENSOR_IO_Write>
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80013d6:	2121      	movs	r1, #33	; 0x21
 80013d8:	203c      	movs	r0, #60	; 0x3c
 80013da:	f000 fe3b 	bl	8002054 <SENSOR_IO_Read>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80013e2:	f107 0208 	add.w	r2, r7, #8
 80013e6:	2306      	movs	r3, #6
 80013e8:	21a8      	movs	r1, #168	; 0xa8
 80013ea:	203c      	movs	r0, #60	; 0x3c
 80013ec:	f000 fe50 	bl	8002090 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	77fb      	strb	r3, [r7, #31]
 80013f4:	e01f      	b.n	8001436 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80013f6:	7ffb      	ldrb	r3, [r7, #31]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	3301      	adds	r3, #1
 80013fc:	f107 0220 	add.w	r2, r7, #32
 8001400:	4413      	add	r3, r2
 8001402:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001406:	b29b      	uxth	r3, r3
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b29a      	uxth	r2, r3
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	f107 0120 	add.w	r1, r7, #32
 8001414:	440b      	add	r3, r1
 8001416:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4413      	add	r3, r2
 800141e:	b29a      	uxth	r2, r3
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	b212      	sxth	r2, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	f107 0120 	add.w	r1, r7, #32
 800142a:	440b      	add	r3, r1
 800142c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001430:	7ffb      	ldrb	r3, [r7, #31]
 8001432:	3301      	adds	r3, #1
 8001434:	77fb      	strb	r3, [r7, #31]
 8001436:	7ffb      	ldrb	r3, [r7, #31]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d9dc      	bls.n	80013f6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001442:	2b20      	cmp	r3, #32
 8001444:	d00c      	beq.n	8001460 <LIS3MDL_MagReadXYZ+0xa0>
 8001446:	2b20      	cmp	r3, #32
 8001448:	dc02      	bgt.n	8001450 <LIS3MDL_MagReadXYZ+0x90>
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <LIS3MDL_MagReadXYZ+0x9a>
 800144e:	e010      	b.n	8001472 <LIS3MDL_MagReadXYZ+0xb2>
 8001450:	2b40      	cmp	r3, #64	; 0x40
 8001452:	d008      	beq.n	8001466 <LIS3MDL_MagReadXYZ+0xa6>
 8001454:	2b60      	cmp	r3, #96	; 0x60
 8001456:	d009      	beq.n	800146c <LIS3MDL_MagReadXYZ+0xac>
 8001458:	e00b      	b.n	8001472 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <LIS3MDL_MagReadXYZ+0x100>)
 800145c:	61bb      	str	r3, [r7, #24]
    break;
 800145e:	e008      	b.n	8001472 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <LIS3MDL_MagReadXYZ+0x104>)
 8001462:	61bb      	str	r3, [r7, #24]
    break;
 8001464:	e005      	b.n	8001472 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <LIS3MDL_MagReadXYZ+0x108>)
 8001468:	61bb      	str	r3, [r7, #24]
    break;
 800146a:	e002      	b.n	8001472 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <LIS3MDL_MagReadXYZ+0x10c>)
 800146e:	61bb      	str	r3, [r7, #24]
    break;    
 8001470:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	77fb      	strb	r3, [r7, #31]
 8001476:	e01b      	b.n	80014b0 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001478:	7ffb      	ldrb	r3, [r7, #31]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	f107 0220 	add.w	r2, r7, #32
 8001480:	4413      	add	r3, r2
 8001482:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001496:	7ffb      	ldrb	r3, [r7, #31]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a2:	ee17 2a90 	vmov	r2, s15
 80014a6:	b212      	sxth	r2, r2
 80014a8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	3301      	adds	r3, #1
 80014ae:	77fb      	strb	r3, [r7, #31]
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d9e0      	bls.n	8001478 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3720      	adds	r7, #32
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	3e0f5c29 	.word	0x3e0f5c29
 80014c4:	3e947ae1 	.word	0x3e947ae1
 80014c8:	3edc28f6 	.word	0x3edc28f6
 80014cc:	3f147ae1 	.word	0x3f147ae1

080014d0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f87b 	bl	80015d8 <LPS22HB_Init>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80014f8:	f000 fd88 	bl	800200c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	210f      	movs	r1, #15
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fda6 	bl	8002054 <SENSOR_IO_Read>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	74fb      	strb	r3, [r7, #19]
 800152a:	e013      	b.n	8001554 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	7cfb      	ldrb	r3, [r7, #19]
 8001532:	3328      	adds	r3, #40	; 0x28
 8001534:	b2db      	uxtb	r3, r3
 8001536:	7cfc      	ldrb	r4, [r7, #19]
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f000 fd8a 	bl	8002054 <SENSOR_IO_Read>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	4423      	add	r3, r4
 800154a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800154e:	7cfb      	ldrb	r3, [r7, #19]
 8001550:	3301      	adds	r3, #1
 8001552:	74fb      	strb	r3, [r7, #19]
 8001554:	7cfb      	ldrb	r3, [r7, #19]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d9e8      	bls.n	800152c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800155a:	2300      	movs	r3, #0
 800155c:	74fb      	strb	r3, [r7, #19]
 800155e:	e010      	b.n	8001582 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001560:	7cfb      	ldrb	r3, [r7, #19]
 8001562:	f107 0218 	add.w	r2, r7, #24
 8001566:	4413      	add	r3, r2
 8001568:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800156c:	461a      	mov	r2, r3
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800157c:	7cfb      	ldrb	r3, [r7, #19]
 800157e:	3301      	adds	r3, #1
 8001580:	74fb      	strb	r3, [r7, #19]
 8001582:	7cfb      	ldrb	r3, [r7, #19]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d9eb      	bls.n	8001560 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001598:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2264      	movs	r2, #100	; 0x64
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da01      	bge.n	80015ae <LPS22HB_P_ReadPressure+0x96>
 80015aa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80015ae:	131b      	asrs	r3, r3, #12
 80015b0:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015bc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80015d4 <LPS22HB_P_ReadPressure+0xbc>
 80015c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015c4:	eef0 7a66 	vmov.f32	s15, s13
}
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	42c80000 	.word	0x42c80000

080015d8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	211a      	movs	r1, #26
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fd33 	bl	8002054 <SENSOR_IO_Read>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	211a      	movs	r1, #26
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd08 	bl	8002020 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2110      	movs	r1, #16
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fd1c 	bl	8002054 <SENSOR_IO_Read>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001626:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800162e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f023 0302 	bic.w	r3, r3, #2
 8001636:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	2110      	movs	r1, #16
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fce9 	bl	8002020 <SENSOR_IO_Write>
}  
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001664:	2110      	movs	r1, #16
 8001666:	20d4      	movs	r0, #212	; 0xd4
 8001668:	f000 fcf4 	bl	8002054 <SENSOR_IO_Read>
 800166c:	4603      	mov	r3, r0
 800166e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001674:	7bbb      	ldrb	r3, [r7, #14]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800167c:	7bba      	ldrb	r2, [r7, #14]
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	4313      	orrs	r3, r2
 8001682:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	461a      	mov	r2, r3
 8001688:	2110      	movs	r1, #16
 800168a:	20d4      	movs	r0, #212	; 0xd4
 800168c:	f000 fcc8 	bl	8002020 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001690:	2112      	movs	r1, #18
 8001692:	20d4      	movs	r0, #212	; 0xd4
 8001694:	f000 fcde 	bl	8002054 <SENSOR_IO_Read>
 8001698:	4603      	mov	r3, r0
 800169a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80016a4:	7bbb      	ldrb	r3, [r7, #14]
 80016a6:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80016aa:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80016ac:	7bba      	ldrb	r2, [r7, #14]
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	461a      	mov	r2, r3
 80016b8:	2112      	movs	r1, #18
 80016ba:	20d4      	movs	r0, #212	; 0xd4
 80016bc:	f000 fcb0 	bl	8002020 <SENSOR_IO_Write>
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80016d2:	2110      	movs	r1, #16
 80016d4:	20d4      	movs	r0, #212	; 0xd4
 80016d6:	f000 fcbd 	bl	8002054 <SENSOR_IO_Read>
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	461a      	mov	r2, r3
 80016ea:	2110      	movs	r1, #16
 80016ec:	20d4      	movs	r0, #212	; 0xd4
 80016ee:	f000 fc97 	bl	8002020 <SENSOR_IO_Write>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80016fe:	f000 fc85 	bl	800200c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001702:	210f      	movs	r1, #15
 8001704:	20d4      	movs	r0, #212	; 0xd4
 8001706:	f000 fca5 	bl	8002054 <SENSOR_IO_Read>
 800170a:	4603      	mov	r3, r0
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd80      	pop	{r7, pc}

08001710 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800171e:	2115      	movs	r1, #21
 8001720:	20d4      	movs	r0, #212	; 0xd4
 8001722:	f000 fc97 	bl	8002054 <SENSOR_IO_Read>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	f023 0310 	bic.w	r3, r3, #16
 8001730:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	461a      	mov	r2, r3
 8001744:	2115      	movs	r1, #21
 8001746:	20d4      	movs	r0, #212	; 0xd4
 8001748:	f000 fc6a 	bl	8002020 <SENSOR_IO_Write>
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800175c:	2300      	movs	r3, #0
 800175e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800176a:	2110      	movs	r1, #16
 800176c:	20d4      	movs	r0, #212	; 0xd4
 800176e:	f000 fc71 	bl	8002054 <SENSOR_IO_Read>
 8001772:	4603      	mov	r3, r0
 8001774:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001776:	f107 0208 	add.w	r2, r7, #8
 800177a:	2306      	movs	r3, #6
 800177c:	2128      	movs	r1, #40	; 0x28
 800177e:	20d4      	movs	r0, #212	; 0xd4
 8001780:	f000 fc86 	bl	8002090 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
 8001788:	e01f      	b.n	80017ca <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	3301      	adds	r3, #1
 8001790:	f107 0220 	add.w	r2, r7, #32
 8001794:	4413      	add	r3, r2
 8001796:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800179a:	b29b      	uxth	r3, r3
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b29a      	uxth	r2, r3
 80017a0:	7ffb      	ldrb	r3, [r7, #31]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	f107 0120 	add.w	r1, r7, #32
 80017a8:	440b      	add	r3, r1
 80017aa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	7ffb      	ldrb	r3, [r7, #31]
 80017b6:	b212      	sxth	r2, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	f107 0120 	add.w	r1, r7, #32
 80017be:	440b      	add	r3, r1
 80017c0:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	3301      	adds	r3, #1
 80017c8:	77fb      	strb	r3, [r7, #31]
 80017ca:	7ffb      	ldrb	r3, [r7, #31]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d9dc      	bls.n	800178a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d828      	bhi.n	800182c <LSM6DSL_AccReadXYZ+0xd8>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <LSM6DSL_AccReadXYZ+0x8c>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	08001815 	.word	0x08001815
 80017e4:	0800182d 	.word	0x0800182d
 80017e8:	0800182d 	.word	0x0800182d
 80017ec:	0800182d 	.word	0x0800182d
 80017f0:	08001827 	.word	0x08001827
 80017f4:	0800182d 	.word	0x0800182d
 80017f8:	0800182d 	.word	0x0800182d
 80017fc:	0800182d 	.word	0x0800182d
 8001800:	0800181b 	.word	0x0800181b
 8001804:	0800182d 	.word	0x0800182d
 8001808:	0800182d 	.word	0x0800182d
 800180c:	0800182d 	.word	0x0800182d
 8001810:	08001821 	.word	0x08001821
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <LSM6DSL_AccReadXYZ+0x124>)
 8001816:	61bb      	str	r3, [r7, #24]
    break;
 8001818:	e008      	b.n	800182c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <LSM6DSL_AccReadXYZ+0x128>)
 800181c:	61bb      	str	r3, [r7, #24]
    break;
 800181e:	e005      	b.n	800182c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <LSM6DSL_AccReadXYZ+0x12c>)
 8001822:	61bb      	str	r3, [r7, #24]
    break;
 8001824:	e002      	b.n	800182c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <LSM6DSL_AccReadXYZ+0x130>)
 8001828:	61bb      	str	r3, [r7, #24]
    break;    
 800182a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	77fb      	strb	r3, [r7, #31]
 8001830:	e01b      	b.n	800186a <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001832:	7ffb      	ldrb	r3, [r7, #31]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	f107 0220 	add.w	r2, r7, #32
 800183a:	4413      	add	r3, r2
 800183c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001848:	edd7 7a06 	vldr	s15, [r7, #24]
 800184c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185c:	ee17 2a90 	vmov	r2, s15
 8001860:	b212      	sxth	r2, r2
 8001862:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001864:	7ffb      	ldrb	r3, [r7, #31]
 8001866:	3301      	adds	r3, #1
 8001868:	77fb      	strb	r3, [r7, #31]
 800186a:	7ffb      	ldrb	r3, [r7, #31]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d9e0      	bls.n	8001832 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8001870:	bf00      	nop
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	3d79db23 	.word	0x3d79db23
 800187c:	3df9db23 	.word	0x3df9db23
 8001880:	3e79db23 	.word	0x3e79db23
 8001884:	3ef9db23 	.word	0x3ef9db23

08001888 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001896:	2111      	movs	r1, #17
 8001898:	20d4      	movs	r0, #212	; 0xd4
 800189a:	f000 fbdb 	bl	8002054 <SENSOR_IO_Read>
 800189e:	4603      	mov	r3, r0
 80018a0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80018ae:	7bba      	ldrb	r2, [r7, #14]
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	461a      	mov	r2, r3
 80018ba:	2111      	movs	r1, #17
 80018bc:	20d4      	movs	r0, #212	; 0xd4
 80018be:	f000 fbaf 	bl	8002020 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80018c2:	2112      	movs	r1, #18
 80018c4:	20d4      	movs	r0, #212	; 0xd4
 80018c6:	f000 fbc5 	bl	8002054 <SENSOR_IO_Read>
 80018ca:	4603      	mov	r3, r0
 80018cc:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80018d6:	7bbb      	ldrb	r3, [r7, #14]
 80018d8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80018dc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80018de:	7bba      	ldrb	r2, [r7, #14]
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	461a      	mov	r2, r3
 80018ea:	2112      	movs	r1, #18
 80018ec:	20d4      	movs	r0, #212	; 0xd4
 80018ee:	f000 fb97 	bl	8002020 <SENSOR_IO_Write>
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001900:	2300      	movs	r3, #0
 8001902:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001904:	2111      	movs	r1, #17
 8001906:	20d4      	movs	r0, #212	; 0xd4
 8001908:	f000 fba4 	bl	8002054 <SENSOR_IO_Read>
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	461a      	mov	r2, r3
 800191c:	2111      	movs	r1, #17
 800191e:	20d4      	movs	r0, #212	; 0xd4
 8001920:	f000 fb7e 	bl	8002020 <SENSOR_IO_Write>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001930:	f000 fb6c 	bl	800200c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001934:	210f      	movs	r1, #15
 8001936:	20d4      	movs	r0, #212	; 0xd4
 8001938:	f000 fb8c 	bl	8002054 <SENSOR_IO_Read>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}

08001942 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001950:	2116      	movs	r1, #22
 8001952:	20d4      	movs	r0, #212	; 0xd4
 8001954:	f000 fb7e 	bl	8002054 <SENSOR_IO_Read>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001962:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001970:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	461a      	mov	r2, r3
 8001976:	2116      	movs	r1, #22
 8001978:	20d4      	movs	r0, #212	; 0xd4
 800197a:	f000 fb51 	bl	8002020 <SENSOR_IO_Write>
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001990:	2300      	movs	r3, #0
 8001992:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800199e:	2111      	movs	r1, #17
 80019a0:	20d4      	movs	r0, #212	; 0xd4
 80019a2:	f000 fb57 	bl	8002054 <SENSOR_IO_Read>
 80019a6:	4603      	mov	r3, r0
 80019a8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80019aa:	f107 0208 	add.w	r2, r7, #8
 80019ae:	2306      	movs	r3, #6
 80019b0:	2122      	movs	r1, #34	; 0x22
 80019b2:	20d4      	movs	r0, #212	; 0xd4
 80019b4:	f000 fb6c 	bl	8002090 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	77fb      	strb	r3, [r7, #31]
 80019bc:	e01f      	b.n	80019fe <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80019be:	7ffb      	ldrb	r3, [r7, #31]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	3301      	adds	r3, #1
 80019c4:	f107 0220 	add.w	r2, r7, #32
 80019c8:	4413      	add	r3, r2
 80019ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	7ffb      	ldrb	r3, [r7, #31]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	f107 0120 	add.w	r1, r7, #32
 80019dc:	440b      	add	r3, r1
 80019de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	7ffb      	ldrb	r3, [r7, #31]
 80019ea:	b212      	sxth	r2, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	f107 0120 	add.w	r1, r7, #32
 80019f2:	440b      	add	r3, r1
 80019f4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80019f8:	7ffb      	ldrb	r3, [r7, #31]
 80019fa:	3301      	adds	r3, #1
 80019fc:	77fb      	strb	r3, [r7, #31]
 80019fe:	7ffb      	ldrb	r3, [r7, #31]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d9dc      	bls.n	80019be <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d828      	bhi.n	8001a60 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a49 	.word	0x08001a49
 8001a18:	08001a61 	.word	0x08001a61
 8001a1c:	08001a61 	.word	0x08001a61
 8001a20:	08001a61 	.word	0x08001a61
 8001a24:	08001a4f 	.word	0x08001a4f
 8001a28:	08001a61 	.word	0x08001a61
 8001a2c:	08001a61 	.word	0x08001a61
 8001a30:	08001a61 	.word	0x08001a61
 8001a34:	08001a55 	.word	0x08001a55
 8001a38:	08001a61 	.word	0x08001a61
 8001a3c:	08001a61 	.word	0x08001a61
 8001a40:	08001a61 	.word	0x08001a61
 8001a44:	08001a5b 	.word	0x08001a5b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001a4a:	61bb      	str	r3, [r7, #24]
    break;
 8001a4c:	e008      	b.n	8001a60 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001a50:	61bb      	str	r3, [r7, #24]
    break;
 8001a52:	e005      	b.n	8001a60 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001a56:	61bb      	str	r3, [r7, #24]
    break;
 8001a58:	e002      	b.n	8001a60 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8001a5c:	61bb      	str	r3, [r7, #24]
    break;    
 8001a5e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	77fb      	strb	r3, [r7, #31]
 8001a64:	e017      	b.n	8001a96 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001a66:	7ffb      	ldrb	r3, [r7, #31]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	f107 0220 	add.w	r2, r7, #32
 8001a6e:	4413      	add	r3, r2
 8001a70:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7c:	7ffb      	ldrb	r3, [r7, #31]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
 8001a92:	3301      	adds	r3, #1
 8001a94:	77fb      	strb	r3, [r7, #31]
 8001a96:	7ffb      	ldrb	r3, [r7, #31]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d9e4      	bls.n	8001a66 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	410c0000 	.word	0x410c0000
 8001aa8:	418c0000 	.word	0x418c0000
 8001aac:	420c0000 	.word	0x420c0000
 8001ab0:	428c0000 	.word	0x428c0000

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab8:	f000 fe39 	bl	800272e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abc:	f000 f836 	bl	8001b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac0:	f000 f938 	bl	8001d34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ac4:	f000 f8aa 	bl	8001c1c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ac8:	f000 f8e8 	bl	8001c9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8001acc:	f000 fafe 	bl	80020cc <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8001ad0:	f000 fb52 	bl	8002178 <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 8001ad4:	f000 fbb2 	bl	800223c <BSP_MAGNETO_Init>
  BSP_MAGNETO_LowPower(1);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f000 fbdb 	bl	8002294 <BSP_MAGNETO_LowPower>
  BSP_HSENSOR_Init();
 8001ade:	f000 fb8d 	bl	80021fc <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();
 8001ae2:	f000 fbf1 	bl	80022c8 <BSP_PSENSOR_Init>
  BSP_TSENSOR_Init();
 8001ae6:	f000 fc0f 	bl	8002308 <BSP_TSENSOR_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	BSP_ACCELERO_AccGetXYZ(acceleration);
 8001aea:	480c      	ldr	r0, [pc, #48]	; (8001b1c <main+0x68>)
 8001aec:	f000 fb2c 	bl	8002148 <BSP_ACCELERO_AccGetXYZ>
	HAL_Delay(10);
 8001af0:	200a      	movs	r0, #10
 8001af2:	f000 fe55 	bl	80027a0 <HAL_Delay>
	sprintf(buffer, "Acceleration = %d m/s^2\n", acceleration[0]);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <main+0x68>)
 8001af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <main+0x6c>)
 8001b00:	4808      	ldr	r0, [pc, #32]	; (8001b24 <main+0x70>)
 8001b02:	f005 fc1b 	bl	800733c <siprintf>
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 5);
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <main+0x70>)
 8001b08:	f7fe fb7a 	bl	8000200 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	2305      	movs	r3, #5
 8001b12:	4904      	ldr	r1, [pc, #16]	; (8001b24 <main+0x70>)
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <main+0x74>)
 8001b16:	f003 ff9d 	bl	8005a54 <HAL_UART_Transmit>
  while (1){
 8001b1a:	e7e6      	b.n	8001aea <main+0x36>
 8001b1c:	2000041c 	.word	0x2000041c
 8001b20:	0800a128 	.word	0x0800a128
 8001b24:	200003b8 	.word	0x200003b8
 8001b28:	2000032c 	.word	0x2000032c

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0bc      	sub	sp, #240	; 0xf0
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b36:	2244      	movs	r2, #68	; 0x44
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 fdb1 	bl	80066a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2294      	movs	r2, #148	; 0x94
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 fda3 	bl	80066a2 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f001 ffa3 	bl	8003aa8 <HAL_PWREx_ControlVoltageScaling>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001b68:	f000 f95c 	bl	8001e24 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b7e:	2360      	movs	r3, #96	; 0x60
 8001b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b84:	2302      	movs	r3, #2
 8001b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001b96:	233c      	movs	r3, #60	; 0x3c
 8001b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 f81c 	bl	8003bf0 <HAL_RCC_OscConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bbe:	f000 f931 	bl	8001e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc2:	230f      	movs	r3, #15
 8001bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001be0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001be4:	2105      	movs	r1, #5
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fc28 	bl	800443c <HAL_RCC_ClockConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001bf2:	f000 f917 	bl	8001e24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001bf6:	2341      	movs	r3, #65	; 0x41
 8001bf8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fefb 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001c10:	f000 f908 	bl	8001e24 <Error_Handler>
  }
}
 8001c14:	bf00      	nop
 8001c16:	37f0      	adds	r7, #240	; 0xf0
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_I2C1_Init+0x78>)
 8001c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c28:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <MX_I2C1_Init+0x7c>)
 8001c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c56:	480e      	ldr	r0, [pc, #56]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c58:	f001 f965 	bl	8002f26 <HAL_I2C_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c62:	f000 f8df 	bl	8001e24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c66:	2100      	movs	r1, #0
 8001c68:	4809      	ldr	r0, [pc, #36]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c6a:	f001 fe65 	bl	8003938 <HAL_I2CEx_ConfigAnalogFilter>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c74:	f000 f8d6 	bl	8001e24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c7c:	f001 fea7 	bl	80039ce <HAL_I2CEx_ConfigDigitalFilter>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c86:	f000 f8cd 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002e0 	.word	0x200002e0
 8001c94:	40005400 	.word	0x40005400
 8001c98:	307075b1 	.word	0x307075b1

08001c9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <MX_USART1_UART_Init+0x94>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce4:	4811      	ldr	r0, [pc, #68]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ce6:	f003 fe65 	bl	80059b4 <HAL_UART_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cf0:	f000 f898 	bl	8001e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cf8:	f004 fbb9 	bl	800646e <HAL_UARTEx_SetTxFifoThreshold>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d02:	f000 f88f 	bl	8001e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d06:	2100      	movs	r1, #0
 8001d08:	4808      	ldr	r0, [pc, #32]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001d0a:	f004 fbee 	bl	80064ea <HAL_UARTEx_SetRxFifoThreshold>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d14:	f000 f886 	bl	8001e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001d1a:	f004 fb6f 	bl	80063fc <HAL_UARTEx_DisableFifoMode>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d24:	f000 f87e 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	2000032c 	.word	0x2000032c
 8001d30:	40013800 	.word	0x40013800

08001d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_GPIO_Init+0xbc>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d98:	4816      	ldr	r0, [pc, #88]	; (8001df4 <MX_GPIO_Init+0xc0>)
 8001d9a:	f001 f889 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_GPIO_Init+0xc4>)
 8001da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4619      	mov	r1, r3
 8001db2:	4812      	ldr	r0, [pc, #72]	; (8001dfc <MX_GPIO_Init+0xc8>)
 8001db4:	f000 fdf8 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4808      	ldr	r0, [pc, #32]	; (8001df4 <MX_GPIO_Init+0xc0>)
 8001dd2:	f000 fde9 	bl	80029a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2028      	movs	r0, #40	; 0x28
 8001ddc:	f000 fdba 	bl	8002954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001de0:	2028      	movs	r0, #40	; 0x28
 8001de2:	f000 fdd3 	bl	800298c <HAL_NVIC_EnableIRQ>

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000400 	.word	0x48000400
 8001df8:	10110000 	.word	0x10110000
 8001dfc:	48000800 	.word	0x48000800

08001e00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e12:	f000 fca5 	bl	8002760 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40001000 	.word	0x40001000

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <Error_Handler+0x6>

08001e2c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e38:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001e4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e50:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e52:	2312      	movs	r3, #18
 8001e54:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	481b      	ldr	r0, [pc, #108]	; (8001ed8 <I2Cx_MspInit+0xac>)
 8001e6a:	f000 fd9d 	bl	80029a8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <I2Cx_MspInit+0xac>)
 8001e76:	f000 fd97 	bl	80029a8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001e98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e9c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <I2Cx_MspInit+0xa8>)
 8001ea4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ea8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	210f      	movs	r1, #15
 8001eae:	2021      	movs	r0, #33	; 0x21
 8001eb0:	f000 fd50 	bl	8002954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001eb4:	2021      	movs	r0, #33	; 0x21
 8001eb6:	f000 fd69 	bl	800298c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	2022      	movs	r0, #34	; 0x22
 8001ec0:	f000 fd48 	bl	8002954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001ec4:	2022      	movs	r0, #34	; 0x22
 8001ec6:	f000 fd61 	bl	800298c <HAL_NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	48000400 	.word	0x48000400

08001edc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <I2Cx_Init+0x54>)
 8001ee8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <I2Cx_Init+0x58>)
 8001eee:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff89 	bl	8001e2c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f001 f803 	bl	8002f26 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f001 fd08 	bl	8003938 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40005800 	.word	0x40005800
 8001f34:	00702681 	.word	0x00702681

08001f38 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	4608      	mov	r0, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	72fb      	strb	r3, [r7, #11]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	813b      	strh	r3, [r7, #8]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f56:	7afb      	ldrb	r3, [r7, #11]
 8001f58:	b299      	uxth	r1, r3
 8001f5a:	88f8      	ldrh	r0, [r7, #6]
 8001f5c:	893a      	ldrh	r2, [r7, #8]
 8001f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f001 f9ac 	bl	80032cc <HAL_I2C_Mem_Read>
 8001f74:	4603      	mov	r3, r0
 8001f76:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	4619      	mov	r1, r3
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f832 	bl	8001fec <I2Cx_Error>
  }
  return status;
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b08a      	sub	sp, #40	; 0x28
 8001f96:	af04      	add	r7, sp, #16
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	72fb      	strb	r3, [r7, #11]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	813b      	strh	r3, [r7, #8]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	88f8      	ldrh	r0, [r7, #6]
 8001fb6:	893a      	ldrh	r2, [r7, #8]
 8001fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f001 f86b 	bl	80030a4 <HAL_I2C_Mem_Write>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 f805 	bl	8001fec <I2Cx_Error>
  }
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f001 f823 	bl	8003044 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff6c 	bl	8001edc <I2Cx_Init>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <SENSOR_IO_Init+0x10>)
 8002012:	f7ff ff63 	bl	8001edc <I2Cx_Init>
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200004b0 	.word	0x200004b0

08002020 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af02      	add	r7, sp, #8
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	460b      	mov	r3, r1
 800202c:	71bb      	strb	r3, [r7, #6]
 800202e:	4613      	mov	r3, r2
 8002030:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002032:	79bb      	ldrb	r3, [r7, #6]
 8002034:	b29a      	uxth	r2, r3
 8002036:	79f9      	ldrb	r1, [r7, #7]
 8002038:	2301      	movs	r3, #1
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	1d7b      	adds	r3, r7, #5
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2301      	movs	r3, #1
 8002042:	4803      	ldr	r0, [pc, #12]	; (8002050 <SENSOR_IO_Write+0x30>)
 8002044:	f7ff ffa5 	bl	8001f92 <I2Cx_WriteMultiple>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200004b0 	.word	0x200004b0

08002054 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af02      	add	r7, sp, #8
 800205a:	4603      	mov	r3, r0
 800205c:	460a      	mov	r2, r1
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	4613      	mov	r3, r2
 8002062:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002068:	79bb      	ldrb	r3, [r7, #6]
 800206a:	b29a      	uxth	r2, r3
 800206c:	79f9      	ldrb	r1, [r7, #7]
 800206e:	2301      	movs	r3, #1
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	f107 030f 	add.w	r3, r7, #15
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2301      	movs	r3, #1
 800207a:	4804      	ldr	r0, [pc, #16]	; (800208c <SENSOR_IO_Read+0x38>)
 800207c:	f7ff ff5c 	bl	8001f38 <I2Cx_ReadMultiple>

  return read_value;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200004b0 	.word	0x200004b0

08002090 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af02      	add	r7, sp, #8
 8002096:	603a      	str	r2, [r7, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
 800209e:	460b      	mov	r3, r1
 80020a0:	71bb      	strb	r3, [r7, #6]
 80020a2:	4613      	mov	r3, r2
 80020a4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80020a6:	79bb      	ldrb	r3, [r7, #6]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	79f9      	ldrb	r1, [r7, #7]
 80020ac:	88bb      	ldrh	r3, [r7, #4]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2301      	movs	r3, #1
 80020b6:	4804      	ldr	r0, [pc, #16]	; (80020c8 <SENSOR_IO_ReadMultiple+0x38>)
 80020b8:	f7ff ff3e 	bl	8001f38 <I2Cx_ReadMultiple>
 80020bc:	4603      	mov	r3, r0
 80020be:	b29b      	uxth	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200004b0 	.word	0x200004b0

080020cc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80020d6:	2300      	movs	r3, #0
 80020d8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <BSP_ACCELERO_Init+0x74>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4798      	blx	r3
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b6a      	cmp	r3, #106	; 0x6a
 80020e4:	d002      	beq.n	80020ec <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e024      	b.n	8002136 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <BSP_ACCELERO_Init+0x78>)
 80020ee:	4a14      	ldr	r2, [pc, #80]	; (8002140 <BSP_ACCELERO_Init+0x74>)
 80020f0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80020f2:	2330      	movs	r3, #48	; 0x30
 80020f4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80020fa:	2300      	movs	r3, #0
 80020fc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80020fe:	2340      	movs	r3, #64	; 0x40
 8002100:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800210a:	797a      	ldrb	r2, [r7, #5]
 800210c:	7abb      	ldrb	r3, [r7, #10]
 800210e:	4313      	orrs	r3, r2
 8002110:	b2db      	uxtb	r3, r3
 8002112:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002114:	7a3b      	ldrb	r3, [r7, #8]
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	b2db      	uxtb	r3, r3
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b21a      	sxth	r2, r3
 8002120:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	b21b      	sxth	r3, r3
 8002128:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <BSP_ACCELERO_Init+0x78>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	89ba      	ldrh	r2, [r7, #12]
 8002132:	4610      	mov	r0, r2
 8002134:	4798      	blx	r3
  }  

  return ret;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000005c 	.word	0x2000005c
 8002144:	200002bc 	.word	0x200002bc

08002148 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	2b00      	cmp	r3, #0
 8002160:	d004      	beq.n	800216c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
    }
  }
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200002bc 	.word	0x200002bc

08002178 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002182:	2300      	movs	r3, #0
 8002184:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <BSP_GYRO_Init+0x7c>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4798      	blx	r3
 800218c:	4603      	mov	r3, r0
 800218e:	2b6a      	cmp	r3, #106	; 0x6a
 8002190:	d002      	beq.n	8002198 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	e028      	b.n	80021ea <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <BSP_GYRO_Init+0x80>)
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <BSP_GYRO_Init+0x7c>)
 800219c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80021a2:	2330      	movs	r3, #48	; 0x30
 80021a4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80021ae:	2340      	movs	r3, #64	; 0x40
 80021b0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80021b6:	230c      	movs	r3, #12
 80021b8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80021ba:	7aba      	ldrb	r2, [r7, #10]
 80021bc:	797b      	ldrb	r3, [r7, #5]
 80021be:	4313      	orrs	r3, r2
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80021c4:	7a3b      	ldrb	r3, [r7, #8]
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <BSP_GYRO_Init+0x80>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	89ba      	ldrh	r2, [r7, #12]
 80021e2:	4610      	mov	r0, r2
 80021e4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000090 	.word	0x20000090
 80021f8:	200002c0 	.word	0x200002c0

080021fc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <BSP_HSENSOR_Init+0x38>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	20be      	movs	r0, #190	; 0xbe
 8002208:	4798      	blx	r3
 800220a:	4603      	mov	r3, r0
 800220c:	2bbc      	cmp	r3, #188	; 0xbc
 800220e:	d002      	beq.n	8002216 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	e009      	b.n	800222a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <BSP_HSENSOR_Init+0x3c>)
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <BSP_HSENSOR_Init+0x38>)
 800221a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <BSP_HSENSOR_Init+0x3c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	20be      	movs	r0, #190	; 0xbe
 8002224:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800222a:	687b      	ldr	r3, [r7, #4]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000000 	.word	0x20000000
 8002238:	200002c4 	.word	0x200002c4

0800223c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <BSP_MAGNETO_Init+0x50>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4798      	blx	r3
 800224c:	4603      	mov	r3, r0
 800224e:	2b3d      	cmp	r3, #61	; 0x3d
 8002250:	d002      	beq.n	8002258 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	e013      	b.n	8002280 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <BSP_MAGNETO_Init+0x54>)
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <BSP_MAGNETO_Init+0x50>)
 800225c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800225e:	2358      	movs	r3, #88	; 0x58
 8002260:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002262:	2300      	movs	r3, #0
 8002264:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002266:	2300      	movs	r3, #0
 8002268:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800226a:	2308      	movs	r3, #8
 800226c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800226e:	2340      	movs	r3, #64	; 0x40
 8002270:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <BSP_MAGNETO_Init+0x54>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	463a      	mov	r2, r7
 800227a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227e:	4798      	blx	r3
  } 

  return ret;  
 8002280:	79fb      	ldrb	r3, [r7, #7]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000001c 	.word	0x2000001c
 8002290:	200002c8 	.word	0x200002c8

08002294 <BSP_MAGNETO_LowPower>:

/**
  * @brief  Set/Unset the MAGNETO in low power mode.
  */
void BSP_MAGNETO_LowPower(uint16_t status)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
  /* Put the magnetometer in low power mode */
  if(MagnetoDrv != NULL)
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <BSP_MAGNETO_LowPower+0x30>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <BSP_MAGNETO_LowPower+0x28>
  {
    if(MagnetoDrv->LowPower != NULL)
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <BSP_MAGNETO_LowPower+0x30>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <BSP_MAGNETO_LowPower+0x28>
    {
      MagnetoDrv->LowPower(status);
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <BSP_MAGNETO_LowPower+0x30>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200002c8 	.word	0x200002c8

080022c8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <BSP_PSENSOR_Init+0x38>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	20ba      	movs	r0, #186	; 0xba
 80022d4:	4798      	blx	r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	2bb1      	cmp	r3, #177	; 0xb1
 80022da:	d002      	beq.n	80022e2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	e009      	b.n	80022f6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <BSP_PSENSOR_Init+0x3c>)
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <BSP_PSENSOR_Init+0x38>)
 80022e6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <BSP_PSENSOR_Init+0x3c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	20ba      	movs	r0, #186	; 0xba
 80022f0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000050 	.word	0x20000050
 8002304:	200002cc 	.word	0x200002cc

08002308 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <BSP_TSENSOR_Init+0x30>)
 8002314:	4a09      	ldr	r2, [pc, #36]	; (800233c <BSP_TSENSOR_Init+0x34>)
 8002316:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002318:	f7ff fe78 	bl	800200c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <BSP_TSENSOR_Init+0x30>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	20be      	movs	r0, #190	; 0xbe
 8002326:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800232c:	79fb      	ldrb	r3, [r7, #7]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200002d0 	.word	0x200002d0
 800233c:	2000000c 	.word	0x2000000c

08002340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_MspInit+0x44>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_MspInit+0x44>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6613      	str	r3, [r2, #96]	; 0x60
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_MspInit+0x44>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_MspInit+0x44>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_MspInit+0x44>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_MspInit+0x44>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_I2C_MspInit+0x7c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d127      	bne.n	80023fa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023c2:	23c0      	movs	r3, #192	; 0xc0
 80023c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c6:	2312      	movs	r3, #18
 80023c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023d2:	2304      	movs	r3, #4
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <HAL_I2C_MspInit+0x84>)
 80023de:	f000 fae3 	bl	80029a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40005400 	.word	0x40005400
 8002408:	40021000 	.word	0x40021000
 800240c:	48000400 	.word	0x48000400

08002410 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_I2C_MspDeInit+0x38>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10d      	bne.n	800243e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_I2C_MspDeInit+0x3c>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_I2C_MspDeInit+0x3c>)
 8002428:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800242c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	4807      	ldr	r0, [pc, #28]	; (8002450 <HAL_I2C_MspDeInit+0x40>)
 8002432:	f000 fc4b 	bl	8002ccc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_I2C_MspDeInit+0x40>)
 800243a:	f000 fc47 	bl	8002ccc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40005400 	.word	0x40005400
 800244c:	40021000 	.word	0x40021000
 8002450:	48000400 	.word	0x48000400

08002454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <HAL_UART_MspInit+0x80>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d129      	bne.n	80024ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_UART_MspInit+0x84>)
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_UART_MspInit+0x84>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6613      	str	r3, [r2, #96]	; 0x60
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_MspInit+0x84>)
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_UART_MspInit+0x84>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002492:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_UART_MspInit+0x84>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_UART_MspInit+0x84>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b8:	2307      	movs	r3, #7
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4619      	mov	r1, r3
 80024c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c6:	f000 fa6f 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3728      	adds	r7, #40	; 0x28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40013800 	.word	0x40013800
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	2036      	movs	r0, #54	; 0x36
 80024f2:	f000 fa2f 	bl	8002954 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024f6:	2036      	movs	r0, #54	; 0x36
 80024f8:	f000 fa48 	bl	800298c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024fc:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <HAL_InitTick+0x9c>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <HAL_InitTick+0x9c>)
 8002502:	f043 0310 	orr.w	r3, r3, #16
 8002506:	6593      	str	r3, [r2, #88]	; 0x58
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_InitTick+0x9c>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002514:	f107 0210 	add.w	r2, r7, #16
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f002 f97a 	bl	8004818 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002524:	f002 f94c 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8002528:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	4a13      	ldr	r2, [pc, #76]	; (800257c <HAL_InitTick+0xa0>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9b      	lsrs	r3, r3, #18
 8002534:	3b01      	subs	r3, #1
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_InitTick+0xa4>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <HAL_InitTick+0xa8>)
 800253c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_InitTick+0xa4>)
 8002540:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002544:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_InitTick+0xa4>)
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_InitTick+0xa4>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_InitTick+0xa4>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002558:	4809      	ldr	r0, [pc, #36]	; (8002580 <HAL_InitTick+0xa4>)
 800255a:	f002 ff59 	bl	8005410 <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002564:	4806      	ldr	r0, [pc, #24]	; (8002580 <HAL_InitTick+0xa4>)
 8002566:	f002 ffb5 	bl	80054d4 <HAL_TIM_Base_Start_IT>
 800256a:	4603      	mov	r3, r0
 800256c:	e000      	b.n	8002570 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	3730      	adds	r7, #48	; 0x30
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	431bde83 	.word	0x431bde83
 8002580:	200004fc 	.word	0x200004fc
 8002584:	40001000 	.word	0x40001000

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800258c:	e7fe      	b.n	800258c <NMI_Handler+0x4>

0800258e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <HardFault_Handler+0x4>

08002594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <MemManage_Handler+0x4>

0800259a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <BusFault_Handler+0x4>

080025a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <UsageFault_Handler+0x4>

080025a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025e2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025e6:	f000 fc7b 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <TIM6_DAC_IRQHandler+0x10>)
 80025f6:	f002 ffdd 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200004fc 	.word	0x200004fc

08002604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <_sbrk+0x5c>)
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <_sbrk+0x60>)
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <_sbrk+0x64>)
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <_sbrk+0x68>)
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d207      	bcs.n	8002644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002634:	f004 f800 	bl	8006638 <__errno>
 8002638:	4602      	mov	r2, r0
 800263a:	230c      	movs	r3, #12
 800263c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	e009      	b.n	8002658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <_sbrk+0x64>)
 8002654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002656:	68fb      	ldr	r3, [r7, #12]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	200a0000 	.word	0x200a0000
 8002664:	00000400 	.word	0x00000400
 8002668:	200002d4 	.word	0x200002d4
 800266c:	20000550 	.word	0x20000550

08002670 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <SystemInit+0x64>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <SystemInit+0x64>)
 800267c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <SystemInit+0x68>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <SystemInit+0x68>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <SystemInit+0x68>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <SystemInit+0x68>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <SystemInit+0x68>)
 800269c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80026a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <SystemInit+0x68>)
 80026a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <SystemInit+0x68>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <SystemInit+0x68>)
 80026b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <SystemInit+0x68>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SystemInit+0x64>)
 80026c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026c6:	609a      	str	r2, [r3, #8]
#endif
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00
 80026d8:	40021000 	.word	0x40021000

080026dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002714 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e0:	f7ff ffc6 	bl	8002670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026e6:	e003      	b.n	80026f0 <LoopCopyDataInit>

080026e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80026ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80026ee:	3104      	adds	r1, #4

080026f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80026f0:	480a      	ldr	r0, [pc, #40]	; (800271c <LoopForever+0xa>)
	ldr	r3, =_edata
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <LoopForever+0xe>)
	adds	r2, r0, r1
 80026f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80026f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80026f8:	d3f6      	bcc.n	80026e8 <CopyDataInit>
	ldr	r2, =_sbss
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <LoopForever+0x12>)
	b	LoopFillZerobss
 80026fc:	e002      	b.n	8002704 <LoopFillZerobss>

080026fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002700:	f842 3b04 	str.w	r3, [r2], #4

08002704 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <LoopForever+0x16>)
	cmp	r2, r3
 8002706:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002708:	d3f9      	bcc.n	80026fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270a:	f003 ff9b 	bl	8006644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800270e:	f7ff f9d1 	bl	8001ab4 <main>

08002712 <LoopForever>:

LoopForever:
    b LoopForever
 8002712:	e7fe      	b.n	8002712 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002714:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002718:	0800a478 	.word	0x0800a478
	ldr	r0, =_sdata
 800271c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002720:	200002a0 	.word	0x200002a0
	ldr	r2, =_sbss
 8002724:	200002a0 	.word	0x200002a0
	ldr	r3, = _ebss
 8002728:	20000550 	.word	0x20000550

0800272c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC1_IRQHandler>

0800272e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002738:	2003      	movs	r0, #3
 800273a:	f000 f900 	bl	800293e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff fecc 	bl	80024dc <HAL_InitTick>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	71fb      	strb	r3, [r7, #7]
 800274e:	e001      	b.n	8002754 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002750:	f7ff fdf6 	bl	8002340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002754:	79fb      	ldrb	r3, [r7, #7]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x20>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x24>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_IncTick+0x24>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200000cc 	.word	0x200000cc
 8002784:	20000548 	.word	0x20000548

08002788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_GetTick+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000548 	.word	0x20000548

080027a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff ffee 	bl	8002788 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d005      	beq.n	80027c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_Delay+0x40>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027c6:	bf00      	nop
 80027c8:	f7ff ffde 	bl	8002788 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d8f7      	bhi.n	80027c8 <HAL_Delay+0x28>
  {
  }
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200000cc 	.word	0x200000cc

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4907      	ldr	r1, [pc, #28]	; (8002880 <__NVIC_EnableIRQ+0x38>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	490c      	ldr	r1, [pc, #48]	; (80028d0 <__NVIC_SetPriority+0x4c>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	440b      	add	r3, r1
 80028a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ac:	e00a      	b.n	80028c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4908      	ldr	r1, [pc, #32]	; (80028d4 <__NVIC_SetPriority+0x50>)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3b04      	subs	r3, #4
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	440b      	add	r3, r1
 80028c2:	761a      	strb	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f1c3 0307 	rsb	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf28      	it	cs
 80028f6:	2304      	movcs	r3, #4
 80028f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d902      	bls.n	8002908 <NVIC_EncodePriority+0x30>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b03      	subs	r3, #3
 8002906:	e000      	b.n	800290a <NVIC_EncodePriority+0x32>
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43d9      	mvns	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	4313      	orrs	r3, r2
         );
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff4c 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002966:	f7ff ff61 	bl	800282c <__NVIC_GetPriorityGrouping>
 800296a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	6978      	ldr	r0, [r7, #20]
 8002972:	f7ff ffb1 	bl	80028d8 <NVIC_EncodePriority>
 8002976:	4602      	mov	r2, r0
 8002978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff80 	bl	8002884 <__NVIC_SetPriority>
}
 8002984:	bf00      	nop
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff54 	bl	8002848 <__NVIC_EnableIRQ>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b6:	e166      	b.n	8002c86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8158 	beq.w	8002c80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d00b      	beq.n	80029f0 <HAL_GPIO_Init+0x48>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b12      	cmp	r3, #18
 80029ee:	d130      	bne.n	8002a52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a26:	2201      	movs	r2, #1
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0201 	and.w	r2, r3, #1
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0xea>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d123      	bne.n	8002ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	6939      	ldr	r1, [r7, #16]
 8002ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80b2 	beq.w	8002c80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1c:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <HAL_GPIO_Init+0x2fc>)
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b20:	4a60      	ldr	r2, [pc, #384]	; (8002ca4 <HAL_GPIO_Init+0x2fc>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6613      	str	r3, [r2, #96]	; 0x60
 8002b28:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <HAL_GPIO_Init+0x2fc>)
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b34:	4a5c      	ldr	r2, [pc, #368]	; (8002ca8 <HAL_GPIO_Init+0x300>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b5e:	d02b      	beq.n	8002bb8 <HAL_GPIO_Init+0x210>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a52      	ldr	r2, [pc, #328]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d025      	beq.n	8002bb4 <HAL_GPIO_Init+0x20c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <HAL_GPIO_Init+0x308>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01f      	beq.n	8002bb0 <HAL_GPIO_Init+0x208>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_GPIO_Init+0x30c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d019      	beq.n	8002bac <HAL_GPIO_Init+0x204>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <HAL_GPIO_Init+0x310>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_GPIO_Init+0x200>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <HAL_GPIO_Init+0x314>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00d      	beq.n	8002ba4 <HAL_GPIO_Init+0x1fc>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a4d      	ldr	r2, [pc, #308]	; (8002cc0 <HAL_GPIO_Init+0x318>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <HAL_GPIO_Init+0x1f8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <HAL_GPIO_Init+0x31c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_GPIO_Init+0x1f4>
 8002b98:	2307      	movs	r3, #7
 8002b9a:	e00e      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	e00c      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002ba0:	2306      	movs	r3, #6
 8002ba2:	e00a      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	e008      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e006      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002bac:	2303      	movs	r3, #3
 8002bae:	e004      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	f002 0203 	and.w	r2, r2, #3
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	4093      	lsls	r3, r2
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bca:	4937      	ldr	r1, [pc, #220]	; (8002ca8 <HAL_GPIO_Init+0x300>)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bfc:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c02:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c26:	4a28      	ldr	r2, [pc, #160]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c2c:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c56:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3301      	adds	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f ae91 	bne.w	80029b8 <HAL_GPIO_Init+0x10>
  }
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	48000400 	.word	0x48000400
 8002cb0:	48000800 	.word	0x48000800
 8002cb4:	48000c00 	.word	0x48000c00
 8002cb8:	48001000 	.word	0x48001000
 8002cbc:	48001400 	.word	0x48001400
 8002cc0:	48001800 	.word	0x48001800
 8002cc4:	48001c00 	.word	0x48001c00
 8002cc8:	40010400 	.word	0x40010400

08002ccc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002cda:	e0c9      	b.n	8002e70 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80bc 	beq.w	8002e6a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002cf2:	4a66      	ldr	r2, [pc, #408]	; (8002e8c <HAL_GPIO_DeInit+0x1c0>)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d1a:	d02b      	beq.n	8002d74 <HAL_GPIO_DeInit+0xa8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a5c      	ldr	r2, [pc, #368]	; (8002e90 <HAL_GPIO_DeInit+0x1c4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d025      	beq.n	8002d70 <HAL_GPIO_DeInit+0xa4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a5b      	ldr	r2, [pc, #364]	; (8002e94 <HAL_GPIO_DeInit+0x1c8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d01f      	beq.n	8002d6c <HAL_GPIO_DeInit+0xa0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a5a      	ldr	r2, [pc, #360]	; (8002e98 <HAL_GPIO_DeInit+0x1cc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d019      	beq.n	8002d68 <HAL_GPIO_DeInit+0x9c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a59      	ldr	r2, [pc, #356]	; (8002e9c <HAL_GPIO_DeInit+0x1d0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_GPIO_DeInit+0x98>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_GPIO_DeInit+0x1d4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <HAL_GPIO_DeInit+0x94>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a57      	ldr	r2, [pc, #348]	; (8002ea4 <HAL_GPIO_DeInit+0x1d8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_DeInit+0x90>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a56      	ldr	r2, [pc, #344]	; (8002ea8 <HAL_GPIO_DeInit+0x1dc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_GPIO_DeInit+0x8c>
 8002d54:	2307      	movs	r3, #7
 8002d56:	e00e      	b.n	8002d76 <HAL_GPIO_DeInit+0xaa>
 8002d58:	2308      	movs	r3, #8
 8002d5a:	e00c      	b.n	8002d76 <HAL_GPIO_DeInit+0xaa>
 8002d5c:	2306      	movs	r3, #6
 8002d5e:	e00a      	b.n	8002d76 <HAL_GPIO_DeInit+0xaa>
 8002d60:	2305      	movs	r3, #5
 8002d62:	e008      	b.n	8002d76 <HAL_GPIO_DeInit+0xaa>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e006      	b.n	8002d76 <HAL_GPIO_DeInit+0xaa>
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e004      	b.n	8002d76 <HAL_GPIO_DeInit+0xaa>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_DeInit+0xaa>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_GPIO_DeInit+0xaa>
 8002d74:	2300      	movs	r3, #0
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d132      	bne.n	8002dec <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d86:	4b49      	ldr	r3, [pc, #292]	; (8002eac <HAL_GPIO_DeInit+0x1e0>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	4947      	ldr	r1, [pc, #284]	; (8002eac <HAL_GPIO_DeInit+0x1e0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d94:	4b45      	ldr	r3, [pc, #276]	; (8002eac <HAL_GPIO_DeInit+0x1e0>)
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	4943      	ldr	r1, [pc, #268]	; (8002eac <HAL_GPIO_DeInit+0x1e0>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002da2:	4b42      	ldr	r3, [pc, #264]	; (8002eac <HAL_GPIO_DeInit+0x1e0>)
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	4940      	ldr	r1, [pc, #256]	; (8002eac <HAL_GPIO_DeInit+0x1e0>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002db0:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <HAL_GPIO_DeInit+0x1e0>)
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	493c      	ldr	r1, [pc, #240]	; (8002eac <HAL_GPIO_DeInit+0x1e0>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002dce:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <HAL_GPIO_DeInit+0x1c0>)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	482b      	ldr	r0, [pc, #172]	; (8002e8c <HAL_GPIO_DeInit+0x1c0>)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	400a      	ands	r2, r1
 8002de6:	3302      	adds	r3, #2
 8002de8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2103      	movs	r1, #3
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	08d2      	lsrs	r2, r2, #3
 8002e20:	4019      	ands	r1, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2103      	movs	r1, #3
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	2101      	movs	r1, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f47f af2f 	bne.w	8002cdc <HAL_GPIO_DeInit+0x10>
  }
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	48000400 	.word	0x48000400
 8002e94:	48000800 	.word	0x48000800
 8002e98:	48000c00 	.word	0x48000c00
 8002e9c:	48001000 	.word	0x48001000
 8002ea0:	48001400 	.word	0x48001400
 8002ea4:	48001800 	.word	0x48001800
 8002ea8:	48001c00 	.word	0x48001c00
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f806 	bl	8002f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e081      	b.n	800303c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fa1b 	bl	8002388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2224      	movs	r2, #36	; 0x24
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	e006      	b.n	8002fae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d104      	bne.n	8002fc0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	ea42 0103 	orr.w	r1, r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	021a      	lsls	r2, r3, #8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69d9      	ldr	r1, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1a      	ldr	r2, [r3, #32]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0201 	orr.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e021      	b.n	800309a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2224      	movs	r2, #36	; 0x24
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff f9ce 	bl	8002410 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f040 80f9 	bne.w	80032be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_I2C_Mem_Write+0x34>
 80030d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0ed      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x4e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0e6      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030fa:	f7ff fb45 	bl	8002788 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fac3 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d1      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2221      	movs	r2, #33	; 0x21
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2240      	movs	r2, #64	; 0x40
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003144:	88f8      	ldrh	r0, [r7, #6]
 8003146:	893a      	ldrh	r2, [r7, #8]
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	4603      	mov	r3, r0
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f9d3 	bl	8003500 <I2C_RequestMemoryWrite>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0a9      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2bff      	cmp	r3, #255	; 0xff
 8003174:	d90e      	bls.n	8003194 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	22ff      	movs	r2, #255	; 0xff
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fba5 	bl	80038dc <I2C_TransferConfig>
 8003192:	e00f      	b.n	80031b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	2300      	movs	r3, #0
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fb94 	bl	80038dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 faad 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e07b      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d034      	beq.n	800326c <HAL_I2C_Mem_Write+0x1c8>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	d130      	bne.n	800326c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	2200      	movs	r2, #0
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fa3f 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e04d      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2bff      	cmp	r3, #255	; 0xff
 800322c:	d90e      	bls.n	800324c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	; 0xff
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8979      	ldrh	r1, [r7, #10]
 800323c:	2300      	movs	r3, #0
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fb49 	bl	80038dc <I2C_TransferConfig>
 800324a:	e00f      	b.n	800326c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	b2da      	uxtb	r2, r3
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fb38 	bl	80038dc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d19e      	bne.n	80031b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa8c 	bl	8003798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e01a      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2220      	movs	r2, #32
 8003290:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_I2C_Mem_Write+0x224>)
 800329e:	400b      	ands	r3, r1
 80032a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	fe00e800 	.word	0xfe00e800

080032cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	4608      	mov	r0, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	817b      	strh	r3, [r7, #10]
 80032de:	460b      	mov	r3, r1
 80032e0:	813b      	strh	r3, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	f040 80fd 	bne.w	80034ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_I2C_Mem_Read+0x34>
 80032fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0f1      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_I2C_Mem_Read+0x4e>
 8003316:	2302      	movs	r3, #2
 8003318:	e0ea      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003322:	f7ff fa31 	bl	8002788 <HAL_GetTick>
 8003326:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2319      	movs	r3, #25
 800332e:	2201      	movs	r2, #1
 8003330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f9af 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0d5      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2222      	movs	r2, #34	; 0x22
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a3a      	ldr	r2, [r7, #32]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800336c:	88f8      	ldrh	r0, [r7, #6]
 800336e:	893a      	ldrh	r2, [r7, #8]
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	4603      	mov	r3, r0
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f913 	bl	80035a8 <I2C_RequestMemoryRead>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0ad      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2bff      	cmp	r3, #255	; 0xff
 800339c:	d90e      	bls.n	80033bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	22ff      	movs	r2, #255	; 0xff
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	8979      	ldrh	r1, [r7, #10]
 80033ac:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <HAL_I2C_Mem_Read+0x22c>)
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fa91 	bl	80038dc <I2C_TransferConfig>
 80033ba:	e00f      	b.n	80033dc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	8979      	ldrh	r1, [r7, #10]
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <HAL_I2C_Mem_Read+0x22c>)
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fa80 	bl	80038dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	2200      	movs	r2, #0
 80033e4:	2104      	movs	r1, #4
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f956 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07c      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d034      	beq.n	800349c <HAL_I2C_Mem_Read+0x1d0>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d130      	bne.n	800349c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f927 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e04d      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2bff      	cmp	r3, #255	; 0xff
 800345c:	d90e      	bls.n	800347c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	2300      	movs	r3, #0
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fa31 	bl	80038dc <I2C_TransferConfig>
 800347a:	e00f      	b.n	800349c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	b2da      	uxtb	r2, r3
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	2300      	movs	r3, #0
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fa20 	bl	80038dc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d19a      	bne.n	80033dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f974 	bl	8003798 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e01a      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2220      	movs	r2, #32
 80034c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_I2C_Mem_Read+0x230>)
 80034ce:	400b      	ands	r3, r1
 80034d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	80002400 	.word	0x80002400
 80034fc:	fe00e800 	.word	0xfe00e800

08003500 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	8979      	ldrh	r1, [r7, #10]
 8003520:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <I2C_RequestMemoryWrite+0xa4>)
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f9d7 	bl	80038dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	69b9      	ldr	r1, [r7, #24]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f8f0 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02c      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003548:	893b      	ldrh	r3, [r7, #8]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	629a      	str	r2, [r3, #40]	; 0x28
 8003552:	e015      	b.n	8003580 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	b29b      	uxth	r3, r3
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	69b9      	ldr	r1, [r7, #24]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f8d6 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e012      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2200      	movs	r2, #0
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f884 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	80002000 	.word	0x80002000

080035a8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	460b      	mov	r3, r1
 80035bc:	813b      	strh	r3, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	8979      	ldrh	r1, [r7, #10]
 80035c8:	4b20      	ldr	r3, [pc, #128]	; (800364c <I2C_RequestMemoryRead+0xa4>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f984 	bl	80038dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	69b9      	ldr	r1, [r7, #24]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f89d 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e02c      	b.n	8003642 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
 80035f8:	e015      	b.n	8003626 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035fa:	893b      	ldrh	r3, [r7, #8]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f883 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e012      	b.n	8003642 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f831 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	80002000 	.word	0x80002000

08003650 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d103      	bne.n	800366e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d007      	beq.n	800368c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	619a      	str	r2, [r3, #24]
  }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	e022      	b.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d01e      	beq.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7ff f869 	bl	8002788 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d113      	bne.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e00f      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d0cd      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003724:	e02c      	b.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f870 	bl	8003810 <I2C_IsAcknowledgeFailed>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e02a      	b.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d01e      	beq.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7ff f821 	bl	8002788 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e007      	b.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d1cb      	bne.n	8003726 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a4:	e028      	b.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f830 	bl	8003810 <I2C_IsAcknowledgeFailed>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e026      	b.n	8003808 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fe ffe5 	bl	8002788 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d113      	bne.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e007      	b.n	8003808 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d1cf      	bne.n	80037a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b10      	cmp	r3, #16
 8003828:	d151      	bne.n	80038ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382a:	e022      	b.n	8003872 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d01e      	beq.n	8003872 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003834:	f7fe ffa8 	bl	8002788 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <I2C_IsAcknowledgeFailed+0x3a>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d113      	bne.n	8003872 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e02e      	b.n	80038d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b20      	cmp	r3, #32
 800387e:	d1d5      	bne.n	800382c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2210      	movs	r2, #16
 8003886:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2220      	movs	r2, #32
 800388e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff fedd 	bl	8003650 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f043 0204 	orr.w	r2, r3, #4
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	fe00e800 	.word	0xfe00e800

080038dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	4613      	mov	r3, r2
 80038ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	0d5b      	lsrs	r3, r3, #21
 80038f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <I2C_TransferConfig+0x58>)
 80038fe:	430b      	orrs	r3, r1
 8003900:	43db      	mvns	r3, r3
 8003902:	ea02 0103 	and.w	r1, r2, r3
 8003906:	897b      	ldrh	r3, [r7, #10]
 8003908:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800390c:	7a7b      	ldrb	r3, [r7, #9]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	431a      	orrs	r2, r3
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	03ff63ff 	.word	0x03ff63ff

08003938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b20      	cmp	r3, #32
 800394c:	d138      	bne.n	80039c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003958:	2302      	movs	r3, #2
 800395a:	e032      	b.n	80039c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	; 0x24
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800398a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d139      	bne.n	8003a58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e033      	b.n	8003a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2224      	movs	r2, #36	; 0x24
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a78:	d102      	bne.n	8003a80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a7e:	e00b      	b.n	8003a98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8e:	d102      	bne.n	8003a96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a94:	e000      	b.n	8003a98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40007000 	.word	0x40007000

08003aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d141      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ab6:	4b4b      	ldr	r3, [pc, #300]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	d131      	bne.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac4:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aca:	4a46      	ldr	r2, [pc, #280]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad4:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003adc:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2232      	movs	r2, #50	; 0x32
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	4a3f      	ldr	r2, [pc, #252]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	0c9b      	lsrs	r3, r3, #18
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afa:	e002      	b.n	8003b02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b02:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0e:	d102      	bne.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f2      	bne.n	8003afc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b16:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d158      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e057      	b.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b28:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2e:	4a2d      	ldr	r2, [pc, #180]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b38:	e04d      	b.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b40:	d141      	bne.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b42:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4e:	d131      	bne.n	8003bb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b68:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2232      	movs	r2, #50	; 0x32
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	0c9b      	lsrs	r3, r3, #18
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b86:	e002      	b.n	8003b8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9a:	d102      	bne.n	8003ba2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f2      	bne.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bae:	d112      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e011      	b.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bc4:	e007      	b.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40007000 	.word	0x40007000
 8003be8:	200000c4 	.word	0x200000c4
 8003bec:	431bde83 	.word	0x431bde83

08003bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f000 bc16 	b.w	8004430 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c04:	4ba0      	ldr	r3, [pc, #640]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c0e:	4b9e      	ldr	r3, [pc, #632]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80e4 	beq.w	8003dee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_RCC_OscConfig+0x4c>
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	f040 808b 	bne.w	8003d4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	f040 8087 	bne.w	8003d4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c3c:	4b92      	ldr	r3, [pc, #584]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_OscConfig+0x64>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e3ed      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	4b8b      	ldr	r3, [pc, #556]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <HAL_RCC_OscConfig+0x7e>
 8003c64:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c6c:	e005      	b.n	8003c7a <HAL_RCC_OscConfig+0x8a>
 8003c6e:	4b86      	ldr	r3, [pc, #536]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d223      	bcs.n	8003cc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fdfa 	bl	800487c <RCC_SetFlashLatencyFromMSIRange>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e3ce      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c92:	4b7d      	ldr	r3, [pc, #500]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7c      	ldr	r2, [pc, #496]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b7a      	ldr	r3, [pc, #488]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4977      	ldr	r1, [pc, #476]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb0:	4b75      	ldr	r3, [pc, #468]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	4972      	ldr	r1, [pc, #456]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
 8003cc4:	e025      	b.n	8003d12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc6:	4b70      	ldr	r3, [pc, #448]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6f      	ldr	r2, [pc, #444]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	496a      	ldr	r1, [pc, #424]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce4:	4b68      	ldr	r3, [pc, #416]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	4965      	ldr	r1, [pc, #404]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fdba 	bl	800487c <RCC_SetFlashLatencyFromMSIRange>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e38e      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d12:	f000 fcbf 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8003d16:	4601      	mov	r1, r0
 8003d18:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	4a5a      	ldr	r2, [pc, #360]	; (8003e8c <HAL_RCC_OscConfig+0x29c>)
 8003d24:	5cd3      	ldrb	r3, [r2, r3]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d2e:	4a58      	ldr	r2, [pc, #352]	; (8003e90 <HAL_RCC_OscConfig+0x2a0>)
 8003d30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d32:	4b58      	ldr	r3, [pc, #352]	; (8003e94 <HAL_RCC_OscConfig+0x2a4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fbd0 	bl	80024dc <HAL_InitTick>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d052      	beq.n	8003dec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	e372      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d032      	beq.n	8003db8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a4c      	ldr	r2, [pc, #304]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d5e:	f7fe fd13 	bl	8002788 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d66:	f7fe fd0f 	bl	8002788 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e35b      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d84:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003d8a:	f043 0308 	orr.w	r3, r3, #8
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b3d      	ldr	r3, [pc, #244]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	493a      	ldr	r1, [pc, #232]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da2:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	4935      	ldr	r1, [pc, #212]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
 8003db6:	e01a      	b.n	8003dee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003db8:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a32      	ldr	r2, [pc, #200]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fce0 	bl	8002788 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dcc:	f7fe fcdc 	bl	8002788 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e328      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dde:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x1dc>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d073      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_OscConfig+0x21c>
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d10e      	bne.n	8003e24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d10b      	bne.n	8003e24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d063      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x2f0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d15f      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e305      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCC_OscConfig+0x24c>
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e01d      	b.n	8003e78 <HAL_RCC_OscConfig+0x288>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x270>
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a0f      	ldr	r2, [pc, #60]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a0c      	ldr	r2, [pc, #48]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0x288>
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <HAL_RCC_OscConfig+0x298>)
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fc82 	bl	8002788 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e86:	e010      	b.n	8003eaa <HAL_RCC_OscConfig+0x2ba>
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	0800a154 	.word	0x0800a154
 8003e90:	200000c4 	.word	0x200000c4
 8003e94:	200000c8 	.word	0x200000c8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fe fc76 	bl	8002788 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e2c2      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eaa:	4baf      	ldr	r3, [pc, #700]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x2a8>
 8003eb6:	e014      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fc66 	bl	8002788 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fe fc62 	bl	8002788 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e2ae      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed2:	4ba5      	ldr	r3, [pc, #660]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x2d0>
 8003ede:	e000      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d060      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_OscConfig+0x310>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b0c      	cmp	r3, #12
 8003ef8:	d119      	bne.n	8003f2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d116      	bne.n	8003f2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f00:	4b99      	ldr	r3, [pc, #612]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_OscConfig+0x328>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e28b      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b93      	ldr	r3, [pc, #588]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	4990      	ldr	r1, [pc, #576]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f2c:	e040      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d023      	beq.n	8003f7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f36:	4b8c      	ldr	r3, [pc, #560]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a8b      	ldr	r2, [pc, #556]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fe fc21 	bl	8002788 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4a:	f7fe fc1d 	bl	8002788 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e269      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f5c:	4b82      	ldr	r3, [pc, #520]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f68:	4b7f      	ldr	r3, [pc, #508]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	497c      	ldr	r1, [pc, #496]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7e:	4b7a      	ldr	r3, [pc, #488]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a79      	ldr	r2, [pc, #484]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fe fbfd 	bl	8002788 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f92:	f7fe fbf9 	bl	8002788 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e245      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa4:	4b70      	ldr	r3, [pc, #448]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d03c      	beq.n	8004036 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc4:	4b68      	ldr	r3, [pc, #416]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fca:	4a67      	ldr	r2, [pc, #412]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fe fbd8 	bl	8002788 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fe fbd4 	bl	8002788 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e220      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fee:	4b5e      	ldr	r3, [pc, #376]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8003ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <HAL_RCC_OscConfig+0x3ec>
 8003ffc:	e01b      	b.n	8004036 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffe:	4b5a      	ldr	r3, [pc, #360]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8004000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400e:	f7fe fbbb 	bl	8002788 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004016:	f7fe fbb7 	bl	8002788 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e203      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004028:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 800402a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ef      	bne.n	8004016 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80a6 	beq.w	8004190 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004044:	2300      	movs	r3, #0
 8004046:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004048:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004054:	4b44      	ldr	r3, [pc, #272]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	4a43      	ldr	r2, [pc, #268]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 800405a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405e:	6593      	str	r3, [r2, #88]	; 0x58
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406c:	2301      	movs	r3, #1
 800406e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004070:	4b3e      	ldr	r3, [pc, #248]	; (800416c <HAL_RCC_OscConfig+0x57c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d118      	bne.n	80040ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCC_OscConfig+0x57c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3a      	ldr	r2, [pc, #232]	; (800416c <HAL_RCC_OscConfig+0x57c>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004088:	f7fe fb7e 	bl	8002788 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fe fb7a 	bl	8002788 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e1c6      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a2:	4b32      	ldr	r3, [pc, #200]	; (800416c <HAL_RCC_OscConfig+0x57c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d108      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4d8>
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040c6:	e024      	b.n	8004112 <HAL_RCC_OscConfig+0x522>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	d110      	bne.n	80040f2 <HAL_RCC_OscConfig+0x502>
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	4a24      	ldr	r2, [pc, #144]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e0:	4b21      	ldr	r3, [pc, #132]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	4a20      	ldr	r2, [pc, #128]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f0:	e00f      	b.n	8004112 <HAL_RCC_OscConfig+0x522>
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 8004104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004108:	4a17      	ldr	r2, [pc, #92]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 800410a:	f023 0304 	bic.w	r3, r3, #4
 800410e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411a:	f7fe fb35 	bl	8002788 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fe fb31 	bl	8002788 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e17b      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_OscConfig+0x578>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0ed      	beq.n	8004122 <HAL_RCC_OscConfig+0x532>
 8004146:	e01a      	b.n	800417e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fe fb1e 	bl	8002788 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800414e:	e00f      	b.n	8004170 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7fe fb1a 	bl	8002788 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d906      	bls.n	8004170 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e164      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004170:	4ba8      	ldr	r3, [pc, #672]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e8      	bne.n	8004150 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800417e:	7ffb      	ldrb	r3, [r7, #31]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004184:	4ba3      	ldr	r3, [pc, #652]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	4aa2      	ldr	r2, [pc, #648]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 800418a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d03c      	beq.n	8004216 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01c      	beq.n	80041de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041a4:	4b9b      	ldr	r3, [pc, #620]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80041a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041aa:	4a9a      	ldr	r2, [pc, #616]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fe fae8 	bl	8002788 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041bc:	f7fe fae4 	bl	8002788 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e130      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ce:	4b91      	ldr	r3, [pc, #580]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80041d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ef      	beq.n	80041bc <HAL_RCC_OscConfig+0x5cc>
 80041dc:	e01b      	b.n	8004216 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041de:	4b8d      	ldr	r3, [pc, #564]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80041e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041e4:	4a8b      	ldr	r2, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe facb 	bl	8002788 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041f6:	f7fe fac7 	bl	8002788 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e113      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004208:	4b82      	ldr	r3, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 800420a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1ef      	bne.n	80041f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8107 	beq.w	800442e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	2b02      	cmp	r3, #2
 8004226:	f040 80cb 	bne.w	80043c0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800422a:	4b7a      	ldr	r3, [pc, #488]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 0203 	and.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	429a      	cmp	r2, r3
 800423c:	d12c      	bne.n	8004298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	3b01      	subs	r3, #1
 800424a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d123      	bne.n	8004298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d11b      	bne.n	8004298 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d113      	bne.n	8004298 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	3b01      	subs	r3, #1
 800427e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d109      	bne.n	8004298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	3b01      	subs	r3, #1
 8004292:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d06d      	beq.n	8004374 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b0c      	cmp	r3, #12
 800429c:	d068      	beq.n	8004370 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800429e:	4b5d      	ldr	r3, [pc, #372]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042aa:	4b5a      	ldr	r3, [pc, #360]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e0ba      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042ba:	4b56      	ldr	r3, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a55      	ldr	r2, [pc, #340]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80042c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042c6:	f7fe fa5f 	bl	8002788 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fe fa5b 	bl	8002788 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0a7      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ec:	4b49      	ldr	r3, [pc, #292]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	4b49      	ldr	r3, [pc, #292]	; (8004418 <HAL_RCC_OscConfig+0x828>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004306:	0212      	lsls	r2, r2, #8
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800430e:	0852      	lsrs	r2, r2, #1
 8004310:	3a01      	subs	r2, #1
 8004312:	0552      	lsls	r2, r2, #21
 8004314:	4311      	orrs	r1, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800431a:	0852      	lsrs	r2, r2, #1
 800431c:	3a01      	subs	r2, #1
 800431e:	0652      	lsls	r2, r2, #25
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004326:	06d2      	lsls	r2, r2, #27
 8004328:	430a      	orrs	r2, r1
 800432a:	493a      	ldr	r1, [pc, #232]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 800432c:	4313      	orrs	r3, r2
 800432e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004330:	4b38      	ldr	r3, [pc, #224]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a37      	ldr	r2, [pc, #220]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800433a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4a34      	ldr	r2, [pc, #208]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004348:	f7fe fa1e 	bl	8002788 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe fa1a 	bl	8002788 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e066      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004362:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800436e:	e05e      	b.n	800442e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e05d      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004374:	4b27      	ldr	r3, [pc, #156]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d156      	bne.n	800442e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a23      	ldr	r2, [pc, #140]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800438c:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004398:	f7fe f9f6 	bl	8002788 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe f9f2 	bl	8002788 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e03e      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x7b0>
 80043be:	e036      	b.n	800442e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d031      	beq.n	800442a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a12      	ldr	r2, [pc, #72]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80043cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80043e4:	f023 0303 	bic.w	r3, r3, #3
 80043e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x824>)
 80043f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fe f9c5 	bl	8002788 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004400:	e00c      	b.n	800441c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fe f9c1 	bl	8002788 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d905      	bls.n	800441c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e00d      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
 8004414:	40021000 	.word	0x40021000
 8004418:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCC_OscConfig+0x848>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ec      	bne.n	8004402 <HAL_RCC_OscConfig+0x812>
 8004428:	e001      	b.n	800442e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000

0800443c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e10f      	b.n	8004674 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b89      	ldr	r3, [pc, #548]	; (800467c <HAL_RCC_ClockConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d910      	bls.n	8004484 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b86      	ldr	r3, [pc, #536]	; (800467c <HAL_RCC_ClockConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 020f 	bic.w	r2, r3, #15
 800446a:	4984      	ldr	r1, [pc, #528]	; (800467c <HAL_RCC_ClockConfig+0x240>)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b82      	ldr	r3, [pc, #520]	; (800467c <HAL_RCC_ClockConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0f7      	b.n	8004674 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8089 	beq.w	80045a4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d133      	bne.n	8004502 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	4b79      	ldr	r3, [pc, #484]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0e4      	b.n	8004674 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80044aa:	f000 fa41 	bl	8004930 <RCC_GetSysClockFreqFromPLLSource>
 80044ae:	4602      	mov	r2, r0
 80044b0:	4b74      	ldr	r3, [pc, #464]	; (8004684 <HAL_RCC_ClockConfig+0x248>)
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d955      	bls.n	8004562 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044b6:	4b72      	ldr	r3, [pc, #456]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044c2:	4b6f      	ldr	r3, [pc, #444]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ca:	4a6d      	ldr	r2, [pc, #436]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80044cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e044      	b.n	8004562 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d03e      	beq.n	8004562 <HAL_RCC_ClockConfig+0x126>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d13a      	bne.n	8004562 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044ec:	4b64      	ldr	r3, [pc, #400]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f4:	4a62      	ldr	r2, [pc, #392]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	e02f      	b.n	8004562 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d107      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450a:	4b5d      	ldr	r3, [pc, #372]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d115      	bne.n	8004542 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e0ac      	b.n	8004674 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004522:	4b57      	ldr	r3, [pc, #348]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0a0      	b.n	8004674 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004532:	4b53      	ldr	r3, [pc, #332]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e098      	b.n	8004674 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004542:	f000 f8a7 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8004546:	4602      	mov	r2, r0
 8004548:	4b4e      	ldr	r3, [pc, #312]	; (8004684 <HAL_RCC_ClockConfig+0x248>)
 800454a:	429a      	cmp	r2, r3
 800454c:	d909      	bls.n	8004562 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800454e:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004556:	4a4a      	ldr	r2, [pc, #296]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b47      	ldr	r3, [pc, #284]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4944      	ldr	r1, [pc, #272]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004574:	f7fe f908 	bl	8002788 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fe f904 	bl	8002788 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e070      	b.n	8004674 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b0:	4b33      	ldr	r3, [pc, #204]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4930      	ldr	r1, [pc, #192]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d105      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045ca:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 80045d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d6:	4b29      	ldr	r3, [pc, #164]	; (800467c <HAL_RCC_ClockConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d210      	bcs.n	8004606 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_RCC_ClockConfig+0x240>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f023 020f 	bic.w	r2, r3, #15
 80045ec:	4923      	ldr	r1, [pc, #140]	; (800467c <HAL_RCC_ClockConfig+0x240>)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_RCC_ClockConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d001      	beq.n	8004606 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e036      	b.n	8004674 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4918      	ldr	r1, [pc, #96]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004630:	4b13      	ldr	r3, [pc, #76]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4910      	ldr	r1, [pc, #64]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004640:	4313      	orrs	r3, r2
 8004642:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004644:	f000 f826 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8004648:	4601      	mov	r1, r0
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_RCC_ClockConfig+0x244>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <HAL_RCC_ClockConfig+0x24c>)
 8004656:	5cd3      	ldrb	r3, [r2, r3]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	fa21 f303 	lsr.w	r3, r1, r3
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <HAL_RCC_ClockConfig+0x250>)
 8004662:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <HAL_RCC_ClockConfig+0x254>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd ff37 	bl	80024dc <HAL_InitTick>
 800466e:	4603      	mov	r3, r0
 8004670:	73fb      	strb	r3, [r7, #15]

  return status;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40022000 	.word	0x40022000
 8004680:	40021000 	.word	0x40021000
 8004684:	04c4b400 	.word	0x04c4b400
 8004688:	0800a154 	.word	0x0800a154
 800468c:	200000c4 	.word	0x200000c4
 8004690:	200000c8 	.word	0x200000c8

08004694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a2:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ac:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x34>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d11e      	bne.n	8004706 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046c8:	4b33      	ldr	r3, [pc, #204]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046d4:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 80046d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e005      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046e4:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046f0:	4a2a      	ldr	r2, [pc, #168]	; (800479c <HAL_RCC_GetSysClockFreq+0x108>)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10d      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004704:	e00a      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b04      	cmp	r3, #4
 800470a:	d102      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800470c:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	e004      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d101      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800471a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d133      	bne.n	800478a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004722:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d002      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0xa4>
 8004732:	2b03      	cmp	r3, #3
 8004734:	d003      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0xaa>
 8004736:	e005      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800473a:	617b      	str	r3, [r7, #20]
      break;
 800473c:	e005      	b.n	800474a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800473e:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004740:	617b      	str	r3, [r7, #20]
      break;
 8004742:	e002      	b.n	800474a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	617b      	str	r3, [r7, #20]
      break;
 8004748:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800474a:	4b13      	ldr	r3, [pc, #76]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	3301      	adds	r3, #1
 8004756:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004758:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	fb02 f203 	mul.w	r2, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_RCC_GetSysClockFreq+0x104>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	0e5b      	lsrs	r3, r3, #25
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	3301      	adds	r3, #1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800478a:	69bb      	ldr	r3, [r7, #24]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3724      	adds	r7, #36	; 0x24
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40021000 	.word	0x40021000
 800479c:	0800a16c 	.word	0x0800a16c
 80047a0:	00f42400 	.word	0x00f42400
 80047a4:	007a1200 	.word	0x007a1200

080047a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ae:	681b      	ldr	r3, [r3, #0]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	200000c4 	.word	0x200000c4

080047c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047c4:	f7ff fff0 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047c8:	4601      	mov	r1, r0
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047d6:	5cd3      	ldrb	r3, [r2, r3]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000
 80047e8:	0800a164 	.word	0x0800a164

080047ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047f0:	f7ff ffda 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047f4:	4601      	mov	r1, r0
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0adb      	lsrs	r3, r3, #11
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4a04      	ldr	r2, [pc, #16]	; (8004814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	0800a164 	.word	0x0800a164

08004818 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	220f      	movs	r2, #15
 8004826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_GetClockConfig+0x5c>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0203 	and.w	r2, r3, #3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <HAL_RCC_GetClockConfig+0x5c>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_RCC_GetClockConfig+0x5c>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_GetClockConfig+0x5c>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	08db      	lsrs	r3, r3, #3
 8004852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_RCC_GetClockConfig+0x60>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 020f 	and.w	r2, r3, #15
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	601a      	str	r2, [r3, #0]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
 8004878:	40022000 	.word	0x40022000

0800487c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004888:	4b27      	ldr	r3, [pc, #156]	; (8004928 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004894:	f7ff f8e8 	bl	8003a68 <HAL_PWREx_GetVoltageRange>
 8004898:	6178      	str	r0, [r7, #20]
 800489a:	e014      	b.n	80048c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	4b22      	ldr	r3, [pc, #136]	; (8004928 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	4a21      	ldr	r2, [pc, #132]	; (8004928 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6593      	str	r3, [r2, #88]	; 0x58
 80048a8:	4b1f      	ldr	r3, [pc, #124]	; (8004928 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048b4:	f7ff f8d8 	bl	8003a68 <HAL_PWREx_GetVoltageRange>
 80048b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048ba:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048cc:	d10b      	bne.n	80048e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b80      	cmp	r3, #128	; 0x80
 80048d2:	d913      	bls.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2ba0      	cmp	r3, #160	; 0xa0
 80048d8:	d902      	bls.n	80048e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048da:	2302      	movs	r3, #2
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e00d      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048e0:	2301      	movs	r3, #1
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	e00a      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b7f      	cmp	r3, #127	; 0x7f
 80048ea:	d902      	bls.n	80048f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048ec:	2302      	movs	r3, #2
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e004      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b70      	cmp	r3, #112	; 0x70
 80048f6:	d101      	bne.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048f8:	2301      	movs	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 020f 	bic.w	r2, r3, #15
 8004904:	4909      	ldr	r1, [pc, #36]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	429a      	cmp	r2, r3
 8004918:	d001      	beq.n	800491e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40021000 	.word	0x40021000
 800492c:	40022000 	.word	0x40022000

08004930 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800493a:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d118      	bne.n	8004978 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004946:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004952:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e005      	b.n	800496e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004962:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800496e:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004976:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004978:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d002      	beq.n	800498e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8004988:	2b03      	cmp	r3, #3
 800498a:	d003      	beq.n	8004994 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800498c:	e005      	b.n	800499a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800498e:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004990:	613b      	str	r3, [r7, #16]
    break;
 8004992:	e005      	b.n	80049a0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004994:	4b19      	ldr	r3, [pc, #100]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004996:	613b      	str	r3, [r7, #16]
    break;
 8004998:	e002      	b.n	80049a0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	613b      	str	r3, [r7, #16]
    break;
 800499e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049a0:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	3301      	adds	r3, #1
 80049ac:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	fb02 f203 	mul.w	r2, r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	0e5b      	lsrs	r3, r3, #25
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	3301      	adds	r3, #1
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80049e0:	683b      	ldr	r3, [r7, #0]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
 80049f4:	0800a16c 	.word	0x0800a16c
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	007a1200 	.word	0x007a1200

08004a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a08:	2300      	movs	r3, #0
 8004a0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d03d      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d00b      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d804      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00e      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d015      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004a30:	e01d      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004a32:	2b60      	cmp	r3, #96	; 0x60
 8004a34:	d01e      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d01c      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a3a:	e018      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a3c:	4b86      	ldr	r3, [pc, #536]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a85      	ldr	r2, [pc, #532]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a48:	e015      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fafd 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a5a:	e00c      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3320      	adds	r3, #32
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fbe4 	bl	8005230 <RCCEx_PLLSAI2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a6c:	e003      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	74fb      	strb	r3, [r7, #19]
      break;
 8004a72:	e000      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8004a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a76:	7cfb      	ldrb	r3, [r7, #19]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a7c:	4b76      	ldr	r3, [pc, #472]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a82:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8a:	4973      	ldr	r1, [pc, #460]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a92:	e001      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d042      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aac:	d00f      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab2:	d805      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d011      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abc:	d017      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xee>
 8004abe:	e01f      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac4:	d01f      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aca:	d01c      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004acc:	e018      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ace:	4b62      	ldr	r3, [pc, #392]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a61      	ldr	r2, [pc, #388]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ada:	e015      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fab4 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aec:	e00c      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3320      	adds	r3, #32
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fb9b 	bl	8005230 <RCCEx_PLLSAI2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	74fb      	strb	r3, [r7, #19]
      break;
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b0e:	4b52      	ldr	r3, [pc, #328]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	494e      	ldr	r1, [pc, #312]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b24:	e001      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 809f 	beq.w	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b3c:	4b46      	ldr	r3, [pc, #280]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b52:	4b41      	ldr	r3, [pc, #260]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	4a40      	ldr	r2, [pc, #256]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5e:	4b3e      	ldr	r3, [pc, #248]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a3a      	ldr	r2, [pc, #232]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b7a:	f7fd fe05 	bl	8002788 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b80:	e009      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b82:	f7fd fe01 	bl	8002788 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d902      	bls.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	74fb      	strb	r3, [r7, #19]
        break;
 8004b94:	e005      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b96:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ef      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8004ba2:	7cfb      	ldrb	r3, [r7, #19]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d15b      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ba8:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01f      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d019      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bc6:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bd2:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf2:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d016      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fd fdc0 	bl	8002788 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0c:	f7fd fdbc 	bl	8002788 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d902      	bls.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	74fb      	strb	r3, [r7, #19]
            break;
 8004c22:	e006      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ec      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c32:	7cfb      	ldrb	r3, [r7, #19]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c50:	e008      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c52:	7cfb      	ldrb	r3, [r7, #19]
 8004c54:	74bb      	strb	r3, [r7, #18]
 8004c56:	e005      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c64:	7c7b      	ldrb	r3, [r7, #17]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d105      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6a:	4ba0      	ldr	r3, [pc, #640]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	4a9f      	ldr	r2, [pc, #636]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c82:	4b9a      	ldr	r3, [pc, #616]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f023 0203 	bic.w	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	4996      	ldr	r1, [pc, #600]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca4:	4b91      	ldr	r3, [pc, #580]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f023 020c 	bic.w	r2, r3, #12
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	498e      	ldr	r1, [pc, #568]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc6:	4b89      	ldr	r3, [pc, #548]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	4985      	ldr	r1, [pc, #532]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce8:	4b80      	ldr	r3, [pc, #512]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	497d      	ldr	r1, [pc, #500]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d0a:	4b78      	ldr	r3, [pc, #480]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d18:	4974      	ldr	r1, [pc, #464]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d2c:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	496c      	ldr	r1, [pc, #432]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d4e:	4b67      	ldr	r3, [pc, #412]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d5c:	4963      	ldr	r1, [pc, #396]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d70:	4b5e      	ldr	r3, [pc, #376]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d7e:	495b      	ldr	r1, [pc, #364]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d92:	4b56      	ldr	r3, [pc, #344]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	4952      	ldr	r1, [pc, #328]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004db4:	4b4d      	ldr	r3, [pc, #308]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	494a      	ldr	r1, [pc, #296]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dd6:	4b45      	ldr	r3, [pc, #276]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de4:	4941      	ldr	r1, [pc, #260]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004df8:	4b3c      	ldr	r3, [pc, #240]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dfe:	f023 0203 	bic.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e06:	4939      	ldr	r1, [pc, #228]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d028      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e1a:	4b34      	ldr	r3, [pc, #208]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e28:	4930      	ldr	r1, [pc, #192]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e38:	d106      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e3a:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e44:	60d3      	str	r3, [r2, #12]
 8004e46:	e011      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2101      	movs	r1, #1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f8f9 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d04d      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e80:	d108      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e82:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e92:	e012      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004e94:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e9a:	4a14      	ldr	r2, [pc, #80]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ea4:	4b11      	ldr	r3, [pc, #68]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb2:	490e      	ldr	r1, [pc, #56]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a08      	ldr	r2, [pc, #32]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ece:	60d3      	str	r3, [r2, #12]
 8004ed0:	e020      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eda:	d109      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a02      	ldr	r2, [pc, #8]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee6:	60d3      	str	r3, [r2, #12]
 8004ee8:	e014      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004eea:	bf00      	nop
 8004eec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f8a5 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d028      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f20:	4b4a      	ldr	r3, [pc, #296]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f2e:	4947      	ldr	r1, [pc, #284]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f40:	4b42      	ldr	r3, [pc, #264]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a41      	ldr	r2, [pc, #260]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4a:	60d3      	str	r3, [r2, #12]
 8004f4c:	e011      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f56:	d10c      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f876 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01e      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f7e:	4b33      	ldr	r3, [pc, #204]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8e:	492f      	ldr	r1, [pc, #188]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 f851 	bl	8005050 <RCCEx_PLLSAI1_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fc8:	4b20      	ldr	r3, [pc, #128]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fce:	f023 0204 	bic.w	r2, r3, #4
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd8:	491c      	ldr	r1, [pc, #112]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fec:	4b17      	ldr	r3, [pc, #92]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ff2:	f023 0218 	bic.w	r2, r3, #24
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	4913      	ldr	r1, [pc, #76]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d017      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005010:	4b0e      	ldr	r3, [pc, #56]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005020:	490a      	ldr	r1, [pc, #40]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800502e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005032:	d105      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4a04      	ldr	r2, [pc, #16]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800503a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800503e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005040:	7cbb      	ldrb	r3, [r7, #18]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000

08005050 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800505e:	4b70      	ldr	r3, [pc, #448]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800506a:	4b6d      	ldr	r3, [pc, #436]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0203 	and.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d103      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
       ||
 800507e:	2b00      	cmp	r3, #0
 8005080:	d13f      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	e03c      	b.n	8005102 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d00c      	beq.n	80050aa <RCCEx_PLLSAI1_Config+0x5a>
 8005090:	2b03      	cmp	r3, #3
 8005092:	d013      	beq.n	80050bc <RCCEx_PLLSAI1_Config+0x6c>
 8005094:	2b01      	cmp	r3, #1
 8005096:	d120      	bne.n	80050da <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005098:	4b61      	ldr	r3, [pc, #388]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11d      	bne.n	80050e0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a8:	e01a      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050aa:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ba:	e013      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050bc:	4b58      	ldr	r3, [pc, #352]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10f      	bne.n	80050e8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050c8:	4b55      	ldr	r3, [pc, #340]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050d8:	e006      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
      break;
 80050de:	e004      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80050e0:	bf00      	nop
 80050e2:	e002      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80050e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80050f0:	4b4b      	ldr	r3, [pc, #300]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f023 0203 	bic.w	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4948      	ldr	r1, [pc, #288]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f040 8086 	bne.w	8005216 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800510a:	4b45      	ldr	r3, [pc, #276]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a44      	ldr	r2, [pc, #272]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005110:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005116:	f7fd fb37 	bl	8002788 <HAL_GetTick>
 800511a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800511c:	e009      	b.n	8005132 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800511e:	f7fd fb33 	bl	8002788 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d902      	bls.n	8005132 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	73fb      	strb	r3, [r7, #15]
        break;
 8005130:	e005      	b.n	800513e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005132:	4b3b      	ldr	r3, [pc, #236]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1ef      	bne.n	800511e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d168      	bne.n	8005216 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d113      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800514a:	4b35      	ldr	r3, [pc, #212]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	4b35      	ldr	r3, [pc, #212]	; (8005224 <RCCEx_PLLSAI1_Config+0x1d4>)
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	0211      	lsls	r1, r2, #8
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68d2      	ldr	r2, [r2, #12]
 800515c:	06d2      	lsls	r2, r2, #27
 800515e:	4311      	orrs	r1, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6852      	ldr	r2, [r2, #4]
 8005164:	3a01      	subs	r2, #1
 8005166:	0112      	lsls	r2, r2, #4
 8005168:	430a      	orrs	r2, r1
 800516a:	492d      	ldr	r1, [pc, #180]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 800516c:	4313      	orrs	r3, r2
 800516e:	610b      	str	r3, [r1, #16]
 8005170:	e02d      	b.n	80051ce <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d115      	bne.n	80051a4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005178:	4b29      	ldr	r3, [pc, #164]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <RCCEx_PLLSAI1_Config+0x1d8>)
 800517e:	4013      	ands	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6892      	ldr	r2, [r2, #8]
 8005184:	0211      	lsls	r1, r2, #8
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6912      	ldr	r2, [r2, #16]
 800518a:	0852      	lsrs	r2, r2, #1
 800518c:	3a01      	subs	r2, #1
 800518e:	0552      	lsls	r2, r2, #21
 8005190:	4311      	orrs	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6852      	ldr	r2, [r2, #4]
 8005196:	3a01      	subs	r2, #1
 8005198:	0112      	lsls	r2, r2, #4
 800519a:	430a      	orrs	r2, r1
 800519c:	4920      	ldr	r1, [pc, #128]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	610b      	str	r3, [r1, #16]
 80051a2:	e014      	b.n	80051ce <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051a4:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <RCCEx_PLLSAI1_Config+0x1dc>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6892      	ldr	r2, [r2, #8]
 80051b0:	0211      	lsls	r1, r2, #8
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6952      	ldr	r2, [r2, #20]
 80051b6:	0852      	lsrs	r2, r2, #1
 80051b8:	3a01      	subs	r2, #1
 80051ba:	0652      	lsls	r2, r2, #25
 80051bc:	4311      	orrs	r1, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6852      	ldr	r2, [r2, #4]
 80051c2:	3a01      	subs	r2, #1
 80051c4:	0112      	lsls	r2, r2, #4
 80051c6:	430a      	orrs	r2, r1
 80051c8:	4915      	ldr	r1, [pc, #84]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a13      	ldr	r2, [pc, #76]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80051d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fd fad5 	bl	8002788 <HAL_GetTick>
 80051de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e0:	e009      	b.n	80051f6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051e2:	f7fd fad1 	bl	8002788 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d902      	bls.n	80051f6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	73fb      	strb	r3, [r7, #15]
          break;
 80051f4:	e005      	b.n	8005202 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0ef      	beq.n	80051e2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4903      	ldr	r1, [pc, #12]	; (8005220 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005212:	4313      	orrs	r3, r2
 8005214:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	07ff800f 	.word	0x07ff800f
 8005228:	ff9f800f 	.word	0xff9f800f
 800522c:	f9ff800f 	.word	0xf9ff800f

08005230 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800523e:	4b70      	ldr	r3, [pc, #448]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800524a:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0203 	and.w	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d103      	bne.n	8005262 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
       ||
 800525e:	2b00      	cmp	r3, #0
 8005260:	d13f      	bne.n	80052e2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
 8005266:	e03c      	b.n	80052e2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d00c      	beq.n	800528a <RCCEx_PLLSAI2_Config+0x5a>
 8005270:	2b03      	cmp	r3, #3
 8005272:	d013      	beq.n	800529c <RCCEx_PLLSAI2_Config+0x6c>
 8005274:	2b01      	cmp	r3, #1
 8005276:	d120      	bne.n	80052ba <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005278:	4b61      	ldr	r3, [pc, #388]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d11d      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005288:	e01a      	b.n	80052c0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800528a:	4b5d      	ldr	r3, [pc, #372]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005292:	2b00      	cmp	r3, #0
 8005294:	d116      	bne.n	80052c4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529a:	e013      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800529c:	4b58      	ldr	r3, [pc, #352]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10f      	bne.n	80052c8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052a8:	4b55      	ldr	r3, [pc, #340]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052b8:	e006      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
      break;
 80052be:	e004      	b.n	80052ca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80052c0:	bf00      	nop
 80052c2:	e002      	b.n	80052ca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80052c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80052d0:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f023 0203 	bic.w	r2, r3, #3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4948      	ldr	r1, [pc, #288]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 8086 	bne.w	80053f6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052ea:	4b45      	ldr	r3, [pc, #276]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a44      	ldr	r2, [pc, #272]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80052f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f6:	f7fd fa47 	bl	8002788 <HAL_GetTick>
 80052fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052fc:	e009      	b.n	8005312 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052fe:	f7fd fa43 	bl	8002788 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d902      	bls.n	8005312 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	73fb      	strb	r3, [r7, #15]
        break;
 8005310:	e005      	b.n	800531e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005312:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1ef      	bne.n	80052fe <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d168      	bne.n	80053f6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d113      	bne.n	8005352 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800532a:	4b35      	ldr	r3, [pc, #212]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	4b35      	ldr	r3, [pc, #212]	; (8005404 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	0211      	lsls	r1, r2, #8
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68d2      	ldr	r2, [r2, #12]
 800533c:	06d2      	lsls	r2, r2, #27
 800533e:	4311      	orrs	r1, r2
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6852      	ldr	r2, [r2, #4]
 8005344:	3a01      	subs	r2, #1
 8005346:	0112      	lsls	r2, r2, #4
 8005348:	430a      	orrs	r2, r1
 800534a:	492d      	ldr	r1, [pc, #180]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	614b      	str	r3, [r1, #20]
 8005350:	e02d      	b.n	80053ae <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d115      	bne.n	8005384 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005358:	4b29      	ldr	r3, [pc, #164]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	4b2a      	ldr	r3, [pc, #168]	; (8005408 <RCCEx_PLLSAI2_Config+0x1d8>)
 800535e:	4013      	ands	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6892      	ldr	r2, [r2, #8]
 8005364:	0211      	lsls	r1, r2, #8
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6912      	ldr	r2, [r2, #16]
 800536a:	0852      	lsrs	r2, r2, #1
 800536c:	3a01      	subs	r2, #1
 800536e:	0552      	lsls	r2, r2, #21
 8005370:	4311      	orrs	r1, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6852      	ldr	r2, [r2, #4]
 8005376:	3a01      	subs	r2, #1
 8005378:	0112      	lsls	r2, r2, #4
 800537a:	430a      	orrs	r2, r1
 800537c:	4920      	ldr	r1, [pc, #128]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 800537e:	4313      	orrs	r3, r2
 8005380:	614b      	str	r3, [r1, #20]
 8005382:	e014      	b.n	80053ae <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005384:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	4b20      	ldr	r3, [pc, #128]	; (800540c <RCCEx_PLLSAI2_Config+0x1dc>)
 800538a:	4013      	ands	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6892      	ldr	r2, [r2, #8]
 8005390:	0211      	lsls	r1, r2, #8
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6952      	ldr	r2, [r2, #20]
 8005396:	0852      	lsrs	r2, r2, #1
 8005398:	3a01      	subs	r2, #1
 800539a:	0652      	lsls	r2, r2, #25
 800539c:	4311      	orrs	r1, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6852      	ldr	r2, [r2, #4]
 80053a2:	3a01      	subs	r2, #1
 80053a4:	0112      	lsls	r2, r2, #4
 80053a6:	430a      	orrs	r2, r1
 80053a8:	4915      	ldr	r1, [pc, #84]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ba:	f7fd f9e5 	bl	8002788 <HAL_GetTick>
 80053be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053c0:	e009      	b.n	80053d6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053c2:	f7fd f9e1 	bl	8002788 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d902      	bls.n	80053d6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	73fb      	strb	r3, [r7, #15]
          break;
 80053d4:	e005      	b.n	80053e2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ef      	beq.n	80053c2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	4903      	ldr	r1, [pc, #12]	; (8005400 <RCCEx_PLLSAI2_Config+0x1d0>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40021000 	.word	0x40021000
 8005404:	07ff800f 	.word	0x07ff800f
 8005408:	ff9f800f 	.word	0xff9f800f
 800540c:	f9ff800f 	.word	0xf9ff800f

08005410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e049      	b.n	80054b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f841 	bl	80054be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 f9f8 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d001      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e04f      	b.n	800558c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a23      	ldr	r2, [pc, #140]	; (8005598 <HAL_TIM_Base_Start_IT+0xc4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01d      	beq.n	800554a <HAL_TIM_Base_Start_IT+0x76>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d018      	beq.n	800554a <HAL_TIM_Base_Start_IT+0x76>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <HAL_TIM_Base_Start_IT+0xc8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_TIM_Base_Start_IT+0x76>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_TIM_Base_Start_IT+0x76>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIM_Base_Start_IT+0x76>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIM_Base_Start_IT+0x76>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a19      	ldr	r2, [pc, #100]	; (80055ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d115      	bne.n	8005576 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005552:	4013      	ands	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b06      	cmp	r3, #6
 800555a:	d015      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0xb4>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005562:	d011      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	e008      	b.n	8005588 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e000      	b.n	800558a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005588:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40013400 	.word	0x40013400
 80055ac:	40014000 	.word	0x40014000
 80055b0:	00010007 	.word	0x00010007

080055b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0202 	mvn.w	r2, #2
 80055e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f905 	bl	8005806 <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8f7 	bl	80057f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f908 	bl	800581a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b04      	cmp	r3, #4
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0204 	mvn.w	r2, #4
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8db 	bl	8005806 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8cd 	bl	80057f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8de 	bl	800581a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b08      	cmp	r3, #8
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b08      	cmp	r3, #8
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0208 	mvn.w	r2, #8
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2204      	movs	r2, #4
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8b1 	bl	8005806 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8a3 	bl	80057f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8b4 	bl	800581a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0210 	mvn.w	r2, #16
 80056dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2208      	movs	r2, #8
 80056e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f887 	bl	8005806 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f879 	bl	80057f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f88a 	bl	800581a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b01      	cmp	r3, #1
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0201 	mvn.w	r2, #1
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc fb64 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d107      	bne.n	8005764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f914 	bl	800598c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005772:	d10e      	bne.n	8005792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d107      	bne.n	8005792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f907 	bl	80059a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d10e      	bne.n	80057be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d107      	bne.n	80057be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f838 	bl	800582e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d10e      	bne.n	80057ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d107      	bne.n	80057ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f06f 0220 	mvn.w	r2, #32
 80057e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8c7 	bl	8005978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a40      	ldr	r2, [pc, #256]	; (8005958 <TIM_Base_SetConfig+0x114>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d00f      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a3d      	ldr	r2, [pc, #244]	; (800595c <TIM_Base_SetConfig+0x118>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00b      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3c      	ldr	r2, [pc, #240]	; (8005960 <TIM_Base_SetConfig+0x11c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a3b      	ldr	r2, [pc, #236]	; (8005964 <TIM_Base_SetConfig+0x120>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a3a      	ldr	r2, [pc, #232]	; (8005968 <TIM_Base_SetConfig+0x124>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2f      	ldr	r2, [pc, #188]	; (8005958 <TIM_Base_SetConfig+0x114>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01f      	beq.n	80058de <TIM_Base_SetConfig+0x9a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a4:	d01b      	beq.n	80058de <TIM_Base_SetConfig+0x9a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2c      	ldr	r2, [pc, #176]	; (800595c <TIM_Base_SetConfig+0x118>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d017      	beq.n	80058de <TIM_Base_SetConfig+0x9a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2b      	ldr	r2, [pc, #172]	; (8005960 <TIM_Base_SetConfig+0x11c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d013      	beq.n	80058de <TIM_Base_SetConfig+0x9a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2a      	ldr	r2, [pc, #168]	; (8005964 <TIM_Base_SetConfig+0x120>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00f      	beq.n	80058de <TIM_Base_SetConfig+0x9a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a29      	ldr	r2, [pc, #164]	; (8005968 <TIM_Base_SetConfig+0x124>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00b      	beq.n	80058de <TIM_Base_SetConfig+0x9a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a28      	ldr	r2, [pc, #160]	; (800596c <TIM_Base_SetConfig+0x128>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d007      	beq.n	80058de <TIM_Base_SetConfig+0x9a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a27      	ldr	r2, [pc, #156]	; (8005970 <TIM_Base_SetConfig+0x12c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d003      	beq.n	80058de <TIM_Base_SetConfig+0x9a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a26      	ldr	r2, [pc, #152]	; (8005974 <TIM_Base_SetConfig+0x130>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d108      	bne.n	80058f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a10      	ldr	r2, [pc, #64]	; (8005958 <TIM_Base_SetConfig+0x114>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00f      	beq.n	800593c <TIM_Base_SetConfig+0xf8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a12      	ldr	r2, [pc, #72]	; (8005968 <TIM_Base_SetConfig+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0xf8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a11      	ldr	r2, [pc, #68]	; (800596c <TIM_Base_SetConfig+0x128>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0xf8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a10      	ldr	r2, [pc, #64]	; (8005970 <TIM_Base_SetConfig+0x12c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0xf8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a0f      	ldr	r2, [pc, #60]	; (8005974 <TIM_Base_SetConfig+0x130>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d103      	bne.n	8005944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	691a      	ldr	r2, [r3, #16]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	615a      	str	r2, [r3, #20]
}
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40012c00 	.word	0x40012c00
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40013400 	.word	0x40013400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e042      	b.n	8005a4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d106      	bne.n	80059de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fc fd3b 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2224      	movs	r2, #36	; 0x24
 80059e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8c4 	bl	8005b84 <UART_SetConfig>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e022      	b.n	8005a4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb8a 	bl	8006128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fc11 	bl	800626c <UART_CheckIdleState>
 8005a4a:	4603      	mov	r3, r0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	; 0x28
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	f040 8084 	bne.w	8005b78 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_UART_Transmit+0x28>
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e07c      	b.n	8005b7a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Transmit+0x3a>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e075      	b.n	8005b7a <HAL_UART_Transmit+0x126>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2221      	movs	r2, #33	; 0x21
 8005aa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fc fe6f 	bl	8002788 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	88fa      	ldrh	r2, [r7, #6]
 8005ab0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac4:	d108      	bne.n	8005ad8 <HAL_UART_Transmit+0x84>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	e003      	b.n	8005ae0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005ae8:	e02d      	b.n	8005b46 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2200      	movs	r2, #0
 8005af2:	2180      	movs	r1, #128	; 0x80
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fc01 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e03a      	b.n	8005b7a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10b      	bne.n	8005b22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	881a      	ldrh	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b16:	b292      	uxth	r2, r2
 8005b18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	3302      	adds	r3, #2
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	e008      	b.n	8005b34 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	781a      	ldrb	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3301      	adds	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1cb      	bne.n	8005aea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2140      	movs	r1, #64	; 0x40
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fbcd 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e006      	b.n	8005b7a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e000      	b.n	8005b7a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005b78:	2302      	movs	r3, #2
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b84:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005b88:	b088      	sub	sp, #32
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4bb1      	ldr	r3, [pc, #708]	; (8005e80 <UART_SetConfig+0x2fc>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	69f9      	ldr	r1, [r7, #28]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4aa6      	ldr	r2, [pc, #664]	; (8005e84 <UART_SetConfig+0x300>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	69f9      	ldr	r1, [r7, #28]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	f023 010f 	bic.w	r1, r3, #15
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a97      	ldr	r2, [pc, #604]	; (8005e88 <UART_SetConfig+0x304>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d121      	bne.n	8005c74 <UART_SetConfig+0xf0>
 8005c30:	4b96      	ldr	r3, [pc, #600]	; (8005e8c <UART_SetConfig+0x308>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d816      	bhi.n	8005c6c <UART_SetConfig+0xe8>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0xc0>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c55 	.word	0x08005c55
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c5b 	.word	0x08005c5b
 8005c50:	08005c67 	.word	0x08005c67
 8005c54:	2301      	movs	r3, #1
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e0e8      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	76fb      	strb	r3, [r7, #27]
 8005c5e:	e0e5      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005c60:	2304      	movs	r3, #4
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e0e2      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005c66:	2308      	movs	r3, #8
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e0df      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	bf00      	nop
 8005c72:	e0db      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a85      	ldr	r2, [pc, #532]	; (8005e90 <UART_SetConfig+0x30c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d134      	bne.n	8005ce8 <UART_SetConfig+0x164>
 8005c7e:	4b83      	ldr	r3, [pc, #524]	; (8005e8c <UART_SetConfig+0x308>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	d829      	bhi.n	8005ce0 <UART_SetConfig+0x15c>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x110>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cc9 	.word	0x08005cc9
 8005c98:	08005ce1 	.word	0x08005ce1
 8005c9c:	08005ce1 	.word	0x08005ce1
 8005ca0:	08005ce1 	.word	0x08005ce1
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005ce1 	.word	0x08005ce1
 8005cac:	08005ce1 	.word	0x08005ce1
 8005cb0:	08005ce1 	.word	0x08005ce1
 8005cb4:	08005ccf 	.word	0x08005ccf
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce1 	.word	0x08005ce1
 8005cc0:	08005ce1 	.word	0x08005ce1
 8005cc4:	08005cdb 	.word	0x08005cdb
 8005cc8:	2300      	movs	r3, #0
 8005cca:	76fb      	strb	r3, [r7, #27]
 8005ccc:	e0ae      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	76fb      	strb	r3, [r7, #27]
 8005cd2:	e0ab      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	76fb      	strb	r3, [r7, #27]
 8005cd8:	e0a8      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005cda:	2308      	movs	r3, #8
 8005cdc:	76fb      	strb	r3, [r7, #27]
 8005cde:	e0a5      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	76fb      	strb	r3, [r7, #27]
 8005ce4:	bf00      	nop
 8005ce6:	e0a1      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a69      	ldr	r2, [pc, #420]	; (8005e94 <UART_SetConfig+0x310>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d120      	bne.n	8005d34 <UART_SetConfig+0x1b0>
 8005cf2:	4b66      	ldr	r3, [pc, #408]	; (8005e8c <UART_SetConfig+0x308>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d00f      	beq.n	8005d20 <UART_SetConfig+0x19c>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d802      	bhi.n	8005d0a <UART_SetConfig+0x186>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <UART_SetConfig+0x190>
 8005d08:	e010      	b.n	8005d2c <UART_SetConfig+0x1a8>
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d005      	beq.n	8005d1a <UART_SetConfig+0x196>
 8005d0e:	2b30      	cmp	r3, #48	; 0x30
 8005d10:	d009      	beq.n	8005d26 <UART_SetConfig+0x1a2>
 8005d12:	e00b      	b.n	8005d2c <UART_SetConfig+0x1a8>
 8005d14:	2300      	movs	r3, #0
 8005d16:	76fb      	strb	r3, [r7, #27]
 8005d18:	e088      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	76fb      	strb	r3, [r7, #27]
 8005d1e:	e085      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d20:	2304      	movs	r3, #4
 8005d22:	76fb      	strb	r3, [r7, #27]
 8005d24:	e082      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d26:	2308      	movs	r3, #8
 8005d28:	76fb      	strb	r3, [r7, #27]
 8005d2a:	e07f      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	76fb      	strb	r3, [r7, #27]
 8005d30:	bf00      	nop
 8005d32:	e07b      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a57      	ldr	r2, [pc, #348]	; (8005e98 <UART_SetConfig+0x314>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d120      	bne.n	8005d80 <UART_SetConfig+0x1fc>
 8005d3e:	4b53      	ldr	r3, [pc, #332]	; (8005e8c <UART_SetConfig+0x308>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d00f      	beq.n	8005d6c <UART_SetConfig+0x1e8>
 8005d4c:	2b40      	cmp	r3, #64	; 0x40
 8005d4e:	d802      	bhi.n	8005d56 <UART_SetConfig+0x1d2>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <UART_SetConfig+0x1dc>
 8005d54:	e010      	b.n	8005d78 <UART_SetConfig+0x1f4>
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d005      	beq.n	8005d66 <UART_SetConfig+0x1e2>
 8005d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d5c:	d009      	beq.n	8005d72 <UART_SetConfig+0x1ee>
 8005d5e:	e00b      	b.n	8005d78 <UART_SetConfig+0x1f4>
 8005d60:	2300      	movs	r3, #0
 8005d62:	76fb      	strb	r3, [r7, #27]
 8005d64:	e062      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d66:	2302      	movs	r3, #2
 8005d68:	76fb      	strb	r3, [r7, #27]
 8005d6a:	e05f      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	76fb      	strb	r3, [r7, #27]
 8005d70:	e05c      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d72:	2308      	movs	r3, #8
 8005d74:	76fb      	strb	r3, [r7, #27]
 8005d76:	e059      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	76fb      	strb	r3, [r7, #27]
 8005d7c:	bf00      	nop
 8005d7e:	e055      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a45      	ldr	r2, [pc, #276]	; (8005e9c <UART_SetConfig+0x318>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d124      	bne.n	8005dd4 <UART_SetConfig+0x250>
 8005d8a:	4b40      	ldr	r3, [pc, #256]	; (8005e8c <UART_SetConfig+0x308>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d98:	d012      	beq.n	8005dc0 <UART_SetConfig+0x23c>
 8005d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9e:	d802      	bhi.n	8005da6 <UART_SetConfig+0x222>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <UART_SetConfig+0x230>
 8005da4:	e012      	b.n	8005dcc <UART_SetConfig+0x248>
 8005da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005daa:	d006      	beq.n	8005dba <UART_SetConfig+0x236>
 8005dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db0:	d009      	beq.n	8005dc6 <UART_SetConfig+0x242>
 8005db2:	e00b      	b.n	8005dcc <UART_SetConfig+0x248>
 8005db4:	2300      	movs	r3, #0
 8005db6:	76fb      	strb	r3, [r7, #27]
 8005db8:	e038      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	76fb      	strb	r3, [r7, #27]
 8005dbe:	e035      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	76fb      	strb	r3, [r7, #27]
 8005dc4:	e032      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	76fb      	strb	r3, [r7, #27]
 8005dca:	e02f      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	76fb      	strb	r3, [r7, #27]
 8005dd0:	bf00      	nop
 8005dd2:	e02b      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2a      	ldr	r2, [pc, #168]	; (8005e84 <UART_SetConfig+0x300>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d124      	bne.n	8005e28 <UART_SetConfig+0x2a4>
 8005dde:	4b2b      	ldr	r3, [pc, #172]	; (8005e8c <UART_SetConfig+0x308>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dec:	d012      	beq.n	8005e14 <UART_SetConfig+0x290>
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df2:	d802      	bhi.n	8005dfa <UART_SetConfig+0x276>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <UART_SetConfig+0x284>
 8005df8:	e012      	b.n	8005e20 <UART_SetConfig+0x29c>
 8005dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfe:	d006      	beq.n	8005e0e <UART_SetConfig+0x28a>
 8005e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e04:	d009      	beq.n	8005e1a <UART_SetConfig+0x296>
 8005e06:	e00b      	b.n	8005e20 <UART_SetConfig+0x29c>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	76fb      	strb	r3, [r7, #27]
 8005e0c:	e00e      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	76fb      	strb	r3, [r7, #27]
 8005e12:	e00b      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005e14:	2304      	movs	r3, #4
 8005e16:	76fb      	strb	r3, [r7, #27]
 8005e18:	e008      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	76fb      	strb	r3, [r7, #27]
 8005e1e:	e005      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005e20:	2310      	movs	r3, #16
 8005e22:	76fb      	strb	r3, [r7, #27]
 8005e24:	bf00      	nop
 8005e26:	e001      	b.n	8005e2c <UART_SetConfig+0x2a8>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <UART_SetConfig+0x300>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	f040 80a1 	bne.w	8005f7a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e38:	7efb      	ldrb	r3, [r7, #27]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d836      	bhi.n	8005eac <UART_SetConfig+0x328>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x2c0>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005ead 	.word	0x08005ead
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005e77 	.word	0x08005e77
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005ea5 	.word	0x08005ea5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fcaa 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	6178      	str	r0, [r7, #20]
        break;
 8005e6e:	e022      	b.n	8005eb6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <UART_SetConfig+0x31c>)
 8005e72:	617b      	str	r3, [r7, #20]
        break;
 8005e74:	e01f      	b.n	8005eb6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fe fc0d 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8005e7a:	6178      	str	r0, [r7, #20]
        break;
 8005e7c:	e01b      	b.n	8005eb6 <UART_SetConfig+0x332>
 8005e7e:	bf00      	nop
 8005e80:	cfff69f3 	.word	0xcfff69f3
 8005e84:	40008000 	.word	0x40008000
 8005e88:	40013800 	.word	0x40013800
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	40004400 	.word	0x40004400
 8005e94:	40004800 	.word	0x40004800
 8005e98:	40004c00 	.word	0x40004c00
 8005e9c:	40005000 	.word	0x40005000
 8005ea0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea8:	617b      	str	r3, [r7, #20]
        break;
 8005eaa:	e004      	b.n	8005eb6 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	76bb      	strb	r3, [r7, #26]
        break;
 8005eb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 811d 	beq.w	80060f8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	4a97      	ldr	r2, [pc, #604]	; (8006120 <UART_SetConfig+0x59c>)
 8005ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4413      	add	r3, r2
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d305      	bcc.n	8005eee <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d902      	bls.n	8005ef4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	76bb      	strb	r3, [r7, #26]
 8005ef2:	e101      	b.n	80060f8 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f04f 0100 	mov.w	r1, #0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	4a87      	ldr	r2, [pc, #540]	; (8006120 <UART_SetConfig+0x59c>)
 8005f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f04f 0400 	mov.w	r4, #0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4623      	mov	r3, r4
 8005f10:	f7fa fed2 	bl	8000cb8 <__aeabi_uldivmod>
 8005f14:	4603      	mov	r3, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	f04f 0400 	mov.w	r4, #0
 8005f24:	0214      	lsls	r4, r2, #8
 8005f26:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f2a:	020b      	lsls	r3, r1, #8
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6852      	ldr	r2, [r2, #4]
 8005f30:	0852      	lsrs	r2, r2, #1
 8005f32:	4611      	mov	r1, r2
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	eb13 0b01 	adds.w	fp, r3, r1
 8005f3c:	eb44 0c02 	adc.w	ip, r4, r2
 8005f40:	4658      	mov	r0, fp
 8005f42:	4661      	mov	r1, ip
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f04f 0400 	mov.w	r4, #0
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	f7fa feb2 	bl	8000cb8 <__aeabi_uldivmod>
 8005f54:	4603      	mov	r3, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f60:	d308      	bcc.n	8005f74 <UART_SetConfig+0x3f0>
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f68:	d204      	bcs.n	8005f74 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	e0c1      	b.n	80060f8 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	76bb      	strb	r3, [r7, #26]
 8005f78:	e0be      	b.n	80060f8 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f82:	d164      	bne.n	800604e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8005f84:	7efb      	ldrb	r3, [r7, #27]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d827      	bhi.n	8005fda <UART_SetConfig+0x456>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <UART_SetConfig+0x40c>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fb5 	.word	0x08005fb5
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fc5 	.word	0x08005fc5
 8005f9c:	08005fdb 	.word	0x08005fdb
 8005fa0:	08005fcb 	.word	0x08005fcb
 8005fa4:	08005fdb 	.word	0x08005fdb
 8005fa8:	08005fdb 	.word	0x08005fdb
 8005fac:	08005fdb 	.word	0x08005fdb
 8005fb0:	08005fd3 	.word	0x08005fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb4:	f7fe fc04 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8005fb8:	6178      	str	r0, [r7, #20]
        break;
 8005fba:	e013      	b.n	8005fe4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fbc:	f7fe fc16 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 8005fc0:	6178      	str	r0, [r7, #20]
        break;
 8005fc2:	e00f      	b.n	8005fe4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc4:	4b57      	ldr	r3, [pc, #348]	; (8006124 <UART_SetConfig+0x5a0>)
 8005fc6:	617b      	str	r3, [r7, #20]
        break;
 8005fc8:	e00c      	b.n	8005fe4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fca:	f7fe fb63 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8005fce:	6178      	str	r0, [r7, #20]
        break;
 8005fd0:	e008      	b.n	8005fe4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd6:	617b      	str	r3, [r7, #20]
        break;
 8005fd8:	e004      	b.n	8005fe4 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	76bb      	strb	r3, [r7, #26]
        break;
 8005fe2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8086 	beq.w	80060f8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	4a4b      	ldr	r2, [pc, #300]	; (8006120 <UART_SetConfig+0x59c>)
 8005ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ffe:	005a      	lsls	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	b29b      	uxth	r3, r3
 8006012:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b0f      	cmp	r3, #15
 8006018:	d916      	bls.n	8006048 <UART_SetConfig+0x4c4>
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006020:	d212      	bcs.n	8006048 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f023 030f 	bic.w	r3, r3, #15
 800602a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	b29b      	uxth	r3, r3
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	b29a      	uxth	r2, r3
 8006038:	89fb      	ldrh	r3, [r7, #14]
 800603a:	4313      	orrs	r3, r2
 800603c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	89fa      	ldrh	r2, [r7, #14]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	e057      	b.n	80060f8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	76bb      	strb	r3, [r7, #26]
 800604c:	e054      	b.n	80060f8 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800604e:	7efb      	ldrb	r3, [r7, #27]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d828      	bhi.n	80060a6 <UART_SetConfig+0x522>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x4d8>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006081 	.word	0x08006081
 8006060:	08006089 	.word	0x08006089
 8006064:	08006091 	.word	0x08006091
 8006068:	080060a7 	.word	0x080060a7
 800606c:	08006097 	.word	0x08006097
 8006070:	080060a7 	.word	0x080060a7
 8006074:	080060a7 	.word	0x080060a7
 8006078:	080060a7 	.word	0x080060a7
 800607c:	0800609f 	.word	0x0800609f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006080:	f7fe fb9e 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8006084:	6178      	str	r0, [r7, #20]
        break;
 8006086:	e013      	b.n	80060b0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006088:	f7fe fbb0 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 800608c:	6178      	str	r0, [r7, #20]
        break;
 800608e:	e00f      	b.n	80060b0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006090:	4b24      	ldr	r3, [pc, #144]	; (8006124 <UART_SetConfig+0x5a0>)
 8006092:	617b      	str	r3, [r7, #20]
        break;
 8006094:	e00c      	b.n	80060b0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006096:	f7fe fafd 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 800609a:	6178      	str	r0, [r7, #20]
        break;
 800609c:	e008      	b.n	80060b0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a2:	617b      	str	r3, [r7, #20]
        break;
 80060a4:	e004      	b.n	80060b0 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	76bb      	strb	r3, [r7, #26]
        break;
 80060ae:	bf00      	nop
    }

    if (pclk != 0U)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d020      	beq.n	80060f8 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	4a19      	ldr	r2, [pc, #100]	; (8006120 <UART_SetConfig+0x59c>)
 80060bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c0:	461a      	mov	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	085b      	lsrs	r3, r3, #1
 80060ce:	441a      	add	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d8:	b29b      	uxth	r3, r3
 80060da:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b0f      	cmp	r3, #15
 80060e0:	d908      	bls.n	80060f4 <UART_SetConfig+0x570>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e8:	d204      	bcs.n	80060f4 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	e001      	b.n	80060f8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006114:	7ebb      	ldrb	r3, [r7, #26]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006120:	0800a19c 	.word	0x0800a19c
 8006124:	00f42400 	.word	0x00f42400

08006128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01a      	beq.n	800623e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006226:	d10a      	bne.n	800623e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af02      	add	r7, sp, #8
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800627c:	f7fc fa84 	bl	8002788 <HAL_GetTick>
 8006280:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b08      	cmp	r3, #8
 800628e:	d10e      	bne.n	80062ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f82c 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e022      	b.n	80062f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d10e      	bne.n	80062da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f816 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e00c      	b.n	80062f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	4613      	mov	r3, r2
 800630a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630c:	e062      	b.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d05e      	beq.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006316:	f7fc fa37 	bl	8002788 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <UART_WaitOnFlagUntilTimeout+0x30>
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d11d      	bne.n	8006368 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800633a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e045      	b.n	80063f4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d02e      	beq.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006384:	d126      	bne.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800638e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800639e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e00f      	b.n	80063f4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4013      	ands	r3, r2
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d08d      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_UARTEx_DisableFifoMode+0x16>
 800640e:	2302      	movs	r3, #2
 8006410:	e027      	b.n	8006462 <HAL_UARTEx_DisableFifoMode+0x66>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2224      	movs	r2, #36	; 0x24
 800641e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006440:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006482:	2302      	movs	r3, #2
 8006484:	e02d      	b.n	80064e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	; 0x24
 8006492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f850 	bl	8006568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064fe:	2302      	movs	r3, #2
 8006500:	e02d      	b.n	800655e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2224      	movs	r2, #36	; 0x24
 800650e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f812 	bl	8006568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	; 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006570:	4a2f      	ldr	r2, [pc, #188]	; (8006630 <UARTEx_SetNbDataToProcess+0xc8>)
 8006572:	f107 0314 	add.w	r3, r7, #20
 8006576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800657a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800657e:	4a2d      	ldr	r2, [pc, #180]	; (8006634 <UARTEx_SetNbDataToProcess+0xcc>)
 8006580:	f107 030c 	add.w	r3, r7, #12
 8006584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006588:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006590:	2b00      	cmp	r3, #0
 8006592:	d108      	bne.n	80065a6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065a4:	e03d      	b.n	8006622 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065a6:	2308      	movs	r3, #8
 80065a8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065aa:	2308      	movs	r3, #8
 80065ac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	0e5b      	lsrs	r3, r3, #25
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	0f5b      	lsrs	r3, r3, #29
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80065ce:	7fbb      	ldrb	r3, [r7, #30]
 80065d0:	7f3a      	ldrb	r2, [r7, #28]
 80065d2:	f107 0120 	add.w	r1, r7, #32
 80065d6:	440a      	add	r2, r1
 80065d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	7f3a      	ldrb	r2, [r7, #28]
 80065e2:	f107 0120 	add.w	r1, r7, #32
 80065e6:	440a      	add	r2, r1
 80065e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80065ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80065f8:	7ffb      	ldrb	r3, [r7, #31]
 80065fa:	7f7a      	ldrb	r2, [r7, #29]
 80065fc:	f107 0120 	add.w	r1, r7, #32
 8006600:	440a      	add	r2, r1
 8006602:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006606:	fb02 f303 	mul.w	r3, r2, r3
 800660a:	7f7a      	ldrb	r2, [r7, #29]
 800660c:	f107 0120 	add.w	r1, r7, #32
 8006610:	440a      	add	r2, r1
 8006612:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006616:	fb93 f3f2 	sdiv	r3, r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006622:	bf00      	nop
 8006624:	3724      	adds	r7, #36	; 0x24
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	0800a144 	.word	0x0800a144
 8006634:	0800a14c 	.word	0x0800a14c

08006638 <__errno>:
 8006638:	4b01      	ldr	r3, [pc, #4]	; (8006640 <__errno+0x8>)
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	200000d0 	.word	0x200000d0

08006644 <__libc_init_array>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	4e0d      	ldr	r6, [pc, #52]	; (800667c <__libc_init_array+0x38>)
 8006648:	4c0d      	ldr	r4, [pc, #52]	; (8006680 <__libc_init_array+0x3c>)
 800664a:	1ba4      	subs	r4, r4, r6
 800664c:	10a4      	asrs	r4, r4, #2
 800664e:	2500      	movs	r5, #0
 8006650:	42a5      	cmp	r5, r4
 8006652:	d109      	bne.n	8006668 <__libc_init_array+0x24>
 8006654:	4e0b      	ldr	r6, [pc, #44]	; (8006684 <__libc_init_array+0x40>)
 8006656:	4c0c      	ldr	r4, [pc, #48]	; (8006688 <__libc_init_array+0x44>)
 8006658:	f003 fd5a 	bl	800a110 <_init>
 800665c:	1ba4      	subs	r4, r4, r6
 800665e:	10a4      	asrs	r4, r4, #2
 8006660:	2500      	movs	r5, #0
 8006662:	42a5      	cmp	r5, r4
 8006664:	d105      	bne.n	8006672 <__libc_init_array+0x2e>
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800666c:	4798      	blx	r3
 800666e:	3501      	adds	r5, #1
 8006670:	e7ee      	b.n	8006650 <__libc_init_array+0xc>
 8006672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006676:	4798      	blx	r3
 8006678:	3501      	adds	r5, #1
 800667a:	e7f2      	b.n	8006662 <__libc_init_array+0x1e>
 800667c:	0800a470 	.word	0x0800a470
 8006680:	0800a470 	.word	0x0800a470
 8006684:	0800a470 	.word	0x0800a470
 8006688:	0800a474 	.word	0x0800a474

0800668c <memcpy>:
 800668c:	b510      	push	{r4, lr}
 800668e:	1e43      	subs	r3, r0, #1
 8006690:	440a      	add	r2, r1
 8006692:	4291      	cmp	r1, r2
 8006694:	d100      	bne.n	8006698 <memcpy+0xc>
 8006696:	bd10      	pop	{r4, pc}
 8006698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a0:	e7f7      	b.n	8006692 <memcpy+0x6>

080066a2 <memset>:
 80066a2:	4402      	add	r2, r0
 80066a4:	4603      	mov	r3, r0
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d100      	bne.n	80066ac <memset+0xa>
 80066aa:	4770      	bx	lr
 80066ac:	f803 1b01 	strb.w	r1, [r3], #1
 80066b0:	e7f9      	b.n	80066a6 <memset+0x4>

080066b2 <__cvt>:
 80066b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b6:	ec55 4b10 	vmov	r4, r5, d0
 80066ba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80066bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	460e      	mov	r6, r1
 80066c4:	4691      	mov	r9, r2
 80066c6:	4619      	mov	r1, r3
 80066c8:	bfb8      	it	lt
 80066ca:	4622      	movlt	r2, r4
 80066cc:	462b      	mov	r3, r5
 80066ce:	f027 0720 	bic.w	r7, r7, #32
 80066d2:	bfbb      	ittet	lt
 80066d4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066d8:	461d      	movlt	r5, r3
 80066da:	2300      	movge	r3, #0
 80066dc:	232d      	movlt	r3, #45	; 0x2d
 80066de:	bfb8      	it	lt
 80066e0:	4614      	movlt	r4, r2
 80066e2:	2f46      	cmp	r7, #70	; 0x46
 80066e4:	700b      	strb	r3, [r1, #0]
 80066e6:	d004      	beq.n	80066f2 <__cvt+0x40>
 80066e8:	2f45      	cmp	r7, #69	; 0x45
 80066ea:	d100      	bne.n	80066ee <__cvt+0x3c>
 80066ec:	3601      	adds	r6, #1
 80066ee:	2102      	movs	r1, #2
 80066f0:	e000      	b.n	80066f4 <__cvt+0x42>
 80066f2:	2103      	movs	r1, #3
 80066f4:	ab03      	add	r3, sp, #12
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	ab02      	add	r3, sp, #8
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	4632      	mov	r2, r6
 80066fe:	4653      	mov	r3, sl
 8006700:	ec45 4b10 	vmov	d0, r4, r5
 8006704:	f001 fd78 	bl	80081f8 <_dtoa_r>
 8006708:	2f47      	cmp	r7, #71	; 0x47
 800670a:	4680      	mov	r8, r0
 800670c:	d102      	bne.n	8006714 <__cvt+0x62>
 800670e:	f019 0f01 	tst.w	r9, #1
 8006712:	d026      	beq.n	8006762 <__cvt+0xb0>
 8006714:	2f46      	cmp	r7, #70	; 0x46
 8006716:	eb08 0906 	add.w	r9, r8, r6
 800671a:	d111      	bne.n	8006740 <__cvt+0x8e>
 800671c:	f898 3000 	ldrb.w	r3, [r8]
 8006720:	2b30      	cmp	r3, #48	; 0x30
 8006722:	d10a      	bne.n	800673a <__cvt+0x88>
 8006724:	2200      	movs	r2, #0
 8006726:	2300      	movs	r3, #0
 8006728:	4620      	mov	r0, r4
 800672a:	4629      	mov	r1, r5
 800672c:	f7fa f9e4 	bl	8000af8 <__aeabi_dcmpeq>
 8006730:	b918      	cbnz	r0, 800673a <__cvt+0x88>
 8006732:	f1c6 0601 	rsb	r6, r6, #1
 8006736:	f8ca 6000 	str.w	r6, [sl]
 800673a:	f8da 3000 	ldr.w	r3, [sl]
 800673e:	4499      	add	r9, r3
 8006740:	2200      	movs	r2, #0
 8006742:	2300      	movs	r3, #0
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7fa f9d6 	bl	8000af8 <__aeabi_dcmpeq>
 800674c:	b938      	cbnz	r0, 800675e <__cvt+0xac>
 800674e:	2230      	movs	r2, #48	; 0x30
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	454b      	cmp	r3, r9
 8006754:	d205      	bcs.n	8006762 <__cvt+0xb0>
 8006756:	1c59      	adds	r1, r3, #1
 8006758:	9103      	str	r1, [sp, #12]
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	e7f8      	b.n	8006750 <__cvt+0x9e>
 800675e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006766:	eba3 0308 	sub.w	r3, r3, r8
 800676a:	4640      	mov	r0, r8
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	b004      	add	sp, #16
 8006770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006774 <__exponent>:
 8006774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006776:	2900      	cmp	r1, #0
 8006778:	4604      	mov	r4, r0
 800677a:	bfba      	itte	lt
 800677c:	4249      	neglt	r1, r1
 800677e:	232d      	movlt	r3, #45	; 0x2d
 8006780:	232b      	movge	r3, #43	; 0x2b
 8006782:	2909      	cmp	r1, #9
 8006784:	f804 2b02 	strb.w	r2, [r4], #2
 8006788:	7043      	strb	r3, [r0, #1]
 800678a:	dd20      	ble.n	80067ce <__exponent+0x5a>
 800678c:	f10d 0307 	add.w	r3, sp, #7
 8006790:	461f      	mov	r7, r3
 8006792:	260a      	movs	r6, #10
 8006794:	fb91 f5f6 	sdiv	r5, r1, r6
 8006798:	fb06 1115 	mls	r1, r6, r5, r1
 800679c:	3130      	adds	r1, #48	; 0x30
 800679e:	2d09      	cmp	r5, #9
 80067a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067a4:	f103 32ff 	add.w	r2, r3, #4294967295
 80067a8:	4629      	mov	r1, r5
 80067aa:	dc09      	bgt.n	80067c0 <__exponent+0x4c>
 80067ac:	3130      	adds	r1, #48	; 0x30
 80067ae:	3b02      	subs	r3, #2
 80067b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80067b4:	42bb      	cmp	r3, r7
 80067b6:	4622      	mov	r2, r4
 80067b8:	d304      	bcc.n	80067c4 <__exponent+0x50>
 80067ba:	1a10      	subs	r0, r2, r0
 80067bc:	b003      	add	sp, #12
 80067be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c0:	4613      	mov	r3, r2
 80067c2:	e7e7      	b.n	8006794 <__exponent+0x20>
 80067c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c8:	f804 2b01 	strb.w	r2, [r4], #1
 80067cc:	e7f2      	b.n	80067b4 <__exponent+0x40>
 80067ce:	2330      	movs	r3, #48	; 0x30
 80067d0:	4419      	add	r1, r3
 80067d2:	7083      	strb	r3, [r0, #2]
 80067d4:	1d02      	adds	r2, r0, #4
 80067d6:	70c1      	strb	r1, [r0, #3]
 80067d8:	e7ef      	b.n	80067ba <__exponent+0x46>
	...

080067dc <_printf_float>:
 80067dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e0:	b08d      	sub	sp, #52	; 0x34
 80067e2:	460c      	mov	r4, r1
 80067e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80067e8:	4616      	mov	r6, r2
 80067ea:	461f      	mov	r7, r3
 80067ec:	4605      	mov	r5, r0
 80067ee:	f002 fde7 	bl	80093c0 <_localeconv_r>
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	9304      	str	r3, [sp, #16]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7f9 fd02 	bl	8000200 <strlen>
 80067fc:	2300      	movs	r3, #0
 80067fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006800:	f8d8 3000 	ldr.w	r3, [r8]
 8006804:	9005      	str	r0, [sp, #20]
 8006806:	3307      	adds	r3, #7
 8006808:	f023 0307 	bic.w	r3, r3, #7
 800680c:	f103 0208 	add.w	r2, r3, #8
 8006810:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006814:	f8d4 b000 	ldr.w	fp, [r4]
 8006818:	f8c8 2000 	str.w	r2, [r8]
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006824:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006828:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800682c:	9307      	str	r3, [sp, #28]
 800682e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006832:	f04f 32ff 	mov.w	r2, #4294967295
 8006836:	4ba7      	ldr	r3, [pc, #668]	; (8006ad4 <_printf_float+0x2f8>)
 8006838:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800683c:	f7fa f98e 	bl	8000b5c <__aeabi_dcmpun>
 8006840:	bb70      	cbnz	r0, 80068a0 <_printf_float+0xc4>
 8006842:	f04f 32ff 	mov.w	r2, #4294967295
 8006846:	4ba3      	ldr	r3, [pc, #652]	; (8006ad4 <_printf_float+0x2f8>)
 8006848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800684c:	f7fa f968 	bl	8000b20 <__aeabi_dcmple>
 8006850:	bb30      	cbnz	r0, 80068a0 <_printf_float+0xc4>
 8006852:	2200      	movs	r2, #0
 8006854:	2300      	movs	r3, #0
 8006856:	4640      	mov	r0, r8
 8006858:	4649      	mov	r1, r9
 800685a:	f7fa f957 	bl	8000b0c <__aeabi_dcmplt>
 800685e:	b110      	cbz	r0, 8006866 <_printf_float+0x8a>
 8006860:	232d      	movs	r3, #45	; 0x2d
 8006862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006866:	4a9c      	ldr	r2, [pc, #624]	; (8006ad8 <_printf_float+0x2fc>)
 8006868:	4b9c      	ldr	r3, [pc, #624]	; (8006adc <_printf_float+0x300>)
 800686a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800686e:	bf8c      	ite	hi
 8006870:	4690      	movhi	r8, r2
 8006872:	4698      	movls	r8, r3
 8006874:	2303      	movs	r3, #3
 8006876:	f02b 0204 	bic.w	r2, fp, #4
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	6022      	str	r2, [r4, #0]
 800687e:	f04f 0900 	mov.w	r9, #0
 8006882:	9700      	str	r7, [sp, #0]
 8006884:	4633      	mov	r3, r6
 8006886:	aa0b      	add	r2, sp, #44	; 0x2c
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f9e6 	bl	8006c5c <_printf_common>
 8006890:	3001      	adds	r0, #1
 8006892:	f040 808d 	bne.w	80069b0 <_printf_float+0x1d4>
 8006896:	f04f 30ff 	mov.w	r0, #4294967295
 800689a:	b00d      	add	sp, #52	; 0x34
 800689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	4649      	mov	r1, r9
 80068a8:	f7fa f958 	bl	8000b5c <__aeabi_dcmpun>
 80068ac:	b110      	cbz	r0, 80068b4 <_printf_float+0xd8>
 80068ae:	4a8c      	ldr	r2, [pc, #560]	; (8006ae0 <_printf_float+0x304>)
 80068b0:	4b8c      	ldr	r3, [pc, #560]	; (8006ae4 <_printf_float+0x308>)
 80068b2:	e7da      	b.n	800686a <_printf_float+0x8e>
 80068b4:	6861      	ldr	r1, [r4, #4]
 80068b6:	1c4b      	adds	r3, r1, #1
 80068b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80068bc:	a80a      	add	r0, sp, #40	; 0x28
 80068be:	d13e      	bne.n	800693e <_printf_float+0x162>
 80068c0:	2306      	movs	r3, #6
 80068c2:	6063      	str	r3, [r4, #4]
 80068c4:	2300      	movs	r3, #0
 80068c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80068ca:	ab09      	add	r3, sp, #36	; 0x24
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	ec49 8b10 	vmov	d0, r8, r9
 80068d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	f8cd a004 	str.w	sl, [sp, #4]
 80068dc:	6861      	ldr	r1, [r4, #4]
 80068de:	4628      	mov	r0, r5
 80068e0:	f7ff fee7 	bl	80066b2 <__cvt>
 80068e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80068e8:	2b47      	cmp	r3, #71	; 0x47
 80068ea:	4680      	mov	r8, r0
 80068ec:	d109      	bne.n	8006902 <_printf_float+0x126>
 80068ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f0:	1cd8      	adds	r0, r3, #3
 80068f2:	db02      	blt.n	80068fa <_printf_float+0x11e>
 80068f4:	6862      	ldr	r2, [r4, #4]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	dd47      	ble.n	800698a <_printf_float+0x1ae>
 80068fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80068fe:	fa5f fa8a 	uxtb.w	sl, sl
 8006902:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006906:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006908:	d824      	bhi.n	8006954 <_printf_float+0x178>
 800690a:	3901      	subs	r1, #1
 800690c:	4652      	mov	r2, sl
 800690e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006912:	9109      	str	r1, [sp, #36]	; 0x24
 8006914:	f7ff ff2e 	bl	8006774 <__exponent>
 8006918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800691a:	1813      	adds	r3, r2, r0
 800691c:	2a01      	cmp	r2, #1
 800691e:	4681      	mov	r9, r0
 8006920:	6123      	str	r3, [r4, #16]
 8006922:	dc02      	bgt.n	800692a <_printf_float+0x14e>
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	07d1      	lsls	r1, r2, #31
 8006928:	d501      	bpl.n	800692e <_printf_float+0x152>
 800692a:	3301      	adds	r3, #1
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0a5      	beq.n	8006882 <_printf_float+0xa6>
 8006936:	232d      	movs	r3, #45	; 0x2d
 8006938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800693c:	e7a1      	b.n	8006882 <_printf_float+0xa6>
 800693e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006942:	f000 8177 	beq.w	8006c34 <_printf_float+0x458>
 8006946:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800694a:	d1bb      	bne.n	80068c4 <_printf_float+0xe8>
 800694c:	2900      	cmp	r1, #0
 800694e:	d1b9      	bne.n	80068c4 <_printf_float+0xe8>
 8006950:	2301      	movs	r3, #1
 8006952:	e7b6      	b.n	80068c2 <_printf_float+0xe6>
 8006954:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006958:	d119      	bne.n	800698e <_printf_float+0x1b2>
 800695a:	2900      	cmp	r1, #0
 800695c:	6863      	ldr	r3, [r4, #4]
 800695e:	dd0c      	ble.n	800697a <_printf_float+0x19e>
 8006960:	6121      	str	r1, [r4, #16]
 8006962:	b913      	cbnz	r3, 800696a <_printf_float+0x18e>
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	07d2      	lsls	r2, r2, #31
 8006968:	d502      	bpl.n	8006970 <_printf_float+0x194>
 800696a:	3301      	adds	r3, #1
 800696c:	440b      	add	r3, r1
 800696e:	6123      	str	r3, [r4, #16]
 8006970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006972:	65a3      	str	r3, [r4, #88]	; 0x58
 8006974:	f04f 0900 	mov.w	r9, #0
 8006978:	e7d9      	b.n	800692e <_printf_float+0x152>
 800697a:	b913      	cbnz	r3, 8006982 <_printf_float+0x1a6>
 800697c:	6822      	ldr	r2, [r4, #0]
 800697e:	07d0      	lsls	r0, r2, #31
 8006980:	d501      	bpl.n	8006986 <_printf_float+0x1aa>
 8006982:	3302      	adds	r3, #2
 8006984:	e7f3      	b.n	800696e <_printf_float+0x192>
 8006986:	2301      	movs	r3, #1
 8006988:	e7f1      	b.n	800696e <_printf_float+0x192>
 800698a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800698e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006992:	4293      	cmp	r3, r2
 8006994:	db05      	blt.n	80069a2 <_printf_float+0x1c6>
 8006996:	6822      	ldr	r2, [r4, #0]
 8006998:	6123      	str	r3, [r4, #16]
 800699a:	07d1      	lsls	r1, r2, #31
 800699c:	d5e8      	bpl.n	8006970 <_printf_float+0x194>
 800699e:	3301      	adds	r3, #1
 80069a0:	e7e5      	b.n	800696e <_printf_float+0x192>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfd4      	ite	le
 80069a6:	f1c3 0302 	rsble	r3, r3, #2
 80069aa:	2301      	movgt	r3, #1
 80069ac:	4413      	add	r3, r2
 80069ae:	e7de      	b.n	800696e <_printf_float+0x192>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	055a      	lsls	r2, r3, #21
 80069b4:	d407      	bmi.n	80069c6 <_printf_float+0x1ea>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	4642      	mov	r2, r8
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	d12b      	bne.n	8006a1c <_printf_float+0x240>
 80069c4:	e767      	b.n	8006896 <_printf_float+0xba>
 80069c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80069ca:	f240 80dc 	bls.w	8006b86 <_printf_float+0x3aa>
 80069ce:	2200      	movs	r2, #0
 80069d0:	2300      	movs	r3, #0
 80069d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069d6:	f7fa f88f 	bl	8000af8 <__aeabi_dcmpeq>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d033      	beq.n	8006a46 <_printf_float+0x26a>
 80069de:	2301      	movs	r3, #1
 80069e0:	4a41      	ldr	r2, [pc, #260]	; (8006ae8 <_printf_float+0x30c>)
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f af54 	beq.w	8006896 <_printf_float+0xba>
 80069ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069f2:	429a      	cmp	r2, r3
 80069f4:	db02      	blt.n	80069fc <_printf_float+0x220>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	07d8      	lsls	r0, r3, #31
 80069fa:	d50f      	bpl.n	8006a1c <_printf_float+0x240>
 80069fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f af45 	beq.w	8006896 <_printf_float+0xba>
 8006a0c:	f04f 0800 	mov.w	r8, #0
 8006a10:	f104 091a 	add.w	r9, r4, #26
 8006a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a16:	3b01      	subs	r3, #1
 8006a18:	4543      	cmp	r3, r8
 8006a1a:	dc09      	bgt.n	8006a30 <_printf_float+0x254>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	079b      	lsls	r3, r3, #30
 8006a20:	f100 8103 	bmi.w	8006c2a <_printf_float+0x44e>
 8006a24:	68e0      	ldr	r0, [r4, #12]
 8006a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a28:	4298      	cmp	r0, r3
 8006a2a:	bfb8      	it	lt
 8006a2c:	4618      	movlt	r0, r3
 8006a2e:	e734      	b.n	800689a <_printf_float+0xbe>
 8006a30:	2301      	movs	r3, #1
 8006a32:	464a      	mov	r2, r9
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f af2b 	beq.w	8006896 <_printf_float+0xba>
 8006a40:	f108 0801 	add.w	r8, r8, #1
 8006a44:	e7e6      	b.n	8006a14 <_printf_float+0x238>
 8006a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc2b      	bgt.n	8006aa4 <_printf_float+0x2c8>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4a26      	ldr	r2, [pc, #152]	; (8006ae8 <_printf_float+0x30c>)
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	f43f af1d 	beq.w	8006896 <_printf_float+0xba>
 8006a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5e:	b923      	cbnz	r3, 8006a6a <_printf_float+0x28e>
 8006a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a62:	b913      	cbnz	r3, 8006a6a <_printf_float+0x28e>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	07d9      	lsls	r1, r3, #31
 8006a68:	d5d8      	bpl.n	8006a1c <_printf_float+0x240>
 8006a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f af0e 	beq.w	8006896 <_printf_float+0xba>
 8006a7a:	f04f 0900 	mov.w	r9, #0
 8006a7e:	f104 0a1a 	add.w	sl, r4, #26
 8006a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a84:	425b      	negs	r3, r3
 8006a86:	454b      	cmp	r3, r9
 8006a88:	dc01      	bgt.n	8006a8e <_printf_float+0x2b2>
 8006a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a8c:	e794      	b.n	80069b8 <_printf_float+0x1dc>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4652      	mov	r2, sl
 8006a92:	4631      	mov	r1, r6
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f43f aefc 	beq.w	8006896 <_printf_float+0xba>
 8006a9e:	f109 0901 	add.w	r9, r9, #1
 8006aa2:	e7ee      	b.n	8006a82 <_printf_float+0x2a6>
 8006aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	bfa8      	it	ge
 8006aac:	461a      	movge	r2, r3
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	4691      	mov	r9, r2
 8006ab2:	dd07      	ble.n	8006ac4 <_printf_float+0x2e8>
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4642      	mov	r2, r8
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f43f aee9 	beq.w	8006896 <_printf_float+0xba>
 8006ac4:	f104 031a 	add.w	r3, r4, #26
 8006ac8:	f04f 0b00 	mov.w	fp, #0
 8006acc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ad0:	9306      	str	r3, [sp, #24]
 8006ad2:	e015      	b.n	8006b00 <_printf_float+0x324>
 8006ad4:	7fefffff 	.word	0x7fefffff
 8006ad8:	0800a1b8 	.word	0x0800a1b8
 8006adc:	0800a1b4 	.word	0x0800a1b4
 8006ae0:	0800a1c0 	.word	0x0800a1c0
 8006ae4:	0800a1bc 	.word	0x0800a1bc
 8006ae8:	0800a1c4 	.word	0x0800a1c4
 8006aec:	2301      	movs	r3, #1
 8006aee:	9a06      	ldr	r2, [sp, #24]
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f aecd 	beq.w	8006896 <_printf_float+0xba>
 8006afc:	f10b 0b01 	add.w	fp, fp, #1
 8006b00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006b04:	ebaa 0309 	sub.w	r3, sl, r9
 8006b08:	455b      	cmp	r3, fp
 8006b0a:	dcef      	bgt.n	8006aec <_printf_float+0x310>
 8006b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b10:	429a      	cmp	r2, r3
 8006b12:	44d0      	add	r8, sl
 8006b14:	db15      	blt.n	8006b42 <_printf_float+0x366>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	07da      	lsls	r2, r3, #31
 8006b1a:	d412      	bmi.n	8006b42 <_printf_float+0x366>
 8006b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b20:	eba3 020a 	sub.w	r2, r3, sl
 8006b24:	eba3 0a01 	sub.w	sl, r3, r1
 8006b28:	4592      	cmp	sl, r2
 8006b2a:	bfa8      	it	ge
 8006b2c:	4692      	movge	sl, r2
 8006b2e:	f1ba 0f00 	cmp.w	sl, #0
 8006b32:	dc0e      	bgt.n	8006b52 <_printf_float+0x376>
 8006b34:	f04f 0800 	mov.w	r8, #0
 8006b38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b3c:	f104 091a 	add.w	r9, r4, #26
 8006b40:	e019      	b.n	8006b76 <_printf_float+0x39a>
 8006b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d1e5      	bne.n	8006b1c <_printf_float+0x340>
 8006b50:	e6a1      	b.n	8006896 <_printf_float+0xba>
 8006b52:	4653      	mov	r3, sl
 8006b54:	4642      	mov	r2, r8
 8006b56:	4631      	mov	r1, r6
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d1e9      	bne.n	8006b34 <_printf_float+0x358>
 8006b60:	e699      	b.n	8006896 <_printf_float+0xba>
 8006b62:	2301      	movs	r3, #1
 8006b64:	464a      	mov	r2, r9
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f ae92 	beq.w	8006896 <_printf_float+0xba>
 8006b72:	f108 0801 	add.w	r8, r8, #1
 8006b76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	eba3 030a 	sub.w	r3, r3, sl
 8006b80:	4543      	cmp	r3, r8
 8006b82:	dcee      	bgt.n	8006b62 <_printf_float+0x386>
 8006b84:	e74a      	b.n	8006a1c <_printf_float+0x240>
 8006b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b88:	2a01      	cmp	r2, #1
 8006b8a:	dc01      	bgt.n	8006b90 <_printf_float+0x3b4>
 8006b8c:	07db      	lsls	r3, r3, #31
 8006b8e:	d53a      	bpl.n	8006c06 <_printf_float+0x42a>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4642      	mov	r2, r8
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f43f ae7b 	beq.w	8006896 <_printf_float+0xba>
 8006ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	f108 0801 	add.w	r8, r8, #1
 8006bb0:	f43f ae71 	beq.w	8006896 <_printf_float+0xba>
 8006bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f103 3aff 	add.w	sl, r3, #4294967295
 8006bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f7f9 ff99 	bl	8000af8 <__aeabi_dcmpeq>
 8006bc6:	b9c8      	cbnz	r0, 8006bfc <_printf_float+0x420>
 8006bc8:	4653      	mov	r3, sl
 8006bca:	4642      	mov	r2, r8
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d10e      	bne.n	8006bf4 <_printf_float+0x418>
 8006bd6:	e65e      	b.n	8006896 <_printf_float+0xba>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	4652      	mov	r2, sl
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	f43f ae57 	beq.w	8006896 <_printf_float+0xba>
 8006be8:	f108 0801 	add.w	r8, r8, #1
 8006bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	4543      	cmp	r3, r8
 8006bf2:	dcf1      	bgt.n	8006bd8 <_printf_float+0x3fc>
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006bfa:	e6de      	b.n	80069ba <_printf_float+0x1de>
 8006bfc:	f04f 0800 	mov.w	r8, #0
 8006c00:	f104 0a1a 	add.w	sl, r4, #26
 8006c04:	e7f2      	b.n	8006bec <_printf_float+0x410>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e7df      	b.n	8006bca <_printf_float+0x3ee>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	464a      	mov	r2, r9
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f ae3e 	beq.w	8006896 <_printf_float+0xba>
 8006c1a:	f108 0801 	add.w	r8, r8, #1
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	4543      	cmp	r3, r8
 8006c26:	dcf0      	bgt.n	8006c0a <_printf_float+0x42e>
 8006c28:	e6fc      	b.n	8006a24 <_printf_float+0x248>
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	f104 0919 	add.w	r9, r4, #25
 8006c32:	e7f4      	b.n	8006c1e <_printf_float+0x442>
 8006c34:	2900      	cmp	r1, #0
 8006c36:	f43f ae8b 	beq.w	8006950 <_printf_float+0x174>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006c40:	ab09      	add	r3, sp, #36	; 0x24
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	ec49 8b10 	vmov	d0, r8, r9
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	f8cd a004 	str.w	sl, [sp, #4]
 8006c4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c52:	4628      	mov	r0, r5
 8006c54:	f7ff fd2d 	bl	80066b2 <__cvt>
 8006c58:	4680      	mov	r8, r0
 8006c5a:	e648      	b.n	80068ee <_printf_float+0x112>

08006c5c <_printf_common>:
 8006c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	4691      	mov	r9, r2
 8006c62:	461f      	mov	r7, r3
 8006c64:	688a      	ldr	r2, [r1, #8]
 8006c66:	690b      	ldr	r3, [r1, #16]
 8006c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	bfb8      	it	lt
 8006c70:	4613      	movlt	r3, r2
 8006c72:	f8c9 3000 	str.w	r3, [r9]
 8006c76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	b112      	cbz	r2, 8006c86 <_printf_common+0x2a>
 8006c80:	3301      	adds	r3, #1
 8006c82:	f8c9 3000 	str.w	r3, [r9]
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	0699      	lsls	r1, r3, #26
 8006c8a:	bf42      	ittt	mi
 8006c8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c90:	3302      	addmi	r3, #2
 8006c92:	f8c9 3000 	strmi.w	r3, [r9]
 8006c96:	6825      	ldr	r5, [r4, #0]
 8006c98:	f015 0506 	ands.w	r5, r5, #6
 8006c9c:	d107      	bne.n	8006cae <_printf_common+0x52>
 8006c9e:	f104 0a19 	add.w	sl, r4, #25
 8006ca2:	68e3      	ldr	r3, [r4, #12]
 8006ca4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	42ab      	cmp	r3, r5
 8006cac:	dc28      	bgt.n	8006d00 <_printf_common+0xa4>
 8006cae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	3300      	adds	r3, #0
 8006cb6:	bf18      	it	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	0692      	lsls	r2, r2, #26
 8006cbc:	d42d      	bmi.n	8006d1a <_printf_common+0xbe>
 8006cbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	47c0      	blx	r8
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d020      	beq.n	8006d0e <_printf_common+0xb2>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	68e5      	ldr	r5, [r4, #12]
 8006cd0:	f8d9 2000 	ldr.w	r2, [r9]
 8006cd4:	f003 0306 	and.w	r3, r3, #6
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	bf08      	it	eq
 8006cdc:	1aad      	subeq	r5, r5, r2
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	6922      	ldr	r2, [r4, #16]
 8006ce2:	bf0c      	ite	eq
 8006ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ce8:	2500      	movne	r5, #0
 8006cea:	4293      	cmp	r3, r2
 8006cec:	bfc4      	itt	gt
 8006cee:	1a9b      	subgt	r3, r3, r2
 8006cf0:	18ed      	addgt	r5, r5, r3
 8006cf2:	f04f 0900 	mov.w	r9, #0
 8006cf6:	341a      	adds	r4, #26
 8006cf8:	454d      	cmp	r5, r9
 8006cfa:	d11a      	bne.n	8006d32 <_printf_common+0xd6>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e008      	b.n	8006d12 <_printf_common+0xb6>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4652      	mov	r2, sl
 8006d04:	4639      	mov	r1, r7
 8006d06:	4630      	mov	r0, r6
 8006d08:	47c0      	blx	r8
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d103      	bne.n	8006d16 <_printf_common+0xba>
 8006d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	3501      	adds	r5, #1
 8006d18:	e7c3      	b.n	8006ca2 <_printf_common+0x46>
 8006d1a:	18e1      	adds	r1, r4, r3
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	2030      	movs	r0, #48	; 0x30
 8006d20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d24:	4422      	add	r2, r4
 8006d26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d2e:	3302      	adds	r3, #2
 8006d30:	e7c5      	b.n	8006cbe <_printf_common+0x62>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4622      	mov	r2, r4
 8006d36:	4639      	mov	r1, r7
 8006d38:	4630      	mov	r0, r6
 8006d3a:	47c0      	blx	r8
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d0e6      	beq.n	8006d0e <_printf_common+0xb2>
 8006d40:	f109 0901 	add.w	r9, r9, #1
 8006d44:	e7d8      	b.n	8006cf8 <_printf_common+0x9c>
	...

08006d48 <_printf_i>:
 8006d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006d50:	460c      	mov	r4, r1
 8006d52:	7e09      	ldrb	r1, [r1, #24]
 8006d54:	b085      	sub	sp, #20
 8006d56:	296e      	cmp	r1, #110	; 0x6e
 8006d58:	4617      	mov	r7, r2
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	4698      	mov	r8, r3
 8006d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d60:	f000 80b3 	beq.w	8006eca <_printf_i+0x182>
 8006d64:	d822      	bhi.n	8006dac <_printf_i+0x64>
 8006d66:	2963      	cmp	r1, #99	; 0x63
 8006d68:	d036      	beq.n	8006dd8 <_printf_i+0x90>
 8006d6a:	d80a      	bhi.n	8006d82 <_printf_i+0x3a>
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	f000 80b9 	beq.w	8006ee4 <_printf_i+0x19c>
 8006d72:	2958      	cmp	r1, #88	; 0x58
 8006d74:	f000 8083 	beq.w	8006e7e <_printf_i+0x136>
 8006d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d80:	e032      	b.n	8006de8 <_printf_i+0xa0>
 8006d82:	2964      	cmp	r1, #100	; 0x64
 8006d84:	d001      	beq.n	8006d8a <_printf_i+0x42>
 8006d86:	2969      	cmp	r1, #105	; 0x69
 8006d88:	d1f6      	bne.n	8006d78 <_printf_i+0x30>
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	6813      	ldr	r3, [r2, #0]
 8006d8e:	0605      	lsls	r5, r0, #24
 8006d90:	f103 0104 	add.w	r1, r3, #4
 8006d94:	d52a      	bpl.n	8006dec <_printf_i+0xa4>
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6011      	str	r1, [r2, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	da03      	bge.n	8006da6 <_printf_i+0x5e>
 8006d9e:	222d      	movs	r2, #45	; 0x2d
 8006da0:	425b      	negs	r3, r3
 8006da2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006da6:	486f      	ldr	r0, [pc, #444]	; (8006f64 <_printf_i+0x21c>)
 8006da8:	220a      	movs	r2, #10
 8006daa:	e039      	b.n	8006e20 <_printf_i+0xd8>
 8006dac:	2973      	cmp	r1, #115	; 0x73
 8006dae:	f000 809d 	beq.w	8006eec <_printf_i+0x1a4>
 8006db2:	d808      	bhi.n	8006dc6 <_printf_i+0x7e>
 8006db4:	296f      	cmp	r1, #111	; 0x6f
 8006db6:	d020      	beq.n	8006dfa <_printf_i+0xb2>
 8006db8:	2970      	cmp	r1, #112	; 0x70
 8006dba:	d1dd      	bne.n	8006d78 <_printf_i+0x30>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	f043 0320 	orr.w	r3, r3, #32
 8006dc2:	6023      	str	r3, [r4, #0]
 8006dc4:	e003      	b.n	8006dce <_printf_i+0x86>
 8006dc6:	2975      	cmp	r1, #117	; 0x75
 8006dc8:	d017      	beq.n	8006dfa <_printf_i+0xb2>
 8006dca:	2978      	cmp	r1, #120	; 0x78
 8006dcc:	d1d4      	bne.n	8006d78 <_printf_i+0x30>
 8006dce:	2378      	movs	r3, #120	; 0x78
 8006dd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dd4:	4864      	ldr	r0, [pc, #400]	; (8006f68 <_printf_i+0x220>)
 8006dd6:	e055      	b.n	8006e84 <_printf_i+0x13c>
 8006dd8:	6813      	ldr	r3, [r2, #0]
 8006dda:	1d19      	adds	r1, r3, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6011      	str	r1, [r2, #0]
 8006de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006de8:	2301      	movs	r3, #1
 8006dea:	e08c      	b.n	8006f06 <_printf_i+0x1be>
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6011      	str	r1, [r2, #0]
 8006df0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006df4:	bf18      	it	ne
 8006df6:	b21b      	sxthne	r3, r3
 8006df8:	e7cf      	b.n	8006d9a <_printf_i+0x52>
 8006dfa:	6813      	ldr	r3, [r2, #0]
 8006dfc:	6825      	ldr	r5, [r4, #0]
 8006dfe:	1d18      	adds	r0, r3, #4
 8006e00:	6010      	str	r0, [r2, #0]
 8006e02:	0628      	lsls	r0, r5, #24
 8006e04:	d501      	bpl.n	8006e0a <_printf_i+0xc2>
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	e002      	b.n	8006e10 <_printf_i+0xc8>
 8006e0a:	0668      	lsls	r0, r5, #25
 8006e0c:	d5fb      	bpl.n	8006e06 <_printf_i+0xbe>
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	4854      	ldr	r0, [pc, #336]	; (8006f64 <_printf_i+0x21c>)
 8006e12:	296f      	cmp	r1, #111	; 0x6f
 8006e14:	bf14      	ite	ne
 8006e16:	220a      	movne	r2, #10
 8006e18:	2208      	moveq	r2, #8
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e20:	6865      	ldr	r5, [r4, #4]
 8006e22:	60a5      	str	r5, [r4, #8]
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	f2c0 8095 	blt.w	8006f54 <_printf_i+0x20c>
 8006e2a:	6821      	ldr	r1, [r4, #0]
 8006e2c:	f021 0104 	bic.w	r1, r1, #4
 8006e30:	6021      	str	r1, [r4, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d13d      	bne.n	8006eb2 <_printf_i+0x16a>
 8006e36:	2d00      	cmp	r5, #0
 8006e38:	f040 808e 	bne.w	8006f58 <_printf_i+0x210>
 8006e3c:	4665      	mov	r5, ip
 8006e3e:	2a08      	cmp	r2, #8
 8006e40:	d10b      	bne.n	8006e5a <_printf_i+0x112>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	07db      	lsls	r3, r3, #31
 8006e46:	d508      	bpl.n	8006e5a <_printf_i+0x112>
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	6862      	ldr	r2, [r4, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	bfde      	ittt	le
 8006e50:	2330      	movle	r3, #48	; 0x30
 8006e52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e5a:	ebac 0305 	sub.w	r3, ip, r5
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	f8cd 8000 	str.w	r8, [sp]
 8006e64:	463b      	mov	r3, r7
 8006e66:	aa03      	add	r2, sp, #12
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f7ff fef6 	bl	8006c5c <_printf_common>
 8006e70:	3001      	adds	r0, #1
 8006e72:	d14d      	bne.n	8006f10 <_printf_i+0x1c8>
 8006e74:	f04f 30ff 	mov.w	r0, #4294967295
 8006e78:	b005      	add	sp, #20
 8006e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	4839      	ldr	r0, [pc, #228]	; (8006f64 <_printf_i+0x21c>)
 8006e80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e84:	6813      	ldr	r3, [r2, #0]
 8006e86:	6821      	ldr	r1, [r4, #0]
 8006e88:	1d1d      	adds	r5, r3, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6015      	str	r5, [r2, #0]
 8006e8e:	060a      	lsls	r2, r1, #24
 8006e90:	d50b      	bpl.n	8006eaa <_printf_i+0x162>
 8006e92:	07ca      	lsls	r2, r1, #31
 8006e94:	bf44      	itt	mi
 8006e96:	f041 0120 	orrmi.w	r1, r1, #32
 8006e9a:	6021      	strmi	r1, [r4, #0]
 8006e9c:	b91b      	cbnz	r3, 8006ea6 <_printf_i+0x15e>
 8006e9e:	6822      	ldr	r2, [r4, #0]
 8006ea0:	f022 0220 	bic.w	r2, r2, #32
 8006ea4:	6022      	str	r2, [r4, #0]
 8006ea6:	2210      	movs	r2, #16
 8006ea8:	e7b7      	b.n	8006e1a <_printf_i+0xd2>
 8006eaa:	064d      	lsls	r5, r1, #25
 8006eac:	bf48      	it	mi
 8006eae:	b29b      	uxthmi	r3, r3
 8006eb0:	e7ef      	b.n	8006e92 <_printf_i+0x14a>
 8006eb2:	4665      	mov	r5, ip
 8006eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eb8:	fb02 3311 	mls	r3, r2, r1, r3
 8006ebc:	5cc3      	ldrb	r3, [r0, r3]
 8006ebe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	2900      	cmp	r1, #0
 8006ec6:	d1f5      	bne.n	8006eb4 <_printf_i+0x16c>
 8006ec8:	e7b9      	b.n	8006e3e <_printf_i+0xf6>
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	6825      	ldr	r5, [r4, #0]
 8006ece:	6961      	ldr	r1, [r4, #20]
 8006ed0:	1d18      	adds	r0, r3, #4
 8006ed2:	6010      	str	r0, [r2, #0]
 8006ed4:	0628      	lsls	r0, r5, #24
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	d501      	bpl.n	8006ede <_printf_i+0x196>
 8006eda:	6019      	str	r1, [r3, #0]
 8006edc:	e002      	b.n	8006ee4 <_printf_i+0x19c>
 8006ede:	066a      	lsls	r2, r5, #25
 8006ee0:	d5fb      	bpl.n	8006eda <_printf_i+0x192>
 8006ee2:	8019      	strh	r1, [r3, #0]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	4665      	mov	r5, ip
 8006eea:	e7b9      	b.n	8006e60 <_printf_i+0x118>
 8006eec:	6813      	ldr	r3, [r2, #0]
 8006eee:	1d19      	adds	r1, r3, #4
 8006ef0:	6011      	str	r1, [r2, #0]
 8006ef2:	681d      	ldr	r5, [r3, #0]
 8006ef4:	6862      	ldr	r2, [r4, #4]
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7f9 f989 	bl	8000210 <memchr>
 8006efe:	b108      	cbz	r0, 8006f04 <_printf_i+0x1bc>
 8006f00:	1b40      	subs	r0, r0, r5
 8006f02:	6060      	str	r0, [r4, #4]
 8006f04:	6863      	ldr	r3, [r4, #4]
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0e:	e7a7      	b.n	8006e60 <_printf_i+0x118>
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	462a      	mov	r2, r5
 8006f14:	4639      	mov	r1, r7
 8006f16:	4630      	mov	r0, r6
 8006f18:	47c0      	blx	r8
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d0aa      	beq.n	8006e74 <_printf_i+0x12c>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	079b      	lsls	r3, r3, #30
 8006f22:	d413      	bmi.n	8006f4c <_printf_i+0x204>
 8006f24:	68e0      	ldr	r0, [r4, #12]
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	4298      	cmp	r0, r3
 8006f2a:	bfb8      	it	lt
 8006f2c:	4618      	movlt	r0, r3
 8006f2e:	e7a3      	b.n	8006e78 <_printf_i+0x130>
 8006f30:	2301      	movs	r3, #1
 8006f32:	464a      	mov	r2, r9
 8006f34:	4639      	mov	r1, r7
 8006f36:	4630      	mov	r0, r6
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d09a      	beq.n	8006e74 <_printf_i+0x12c>
 8006f3e:	3501      	adds	r5, #1
 8006f40:	68e3      	ldr	r3, [r4, #12]
 8006f42:	9a03      	ldr	r2, [sp, #12]
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	42ab      	cmp	r3, r5
 8006f48:	dcf2      	bgt.n	8006f30 <_printf_i+0x1e8>
 8006f4a:	e7eb      	b.n	8006f24 <_printf_i+0x1dc>
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	f104 0919 	add.w	r9, r4, #25
 8006f52:	e7f5      	b.n	8006f40 <_printf_i+0x1f8>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1ac      	bne.n	8006eb2 <_printf_i+0x16a>
 8006f58:	7803      	ldrb	r3, [r0, #0]
 8006f5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f62:	e76c      	b.n	8006e3e <_printf_i+0xf6>
 8006f64:	0800a1c6 	.word	0x0800a1c6
 8006f68:	0800a1d7 	.word	0x0800a1d7

08006f6c <_scanf_float>:
 8006f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	469a      	mov	sl, r3
 8006f72:	688b      	ldr	r3, [r1, #8]
 8006f74:	4616      	mov	r6, r2
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	bf83      	ittte	hi
 8006f80:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006f84:	189b      	addhi	r3, r3, r2
 8006f86:	9301      	strhi	r3, [sp, #4]
 8006f88:	2300      	movls	r3, #0
 8006f8a:	bf86      	itte	hi
 8006f8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006f90:	608b      	strhi	r3, [r1, #8]
 8006f92:	9301      	strls	r3, [sp, #4]
 8006f94:	680b      	ldr	r3, [r1, #0]
 8006f96:	4688      	mov	r8, r1
 8006f98:	f04f 0b00 	mov.w	fp, #0
 8006f9c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006fa0:	f848 3b1c 	str.w	r3, [r8], #28
 8006fa4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006fa8:	4607      	mov	r7, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	4645      	mov	r5, r8
 8006fae:	465a      	mov	r2, fp
 8006fb0:	46d9      	mov	r9, fp
 8006fb2:	f8cd b008 	str.w	fp, [sp, #8]
 8006fb6:	68a1      	ldr	r1, [r4, #8]
 8006fb8:	b181      	cbz	r1, 8006fdc <_scanf_float+0x70>
 8006fba:	6833      	ldr	r3, [r6, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b49      	cmp	r3, #73	; 0x49
 8006fc0:	d071      	beq.n	80070a6 <_scanf_float+0x13a>
 8006fc2:	d84d      	bhi.n	8007060 <_scanf_float+0xf4>
 8006fc4:	2b39      	cmp	r3, #57	; 0x39
 8006fc6:	d840      	bhi.n	800704a <_scanf_float+0xde>
 8006fc8:	2b31      	cmp	r3, #49	; 0x31
 8006fca:	f080 8088 	bcs.w	80070de <_scanf_float+0x172>
 8006fce:	2b2d      	cmp	r3, #45	; 0x2d
 8006fd0:	f000 8090 	beq.w	80070f4 <_scanf_float+0x188>
 8006fd4:	d815      	bhi.n	8007002 <_scanf_float+0x96>
 8006fd6:	2b2b      	cmp	r3, #43	; 0x2b
 8006fd8:	f000 808c 	beq.w	80070f4 <_scanf_float+0x188>
 8006fdc:	f1b9 0f00 	cmp.w	r9, #0
 8006fe0:	d003      	beq.n	8006fea <_scanf_float+0x7e>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	3a01      	subs	r2, #1
 8006fec:	2a01      	cmp	r2, #1
 8006fee:	f200 80ea 	bhi.w	80071c6 <_scanf_float+0x25a>
 8006ff2:	4545      	cmp	r5, r8
 8006ff4:	f200 80dc 	bhi.w	80071b0 <_scanf_float+0x244>
 8006ff8:	2601      	movs	r6, #1
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	b007      	add	sp, #28
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	2b2e      	cmp	r3, #46	; 0x2e
 8007004:	f000 809f 	beq.w	8007146 <_scanf_float+0x1da>
 8007008:	2b30      	cmp	r3, #48	; 0x30
 800700a:	d1e7      	bne.n	8006fdc <_scanf_float+0x70>
 800700c:	6820      	ldr	r0, [r4, #0]
 800700e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007012:	d064      	beq.n	80070de <_scanf_float+0x172>
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800701a:	6020      	str	r0, [r4, #0]
 800701c:	f109 0901 	add.w	r9, r9, #1
 8007020:	b11b      	cbz	r3, 800702a <_scanf_float+0xbe>
 8007022:	3b01      	subs	r3, #1
 8007024:	3101      	adds	r1, #1
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	60a1      	str	r1, [r4, #8]
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	3b01      	subs	r3, #1
 800702e:	60a3      	str	r3, [r4, #8]
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	3301      	adds	r3, #1
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	6873      	ldr	r3, [r6, #4]
 8007038:	3b01      	subs	r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	6073      	str	r3, [r6, #4]
 800703e:	f340 80ac 	ble.w	800719a <_scanf_float+0x22e>
 8007042:	6833      	ldr	r3, [r6, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	6033      	str	r3, [r6, #0]
 8007048:	e7b5      	b.n	8006fb6 <_scanf_float+0x4a>
 800704a:	2b45      	cmp	r3, #69	; 0x45
 800704c:	f000 8085 	beq.w	800715a <_scanf_float+0x1ee>
 8007050:	2b46      	cmp	r3, #70	; 0x46
 8007052:	d06a      	beq.n	800712a <_scanf_float+0x1be>
 8007054:	2b41      	cmp	r3, #65	; 0x41
 8007056:	d1c1      	bne.n	8006fdc <_scanf_float+0x70>
 8007058:	2a01      	cmp	r2, #1
 800705a:	d1bf      	bne.n	8006fdc <_scanf_float+0x70>
 800705c:	2202      	movs	r2, #2
 800705e:	e046      	b.n	80070ee <_scanf_float+0x182>
 8007060:	2b65      	cmp	r3, #101	; 0x65
 8007062:	d07a      	beq.n	800715a <_scanf_float+0x1ee>
 8007064:	d818      	bhi.n	8007098 <_scanf_float+0x12c>
 8007066:	2b54      	cmp	r3, #84	; 0x54
 8007068:	d066      	beq.n	8007138 <_scanf_float+0x1cc>
 800706a:	d811      	bhi.n	8007090 <_scanf_float+0x124>
 800706c:	2b4e      	cmp	r3, #78	; 0x4e
 800706e:	d1b5      	bne.n	8006fdc <_scanf_float+0x70>
 8007070:	2a00      	cmp	r2, #0
 8007072:	d146      	bne.n	8007102 <_scanf_float+0x196>
 8007074:	f1b9 0f00 	cmp.w	r9, #0
 8007078:	d145      	bne.n	8007106 <_scanf_float+0x19a>
 800707a:	6821      	ldr	r1, [r4, #0]
 800707c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007080:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007084:	d13f      	bne.n	8007106 <_scanf_float+0x19a>
 8007086:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800708a:	6021      	str	r1, [r4, #0]
 800708c:	2201      	movs	r2, #1
 800708e:	e02e      	b.n	80070ee <_scanf_float+0x182>
 8007090:	2b59      	cmp	r3, #89	; 0x59
 8007092:	d01e      	beq.n	80070d2 <_scanf_float+0x166>
 8007094:	2b61      	cmp	r3, #97	; 0x61
 8007096:	e7de      	b.n	8007056 <_scanf_float+0xea>
 8007098:	2b6e      	cmp	r3, #110	; 0x6e
 800709a:	d0e9      	beq.n	8007070 <_scanf_float+0x104>
 800709c:	d815      	bhi.n	80070ca <_scanf_float+0x15e>
 800709e:	2b66      	cmp	r3, #102	; 0x66
 80070a0:	d043      	beq.n	800712a <_scanf_float+0x1be>
 80070a2:	2b69      	cmp	r3, #105	; 0x69
 80070a4:	d19a      	bne.n	8006fdc <_scanf_float+0x70>
 80070a6:	f1bb 0f00 	cmp.w	fp, #0
 80070aa:	d138      	bne.n	800711e <_scanf_float+0x1b2>
 80070ac:	f1b9 0f00 	cmp.w	r9, #0
 80070b0:	d197      	bne.n	8006fe2 <_scanf_float+0x76>
 80070b2:	6821      	ldr	r1, [r4, #0]
 80070b4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80070b8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80070bc:	d195      	bne.n	8006fea <_scanf_float+0x7e>
 80070be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80070c2:	6021      	str	r1, [r4, #0]
 80070c4:	f04f 0b01 	mov.w	fp, #1
 80070c8:	e011      	b.n	80070ee <_scanf_float+0x182>
 80070ca:	2b74      	cmp	r3, #116	; 0x74
 80070cc:	d034      	beq.n	8007138 <_scanf_float+0x1cc>
 80070ce:	2b79      	cmp	r3, #121	; 0x79
 80070d0:	d184      	bne.n	8006fdc <_scanf_float+0x70>
 80070d2:	f1bb 0f07 	cmp.w	fp, #7
 80070d6:	d181      	bne.n	8006fdc <_scanf_float+0x70>
 80070d8:	f04f 0b08 	mov.w	fp, #8
 80070dc:	e007      	b.n	80070ee <_scanf_float+0x182>
 80070de:	eb12 0f0b 	cmn.w	r2, fp
 80070e2:	f47f af7b 	bne.w	8006fdc <_scanf_float+0x70>
 80070e6:	6821      	ldr	r1, [r4, #0]
 80070e8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80070ec:	6021      	str	r1, [r4, #0]
 80070ee:	702b      	strb	r3, [r5, #0]
 80070f0:	3501      	adds	r5, #1
 80070f2:	e79a      	b.n	800702a <_scanf_float+0xbe>
 80070f4:	6821      	ldr	r1, [r4, #0]
 80070f6:	0608      	lsls	r0, r1, #24
 80070f8:	f57f af70 	bpl.w	8006fdc <_scanf_float+0x70>
 80070fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007100:	e7f4      	b.n	80070ec <_scanf_float+0x180>
 8007102:	2a02      	cmp	r2, #2
 8007104:	d047      	beq.n	8007196 <_scanf_float+0x22a>
 8007106:	f1bb 0f01 	cmp.w	fp, #1
 800710a:	d003      	beq.n	8007114 <_scanf_float+0x1a8>
 800710c:	f1bb 0f04 	cmp.w	fp, #4
 8007110:	f47f af64 	bne.w	8006fdc <_scanf_float+0x70>
 8007114:	f10b 0b01 	add.w	fp, fp, #1
 8007118:	fa5f fb8b 	uxtb.w	fp, fp
 800711c:	e7e7      	b.n	80070ee <_scanf_float+0x182>
 800711e:	f1bb 0f03 	cmp.w	fp, #3
 8007122:	d0f7      	beq.n	8007114 <_scanf_float+0x1a8>
 8007124:	f1bb 0f05 	cmp.w	fp, #5
 8007128:	e7f2      	b.n	8007110 <_scanf_float+0x1a4>
 800712a:	f1bb 0f02 	cmp.w	fp, #2
 800712e:	f47f af55 	bne.w	8006fdc <_scanf_float+0x70>
 8007132:	f04f 0b03 	mov.w	fp, #3
 8007136:	e7da      	b.n	80070ee <_scanf_float+0x182>
 8007138:	f1bb 0f06 	cmp.w	fp, #6
 800713c:	f47f af4e 	bne.w	8006fdc <_scanf_float+0x70>
 8007140:	f04f 0b07 	mov.w	fp, #7
 8007144:	e7d3      	b.n	80070ee <_scanf_float+0x182>
 8007146:	6821      	ldr	r1, [r4, #0]
 8007148:	0588      	lsls	r0, r1, #22
 800714a:	f57f af47 	bpl.w	8006fdc <_scanf_float+0x70>
 800714e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007152:	6021      	str	r1, [r4, #0]
 8007154:	f8cd 9008 	str.w	r9, [sp, #8]
 8007158:	e7c9      	b.n	80070ee <_scanf_float+0x182>
 800715a:	6821      	ldr	r1, [r4, #0]
 800715c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007160:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007164:	d006      	beq.n	8007174 <_scanf_float+0x208>
 8007166:	0548      	lsls	r0, r1, #21
 8007168:	f57f af38 	bpl.w	8006fdc <_scanf_float+0x70>
 800716c:	f1b9 0f00 	cmp.w	r9, #0
 8007170:	f43f af3b 	beq.w	8006fea <_scanf_float+0x7e>
 8007174:	0588      	lsls	r0, r1, #22
 8007176:	bf58      	it	pl
 8007178:	9802      	ldrpl	r0, [sp, #8]
 800717a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800717e:	bf58      	it	pl
 8007180:	eba9 0000 	subpl.w	r0, r9, r0
 8007184:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007188:	bf58      	it	pl
 800718a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800718e:	6021      	str	r1, [r4, #0]
 8007190:	f04f 0900 	mov.w	r9, #0
 8007194:	e7ab      	b.n	80070ee <_scanf_float+0x182>
 8007196:	2203      	movs	r2, #3
 8007198:	e7a9      	b.n	80070ee <_scanf_float+0x182>
 800719a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800719e:	9205      	str	r2, [sp, #20]
 80071a0:	4631      	mov	r1, r6
 80071a2:	4638      	mov	r0, r7
 80071a4:	4798      	blx	r3
 80071a6:	9a05      	ldr	r2, [sp, #20]
 80071a8:	2800      	cmp	r0, #0
 80071aa:	f43f af04 	beq.w	8006fb6 <_scanf_float+0x4a>
 80071ae:	e715      	b.n	8006fdc <_scanf_float+0x70>
 80071b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80071b8:	4632      	mov	r2, r6
 80071ba:	4638      	mov	r0, r7
 80071bc:	4798      	blx	r3
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	e715      	b.n	8006ff2 <_scanf_float+0x86>
 80071c6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80071ca:	2b06      	cmp	r3, #6
 80071cc:	d80a      	bhi.n	80071e4 <_scanf_float+0x278>
 80071ce:	f1bb 0f02 	cmp.w	fp, #2
 80071d2:	d968      	bls.n	80072a6 <_scanf_float+0x33a>
 80071d4:	f1ab 0b03 	sub.w	fp, fp, #3
 80071d8:	fa5f fb8b 	uxtb.w	fp, fp
 80071dc:	eba5 0b0b 	sub.w	fp, r5, fp
 80071e0:	455d      	cmp	r5, fp
 80071e2:	d14b      	bne.n	800727c <_scanf_float+0x310>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	05da      	lsls	r2, r3, #23
 80071e8:	d51f      	bpl.n	800722a <_scanf_float+0x2be>
 80071ea:	055b      	lsls	r3, r3, #21
 80071ec:	d468      	bmi.n	80072c0 <_scanf_float+0x354>
 80071ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	2965      	cmp	r1, #101	; 0x65
 80071f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80071fa:	f105 3bff 	add.w	fp, r5, #4294967295
 80071fe:	6123      	str	r3, [r4, #16]
 8007200:	d00d      	beq.n	800721e <_scanf_float+0x2b2>
 8007202:	2945      	cmp	r1, #69	; 0x45
 8007204:	d00b      	beq.n	800721e <_scanf_float+0x2b2>
 8007206:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800720a:	4632      	mov	r2, r6
 800720c:	4638      	mov	r0, r7
 800720e:	4798      	blx	r3
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007216:	3b01      	subs	r3, #1
 8007218:	f1a5 0b02 	sub.w	fp, r5, #2
 800721c:	6123      	str	r3, [r4, #16]
 800721e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007222:	4632      	mov	r2, r6
 8007224:	4638      	mov	r0, r7
 8007226:	4798      	blx	r3
 8007228:	465d      	mov	r5, fp
 800722a:	6826      	ldr	r6, [r4, #0]
 800722c:	f016 0610 	ands.w	r6, r6, #16
 8007230:	d17a      	bne.n	8007328 <_scanf_float+0x3bc>
 8007232:	702e      	strb	r6, [r5, #0]
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800723a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800723e:	d142      	bne.n	80072c6 <_scanf_float+0x35a>
 8007240:	9b02      	ldr	r3, [sp, #8]
 8007242:	eba9 0303 	sub.w	r3, r9, r3
 8007246:	425a      	negs	r2, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d149      	bne.n	80072e0 <_scanf_float+0x374>
 800724c:	2200      	movs	r2, #0
 800724e:	4641      	mov	r1, r8
 8007250:	4638      	mov	r0, r7
 8007252:	f000 fea5 	bl	8007fa0 <_strtod_r>
 8007256:	6825      	ldr	r5, [r4, #0]
 8007258:	f8da 3000 	ldr.w	r3, [sl]
 800725c:	f015 0f02 	tst.w	r5, #2
 8007260:	f103 0204 	add.w	r2, r3, #4
 8007264:	ec59 8b10 	vmov	r8, r9, d0
 8007268:	f8ca 2000 	str.w	r2, [sl]
 800726c:	d043      	beq.n	80072f6 <_scanf_float+0x38a>
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	e9c3 8900 	strd	r8, r9, [r3]
 8007274:	68e3      	ldr	r3, [r4, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60e3      	str	r3, [r4, #12]
 800727a:	e6be      	b.n	8006ffa <_scanf_float+0x8e>
 800727c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007280:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007284:	4632      	mov	r2, r6
 8007286:	4638      	mov	r0, r7
 8007288:	4798      	blx	r3
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	3b01      	subs	r3, #1
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	e7a6      	b.n	80071e0 <_scanf_float+0x274>
 8007292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007296:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800729a:	4632      	mov	r2, r6
 800729c:	4638      	mov	r0, r7
 800729e:	4798      	blx	r3
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	4545      	cmp	r5, r8
 80072a8:	d8f3      	bhi.n	8007292 <_scanf_float+0x326>
 80072aa:	e6a5      	b.n	8006ff8 <_scanf_float+0x8c>
 80072ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80072b4:	4632      	mov	r2, r6
 80072b6:	4638      	mov	r0, r7
 80072b8:	4798      	blx	r3
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	3b01      	subs	r3, #1
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	4545      	cmp	r5, r8
 80072c2:	d8f3      	bhi.n	80072ac <_scanf_float+0x340>
 80072c4:	e698      	b.n	8006ff8 <_scanf_float+0x8c>
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0bf      	beq.n	800724c <_scanf_float+0x2e0>
 80072cc:	9904      	ldr	r1, [sp, #16]
 80072ce:	230a      	movs	r3, #10
 80072d0:	4632      	mov	r2, r6
 80072d2:	3101      	adds	r1, #1
 80072d4:	4638      	mov	r0, r7
 80072d6:	f000 feef 	bl	80080b8 <_strtol_r>
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	9d04      	ldr	r5, [sp, #16]
 80072de:	1ac2      	subs	r2, r0, r3
 80072e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80072e4:	429d      	cmp	r5, r3
 80072e6:	bf28      	it	cs
 80072e8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80072ec:	490f      	ldr	r1, [pc, #60]	; (800732c <_scanf_float+0x3c0>)
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 f824 	bl	800733c <siprintf>
 80072f4:	e7aa      	b.n	800724c <_scanf_float+0x2e0>
 80072f6:	f015 0504 	ands.w	r5, r5, #4
 80072fa:	d1b8      	bne.n	800726e <_scanf_float+0x302>
 80072fc:	681f      	ldr	r7, [r3, #0]
 80072fe:	ee10 2a10 	vmov	r2, s0
 8007302:	464b      	mov	r3, r9
 8007304:	ee10 0a10 	vmov	r0, s0
 8007308:	4649      	mov	r1, r9
 800730a:	f7f9 fc27 	bl	8000b5c <__aeabi_dcmpun>
 800730e:	b128      	cbz	r0, 800731c <_scanf_float+0x3b0>
 8007310:	4628      	mov	r0, r5
 8007312:	f000 f80d 	bl	8007330 <nanf>
 8007316:	ed87 0a00 	vstr	s0, [r7]
 800731a:	e7ab      	b.n	8007274 <_scanf_float+0x308>
 800731c:	4640      	mov	r0, r8
 800731e:	4649      	mov	r1, r9
 8007320:	f7f9 fc7a 	bl	8000c18 <__aeabi_d2f>
 8007324:	6038      	str	r0, [r7, #0]
 8007326:	e7a5      	b.n	8007274 <_scanf_float+0x308>
 8007328:	2600      	movs	r6, #0
 800732a:	e666      	b.n	8006ffa <_scanf_float+0x8e>
 800732c:	0800a1e8 	.word	0x0800a1e8

08007330 <nanf>:
 8007330:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007338 <nanf+0x8>
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	7fc00000 	.word	0x7fc00000

0800733c <siprintf>:
 800733c:	b40e      	push	{r1, r2, r3}
 800733e:	b500      	push	{lr}
 8007340:	b09c      	sub	sp, #112	; 0x70
 8007342:	ab1d      	add	r3, sp, #116	; 0x74
 8007344:	9002      	str	r0, [sp, #8]
 8007346:	9006      	str	r0, [sp, #24]
 8007348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800734c:	4809      	ldr	r0, [pc, #36]	; (8007374 <siprintf+0x38>)
 800734e:	9107      	str	r1, [sp, #28]
 8007350:	9104      	str	r1, [sp, #16]
 8007352:	4909      	ldr	r1, [pc, #36]	; (8007378 <siprintf+0x3c>)
 8007354:	f853 2b04 	ldr.w	r2, [r3], #4
 8007358:	9105      	str	r1, [sp, #20]
 800735a:	6800      	ldr	r0, [r0, #0]
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	a902      	add	r1, sp, #8
 8007360:	f002 fd66 	bl	8009e30 <_svfiprintf_r>
 8007364:	9b02      	ldr	r3, [sp, #8]
 8007366:	2200      	movs	r2, #0
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	b01c      	add	sp, #112	; 0x70
 800736c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007370:	b003      	add	sp, #12
 8007372:	4770      	bx	lr
 8007374:	200000d0 	.word	0x200000d0
 8007378:	ffff0208 	.word	0xffff0208

0800737c <sulp>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	ec45 4b10 	vmov	d0, r4, r5
 8007386:	4616      	mov	r6, r2
 8007388:	f002 fb0e 	bl	80099a8 <__ulp>
 800738c:	ec51 0b10 	vmov	r0, r1, d0
 8007390:	b17e      	cbz	r6, 80073b2 <sulp+0x36>
 8007392:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007396:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd09      	ble.n	80073b2 <sulp+0x36>
 800739e:	051b      	lsls	r3, r3, #20
 80073a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80073a4:	2400      	movs	r4, #0
 80073a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80073aa:	4622      	mov	r2, r4
 80073ac:	462b      	mov	r3, r5
 80073ae:	f7f9 f93b 	bl	8000628 <__aeabi_dmul>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	0000      	movs	r0, r0
	...

080073b8 <_strtod_l>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	461f      	mov	r7, r3
 80073be:	b0a1      	sub	sp, #132	; 0x84
 80073c0:	2300      	movs	r3, #0
 80073c2:	4681      	mov	r9, r0
 80073c4:	4638      	mov	r0, r7
 80073c6:	460e      	mov	r6, r1
 80073c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80073ca:	931c      	str	r3, [sp, #112]	; 0x70
 80073cc:	f001 fff5 	bl	80093ba <__localeconv_l>
 80073d0:	4680      	mov	r8, r0
 80073d2:	6800      	ldr	r0, [r0, #0]
 80073d4:	f7f8 ff14 	bl	8000200 <strlen>
 80073d8:	f04f 0a00 	mov.w	sl, #0
 80073dc:	4604      	mov	r4, r0
 80073de:	f04f 0b00 	mov.w	fp, #0
 80073e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80073e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	2a0d      	cmp	r2, #13
 80073ea:	d832      	bhi.n	8007452 <_strtod_l+0x9a>
 80073ec:	2a09      	cmp	r2, #9
 80073ee:	d236      	bcs.n	800745e <_strtod_l+0xa6>
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	d03e      	beq.n	8007472 <_strtod_l+0xba>
 80073f4:	2300      	movs	r3, #0
 80073f6:	930d      	str	r3, [sp, #52]	; 0x34
 80073f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80073fa:	782b      	ldrb	r3, [r5, #0]
 80073fc:	2b30      	cmp	r3, #48	; 0x30
 80073fe:	f040 80ac 	bne.w	800755a <_strtod_l+0x1a2>
 8007402:	786b      	ldrb	r3, [r5, #1]
 8007404:	2b58      	cmp	r3, #88	; 0x58
 8007406:	d001      	beq.n	800740c <_strtod_l+0x54>
 8007408:	2b78      	cmp	r3, #120	; 0x78
 800740a:	d167      	bne.n	80074dc <_strtod_l+0x124>
 800740c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	ab1c      	add	r3, sp, #112	; 0x70
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	9702      	str	r7, [sp, #8]
 8007416:	ab1d      	add	r3, sp, #116	; 0x74
 8007418:	4a88      	ldr	r2, [pc, #544]	; (800763c <_strtod_l+0x284>)
 800741a:	a91b      	add	r1, sp, #108	; 0x6c
 800741c:	4648      	mov	r0, r9
 800741e:	f001 fcf2 	bl	8008e06 <__gethex>
 8007422:	f010 0407 	ands.w	r4, r0, #7
 8007426:	4606      	mov	r6, r0
 8007428:	d005      	beq.n	8007436 <_strtod_l+0x7e>
 800742a:	2c06      	cmp	r4, #6
 800742c:	d12b      	bne.n	8007486 <_strtod_l+0xce>
 800742e:	3501      	adds	r5, #1
 8007430:	2300      	movs	r3, #0
 8007432:	951b      	str	r5, [sp, #108]	; 0x6c
 8007434:	930d      	str	r3, [sp, #52]	; 0x34
 8007436:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007438:	2b00      	cmp	r3, #0
 800743a:	f040 859a 	bne.w	8007f72 <_strtod_l+0xbba>
 800743e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007440:	b1e3      	cbz	r3, 800747c <_strtod_l+0xc4>
 8007442:	4652      	mov	r2, sl
 8007444:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007448:	ec43 2b10 	vmov	d0, r2, r3
 800744c:	b021      	add	sp, #132	; 0x84
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	2a2b      	cmp	r2, #43	; 0x2b
 8007454:	d015      	beq.n	8007482 <_strtod_l+0xca>
 8007456:	2a2d      	cmp	r2, #45	; 0x2d
 8007458:	d004      	beq.n	8007464 <_strtod_l+0xac>
 800745a:	2a20      	cmp	r2, #32
 800745c:	d1ca      	bne.n	80073f4 <_strtod_l+0x3c>
 800745e:	3301      	adds	r3, #1
 8007460:	931b      	str	r3, [sp, #108]	; 0x6c
 8007462:	e7bf      	b.n	80073e4 <_strtod_l+0x2c>
 8007464:	2201      	movs	r2, #1
 8007466:	920d      	str	r2, [sp, #52]	; 0x34
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	921b      	str	r2, [sp, #108]	; 0x6c
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1c2      	bne.n	80073f8 <_strtod_l+0x40>
 8007472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007474:	961b      	str	r6, [sp, #108]	; 0x6c
 8007476:	2b00      	cmp	r3, #0
 8007478:	f040 8579 	bne.w	8007f6e <_strtod_l+0xbb6>
 800747c:	4652      	mov	r2, sl
 800747e:	465b      	mov	r3, fp
 8007480:	e7e2      	b.n	8007448 <_strtod_l+0x90>
 8007482:	2200      	movs	r2, #0
 8007484:	e7ef      	b.n	8007466 <_strtod_l+0xae>
 8007486:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007488:	b13a      	cbz	r2, 800749a <_strtod_l+0xe2>
 800748a:	2135      	movs	r1, #53	; 0x35
 800748c:	a81e      	add	r0, sp, #120	; 0x78
 800748e:	f002 fb83 	bl	8009b98 <__copybits>
 8007492:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007494:	4648      	mov	r0, r9
 8007496:	f001 ffef 	bl	8009478 <_Bfree>
 800749a:	3c01      	subs	r4, #1
 800749c:	2c04      	cmp	r4, #4
 800749e:	d806      	bhi.n	80074ae <_strtod_l+0xf6>
 80074a0:	e8df f004 	tbb	[pc, r4]
 80074a4:	1714030a 	.word	0x1714030a
 80074a8:	0a          	.byte	0x0a
 80074a9:	00          	.byte	0x00
 80074aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80074ae:	0730      	lsls	r0, r6, #28
 80074b0:	d5c1      	bpl.n	8007436 <_strtod_l+0x7e>
 80074b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80074b6:	e7be      	b.n	8007436 <_strtod_l+0x7e>
 80074b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80074bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80074be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80074ca:	e7f0      	b.n	80074ae <_strtod_l+0xf6>
 80074cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007640 <_strtod_l+0x288>
 80074d0:	e7ed      	b.n	80074ae <_strtod_l+0xf6>
 80074d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80074d6:	f04f 3aff 	mov.w	sl, #4294967295
 80074da:	e7e8      	b.n	80074ae <_strtod_l+0xf6>
 80074dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	2b30      	cmp	r3, #48	; 0x30
 80074e6:	d0f9      	beq.n	80074dc <_strtod_l+0x124>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0a4      	beq.n	8007436 <_strtod_l+0x7e>
 80074ec:	2301      	movs	r3, #1
 80074ee:	2500      	movs	r5, #0
 80074f0:	9306      	str	r3, [sp, #24]
 80074f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074f4:	9308      	str	r3, [sp, #32]
 80074f6:	9507      	str	r5, [sp, #28]
 80074f8:	9505      	str	r5, [sp, #20]
 80074fa:	220a      	movs	r2, #10
 80074fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80074fe:	7807      	ldrb	r7, [r0, #0]
 8007500:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007504:	b2d9      	uxtb	r1, r3
 8007506:	2909      	cmp	r1, #9
 8007508:	d929      	bls.n	800755e <_strtod_l+0x1a6>
 800750a:	4622      	mov	r2, r4
 800750c:	f8d8 1000 	ldr.w	r1, [r8]
 8007510:	f002 fd96 	bl	800a040 <strncmp>
 8007514:	2800      	cmp	r0, #0
 8007516:	d031      	beq.n	800757c <_strtod_l+0x1c4>
 8007518:	2000      	movs	r0, #0
 800751a:	9c05      	ldr	r4, [sp, #20]
 800751c:	9004      	str	r0, [sp, #16]
 800751e:	463b      	mov	r3, r7
 8007520:	4602      	mov	r2, r0
 8007522:	2b65      	cmp	r3, #101	; 0x65
 8007524:	d001      	beq.n	800752a <_strtod_l+0x172>
 8007526:	2b45      	cmp	r3, #69	; 0x45
 8007528:	d114      	bne.n	8007554 <_strtod_l+0x19c>
 800752a:	b924      	cbnz	r4, 8007536 <_strtod_l+0x17e>
 800752c:	b910      	cbnz	r0, 8007534 <_strtod_l+0x17c>
 800752e:	9b06      	ldr	r3, [sp, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d09e      	beq.n	8007472 <_strtod_l+0xba>
 8007534:	2400      	movs	r4, #0
 8007536:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007538:	1c73      	adds	r3, r6, #1
 800753a:	931b      	str	r3, [sp, #108]	; 0x6c
 800753c:	7873      	ldrb	r3, [r6, #1]
 800753e:	2b2b      	cmp	r3, #43	; 0x2b
 8007540:	d078      	beq.n	8007634 <_strtod_l+0x27c>
 8007542:	2b2d      	cmp	r3, #45	; 0x2d
 8007544:	d070      	beq.n	8007628 <_strtod_l+0x270>
 8007546:	f04f 0c00 	mov.w	ip, #0
 800754a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800754e:	2f09      	cmp	r7, #9
 8007550:	d97c      	bls.n	800764c <_strtod_l+0x294>
 8007552:	961b      	str	r6, [sp, #108]	; 0x6c
 8007554:	f04f 0e00 	mov.w	lr, #0
 8007558:	e09a      	b.n	8007690 <_strtod_l+0x2d8>
 800755a:	2300      	movs	r3, #0
 800755c:	e7c7      	b.n	80074ee <_strtod_l+0x136>
 800755e:	9905      	ldr	r1, [sp, #20]
 8007560:	2908      	cmp	r1, #8
 8007562:	bfdd      	ittte	le
 8007564:	9907      	ldrle	r1, [sp, #28]
 8007566:	fb02 3301 	mlale	r3, r2, r1, r3
 800756a:	9307      	strle	r3, [sp, #28]
 800756c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007570:	9b05      	ldr	r3, [sp, #20]
 8007572:	3001      	adds	r0, #1
 8007574:	3301      	adds	r3, #1
 8007576:	9305      	str	r3, [sp, #20]
 8007578:	901b      	str	r0, [sp, #108]	; 0x6c
 800757a:	e7bf      	b.n	80074fc <_strtod_l+0x144>
 800757c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800757e:	191a      	adds	r2, r3, r4
 8007580:	921b      	str	r2, [sp, #108]	; 0x6c
 8007582:	9a05      	ldr	r2, [sp, #20]
 8007584:	5d1b      	ldrb	r3, [r3, r4]
 8007586:	2a00      	cmp	r2, #0
 8007588:	d037      	beq.n	80075fa <_strtod_l+0x242>
 800758a:	9c05      	ldr	r4, [sp, #20]
 800758c:	4602      	mov	r2, r0
 800758e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007592:	2909      	cmp	r1, #9
 8007594:	d913      	bls.n	80075be <_strtod_l+0x206>
 8007596:	2101      	movs	r1, #1
 8007598:	9104      	str	r1, [sp, #16]
 800759a:	e7c2      	b.n	8007522 <_strtod_l+0x16a>
 800759c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	3001      	adds	r0, #1
 80075a6:	2b30      	cmp	r3, #48	; 0x30
 80075a8:	d0f8      	beq.n	800759c <_strtod_l+0x1e4>
 80075aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80075ae:	2a08      	cmp	r2, #8
 80075b0:	f200 84e4 	bhi.w	8007f7c <_strtod_l+0xbc4>
 80075b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80075b6:	9208      	str	r2, [sp, #32]
 80075b8:	4602      	mov	r2, r0
 80075ba:	2000      	movs	r0, #0
 80075bc:	4604      	mov	r4, r0
 80075be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80075c2:	f100 0101 	add.w	r1, r0, #1
 80075c6:	d012      	beq.n	80075ee <_strtod_l+0x236>
 80075c8:	440a      	add	r2, r1
 80075ca:	eb00 0c04 	add.w	ip, r0, r4
 80075ce:	4621      	mov	r1, r4
 80075d0:	270a      	movs	r7, #10
 80075d2:	458c      	cmp	ip, r1
 80075d4:	d113      	bne.n	80075fe <_strtod_l+0x246>
 80075d6:	1821      	adds	r1, r4, r0
 80075d8:	2908      	cmp	r1, #8
 80075da:	f104 0401 	add.w	r4, r4, #1
 80075de:	4404      	add	r4, r0
 80075e0:	dc19      	bgt.n	8007616 <_strtod_l+0x25e>
 80075e2:	9b07      	ldr	r3, [sp, #28]
 80075e4:	210a      	movs	r1, #10
 80075e6:	fb01 e303 	mla	r3, r1, r3, lr
 80075ea:	9307      	str	r3, [sp, #28]
 80075ec:	2100      	movs	r1, #0
 80075ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075f0:	1c58      	adds	r0, r3, #1
 80075f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	4608      	mov	r0, r1
 80075f8:	e7c9      	b.n	800758e <_strtod_l+0x1d6>
 80075fa:	9805      	ldr	r0, [sp, #20]
 80075fc:	e7d3      	b.n	80075a6 <_strtod_l+0x1ee>
 80075fe:	2908      	cmp	r1, #8
 8007600:	f101 0101 	add.w	r1, r1, #1
 8007604:	dc03      	bgt.n	800760e <_strtod_l+0x256>
 8007606:	9b07      	ldr	r3, [sp, #28]
 8007608:	437b      	muls	r3, r7
 800760a:	9307      	str	r3, [sp, #28]
 800760c:	e7e1      	b.n	80075d2 <_strtod_l+0x21a>
 800760e:	2910      	cmp	r1, #16
 8007610:	bfd8      	it	le
 8007612:	437d      	mulle	r5, r7
 8007614:	e7dd      	b.n	80075d2 <_strtod_l+0x21a>
 8007616:	2c10      	cmp	r4, #16
 8007618:	bfdc      	itt	le
 800761a:	210a      	movle	r1, #10
 800761c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007620:	e7e4      	b.n	80075ec <_strtod_l+0x234>
 8007622:	2301      	movs	r3, #1
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	e781      	b.n	800752c <_strtod_l+0x174>
 8007628:	f04f 0c01 	mov.w	ip, #1
 800762c:	1cb3      	adds	r3, r6, #2
 800762e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007630:	78b3      	ldrb	r3, [r6, #2]
 8007632:	e78a      	b.n	800754a <_strtod_l+0x192>
 8007634:	f04f 0c00 	mov.w	ip, #0
 8007638:	e7f8      	b.n	800762c <_strtod_l+0x274>
 800763a:	bf00      	nop
 800763c:	0800a1f0 	.word	0x0800a1f0
 8007640:	7ff00000 	.word	0x7ff00000
 8007644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007646:	1c5f      	adds	r7, r3, #1
 8007648:	971b      	str	r7, [sp, #108]	; 0x6c
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b30      	cmp	r3, #48	; 0x30
 800764e:	d0f9      	beq.n	8007644 <_strtod_l+0x28c>
 8007650:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007654:	2f08      	cmp	r7, #8
 8007656:	f63f af7d 	bhi.w	8007554 <_strtod_l+0x19c>
 800765a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800765e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007660:	930a      	str	r3, [sp, #40]	; 0x28
 8007662:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007664:	1c5f      	adds	r7, r3, #1
 8007666:	971b      	str	r7, [sp, #108]	; 0x6c
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800766e:	f1b8 0f09 	cmp.w	r8, #9
 8007672:	d937      	bls.n	80076e4 <_strtod_l+0x32c>
 8007674:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007676:	1a7f      	subs	r7, r7, r1
 8007678:	2f08      	cmp	r7, #8
 800767a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800767e:	dc37      	bgt.n	80076f0 <_strtod_l+0x338>
 8007680:	45be      	cmp	lr, r7
 8007682:	bfa8      	it	ge
 8007684:	46be      	movge	lr, r7
 8007686:	f1bc 0f00 	cmp.w	ip, #0
 800768a:	d001      	beq.n	8007690 <_strtod_l+0x2d8>
 800768c:	f1ce 0e00 	rsb	lr, lr, #0
 8007690:	2c00      	cmp	r4, #0
 8007692:	d151      	bne.n	8007738 <_strtod_l+0x380>
 8007694:	2800      	cmp	r0, #0
 8007696:	f47f aece 	bne.w	8007436 <_strtod_l+0x7e>
 800769a:	9a06      	ldr	r2, [sp, #24]
 800769c:	2a00      	cmp	r2, #0
 800769e:	f47f aeca 	bne.w	8007436 <_strtod_l+0x7e>
 80076a2:	9a04      	ldr	r2, [sp, #16]
 80076a4:	2a00      	cmp	r2, #0
 80076a6:	f47f aee4 	bne.w	8007472 <_strtod_l+0xba>
 80076aa:	2b4e      	cmp	r3, #78	; 0x4e
 80076ac:	d027      	beq.n	80076fe <_strtod_l+0x346>
 80076ae:	dc21      	bgt.n	80076f4 <_strtod_l+0x33c>
 80076b0:	2b49      	cmp	r3, #73	; 0x49
 80076b2:	f47f aede 	bne.w	8007472 <_strtod_l+0xba>
 80076b6:	49a0      	ldr	r1, [pc, #640]	; (8007938 <_strtod_l+0x580>)
 80076b8:	a81b      	add	r0, sp, #108	; 0x6c
 80076ba:	f001 fdd7 	bl	800926c <__match>
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f aed7 	beq.w	8007472 <_strtod_l+0xba>
 80076c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076c6:	499d      	ldr	r1, [pc, #628]	; (800793c <_strtod_l+0x584>)
 80076c8:	3b01      	subs	r3, #1
 80076ca:	a81b      	add	r0, sp, #108	; 0x6c
 80076cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80076ce:	f001 fdcd 	bl	800926c <__match>
 80076d2:	b910      	cbnz	r0, 80076da <_strtod_l+0x322>
 80076d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076d6:	3301      	adds	r3, #1
 80076d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80076da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007950 <_strtod_l+0x598>
 80076de:	f04f 0a00 	mov.w	sl, #0
 80076e2:	e6a8      	b.n	8007436 <_strtod_l+0x7e>
 80076e4:	210a      	movs	r1, #10
 80076e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80076ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80076ee:	e7b8      	b.n	8007662 <_strtod_l+0x2aa>
 80076f0:	46be      	mov	lr, r7
 80076f2:	e7c8      	b.n	8007686 <_strtod_l+0x2ce>
 80076f4:	2b69      	cmp	r3, #105	; 0x69
 80076f6:	d0de      	beq.n	80076b6 <_strtod_l+0x2fe>
 80076f8:	2b6e      	cmp	r3, #110	; 0x6e
 80076fa:	f47f aeba 	bne.w	8007472 <_strtod_l+0xba>
 80076fe:	4990      	ldr	r1, [pc, #576]	; (8007940 <_strtod_l+0x588>)
 8007700:	a81b      	add	r0, sp, #108	; 0x6c
 8007702:	f001 fdb3 	bl	800926c <__match>
 8007706:	2800      	cmp	r0, #0
 8007708:	f43f aeb3 	beq.w	8007472 <_strtod_l+0xba>
 800770c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b28      	cmp	r3, #40	; 0x28
 8007712:	d10e      	bne.n	8007732 <_strtod_l+0x37a>
 8007714:	aa1e      	add	r2, sp, #120	; 0x78
 8007716:	498b      	ldr	r1, [pc, #556]	; (8007944 <_strtod_l+0x58c>)
 8007718:	a81b      	add	r0, sp, #108	; 0x6c
 800771a:	f001 fdbb 	bl	8009294 <__hexnan>
 800771e:	2805      	cmp	r0, #5
 8007720:	d107      	bne.n	8007732 <_strtod_l+0x37a>
 8007722:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007724:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007728:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800772c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007730:	e681      	b.n	8007436 <_strtod_l+0x7e>
 8007732:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007958 <_strtod_l+0x5a0>
 8007736:	e7d2      	b.n	80076de <_strtod_l+0x326>
 8007738:	ebae 0302 	sub.w	r3, lr, r2
 800773c:	9306      	str	r3, [sp, #24]
 800773e:	9b05      	ldr	r3, [sp, #20]
 8007740:	9807      	ldr	r0, [sp, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	bf08      	it	eq
 8007746:	4623      	moveq	r3, r4
 8007748:	2c10      	cmp	r4, #16
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	46a0      	mov	r8, r4
 800774e:	bfa8      	it	ge
 8007750:	f04f 0810 	movge.w	r8, #16
 8007754:	f7f8 feee 	bl	8000534 <__aeabi_ui2d>
 8007758:	2c09      	cmp	r4, #9
 800775a:	4682      	mov	sl, r0
 800775c:	468b      	mov	fp, r1
 800775e:	dc13      	bgt.n	8007788 <_strtod_l+0x3d0>
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f43f ae67 	beq.w	8007436 <_strtod_l+0x7e>
 8007768:	9b06      	ldr	r3, [sp, #24]
 800776a:	dd7a      	ble.n	8007862 <_strtod_l+0x4aa>
 800776c:	2b16      	cmp	r3, #22
 800776e:	dc61      	bgt.n	8007834 <_strtod_l+0x47c>
 8007770:	4a75      	ldr	r2, [pc, #468]	; (8007948 <_strtod_l+0x590>)
 8007772:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007776:	e9de 0100 	ldrd	r0, r1, [lr]
 800777a:	4652      	mov	r2, sl
 800777c:	465b      	mov	r3, fp
 800777e:	f7f8 ff53 	bl	8000628 <__aeabi_dmul>
 8007782:	4682      	mov	sl, r0
 8007784:	468b      	mov	fp, r1
 8007786:	e656      	b.n	8007436 <_strtod_l+0x7e>
 8007788:	4b6f      	ldr	r3, [pc, #444]	; (8007948 <_strtod_l+0x590>)
 800778a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800778e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007792:	f7f8 ff49 	bl	8000628 <__aeabi_dmul>
 8007796:	4606      	mov	r6, r0
 8007798:	4628      	mov	r0, r5
 800779a:	460f      	mov	r7, r1
 800779c:	f7f8 feca 	bl	8000534 <__aeabi_ui2d>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4630      	mov	r0, r6
 80077a6:	4639      	mov	r1, r7
 80077a8:	f7f8 fd88 	bl	80002bc <__adddf3>
 80077ac:	2c0f      	cmp	r4, #15
 80077ae:	4682      	mov	sl, r0
 80077b0:	468b      	mov	fp, r1
 80077b2:	ddd5      	ble.n	8007760 <_strtod_l+0x3a8>
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	eba4 0808 	sub.w	r8, r4, r8
 80077ba:	4498      	add	r8, r3
 80077bc:	f1b8 0f00 	cmp.w	r8, #0
 80077c0:	f340 8096 	ble.w	80078f0 <_strtod_l+0x538>
 80077c4:	f018 030f 	ands.w	r3, r8, #15
 80077c8:	d00a      	beq.n	80077e0 <_strtod_l+0x428>
 80077ca:	495f      	ldr	r1, [pc, #380]	; (8007948 <_strtod_l+0x590>)
 80077cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077d0:	4652      	mov	r2, sl
 80077d2:	465b      	mov	r3, fp
 80077d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d8:	f7f8 ff26 	bl	8000628 <__aeabi_dmul>
 80077dc:	4682      	mov	sl, r0
 80077de:	468b      	mov	fp, r1
 80077e0:	f038 080f 	bics.w	r8, r8, #15
 80077e4:	d073      	beq.n	80078ce <_strtod_l+0x516>
 80077e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80077ea:	dd47      	ble.n	800787c <_strtod_l+0x4c4>
 80077ec:	2400      	movs	r4, #0
 80077ee:	46a0      	mov	r8, r4
 80077f0:	9407      	str	r4, [sp, #28]
 80077f2:	9405      	str	r4, [sp, #20]
 80077f4:	2322      	movs	r3, #34	; 0x22
 80077f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007950 <_strtod_l+0x598>
 80077fa:	f8c9 3000 	str.w	r3, [r9]
 80077fe:	f04f 0a00 	mov.w	sl, #0
 8007802:	9b07      	ldr	r3, [sp, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f43f ae16 	beq.w	8007436 <_strtod_l+0x7e>
 800780a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800780c:	4648      	mov	r0, r9
 800780e:	f001 fe33 	bl	8009478 <_Bfree>
 8007812:	9905      	ldr	r1, [sp, #20]
 8007814:	4648      	mov	r0, r9
 8007816:	f001 fe2f 	bl	8009478 <_Bfree>
 800781a:	4641      	mov	r1, r8
 800781c:	4648      	mov	r0, r9
 800781e:	f001 fe2b 	bl	8009478 <_Bfree>
 8007822:	9907      	ldr	r1, [sp, #28]
 8007824:	4648      	mov	r0, r9
 8007826:	f001 fe27 	bl	8009478 <_Bfree>
 800782a:	4621      	mov	r1, r4
 800782c:	4648      	mov	r0, r9
 800782e:	f001 fe23 	bl	8009478 <_Bfree>
 8007832:	e600      	b.n	8007436 <_strtod_l+0x7e>
 8007834:	9a06      	ldr	r2, [sp, #24]
 8007836:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800783a:	4293      	cmp	r3, r2
 800783c:	dbba      	blt.n	80077b4 <_strtod_l+0x3fc>
 800783e:	4d42      	ldr	r5, [pc, #264]	; (8007948 <_strtod_l+0x590>)
 8007840:	f1c4 040f 	rsb	r4, r4, #15
 8007844:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007848:	4652      	mov	r2, sl
 800784a:	465b      	mov	r3, fp
 800784c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007850:	f7f8 feea 	bl	8000628 <__aeabi_dmul>
 8007854:	9b06      	ldr	r3, [sp, #24]
 8007856:	1b1c      	subs	r4, r3, r4
 8007858:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800785c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007860:	e78d      	b.n	800777e <_strtod_l+0x3c6>
 8007862:	f113 0f16 	cmn.w	r3, #22
 8007866:	dba5      	blt.n	80077b4 <_strtod_l+0x3fc>
 8007868:	4a37      	ldr	r2, [pc, #220]	; (8007948 <_strtod_l+0x590>)
 800786a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800786e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007872:	4650      	mov	r0, sl
 8007874:	4659      	mov	r1, fp
 8007876:	f7f9 f801 	bl	800087c <__aeabi_ddiv>
 800787a:	e782      	b.n	8007782 <_strtod_l+0x3ca>
 800787c:	2300      	movs	r3, #0
 800787e:	4e33      	ldr	r6, [pc, #204]	; (800794c <_strtod_l+0x594>)
 8007880:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007884:	4650      	mov	r0, sl
 8007886:	4659      	mov	r1, fp
 8007888:	461d      	mov	r5, r3
 800788a:	f1b8 0f01 	cmp.w	r8, #1
 800788e:	dc21      	bgt.n	80078d4 <_strtod_l+0x51c>
 8007890:	b10b      	cbz	r3, 8007896 <_strtod_l+0x4de>
 8007892:	4682      	mov	sl, r0
 8007894:	468b      	mov	fp, r1
 8007896:	4b2d      	ldr	r3, [pc, #180]	; (800794c <_strtod_l+0x594>)
 8007898:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800789c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80078a0:	4652      	mov	r2, sl
 80078a2:	465b      	mov	r3, fp
 80078a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80078a8:	f7f8 febe 	bl	8000628 <__aeabi_dmul>
 80078ac:	4b28      	ldr	r3, [pc, #160]	; (8007950 <_strtod_l+0x598>)
 80078ae:	460a      	mov	r2, r1
 80078b0:	400b      	ands	r3, r1
 80078b2:	4928      	ldr	r1, [pc, #160]	; (8007954 <_strtod_l+0x59c>)
 80078b4:	428b      	cmp	r3, r1
 80078b6:	4682      	mov	sl, r0
 80078b8:	d898      	bhi.n	80077ec <_strtod_l+0x434>
 80078ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078be:	428b      	cmp	r3, r1
 80078c0:	bf86      	itte	hi
 80078c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800795c <_strtod_l+0x5a4>
 80078c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80078ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80078ce:	2300      	movs	r3, #0
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	e077      	b.n	80079c4 <_strtod_l+0x60c>
 80078d4:	f018 0f01 	tst.w	r8, #1
 80078d8:	d006      	beq.n	80078e8 <_strtod_l+0x530>
 80078da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 fea1 	bl	8000628 <__aeabi_dmul>
 80078e6:	2301      	movs	r3, #1
 80078e8:	3501      	adds	r5, #1
 80078ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078ee:	e7cc      	b.n	800788a <_strtod_l+0x4d2>
 80078f0:	d0ed      	beq.n	80078ce <_strtod_l+0x516>
 80078f2:	f1c8 0800 	rsb	r8, r8, #0
 80078f6:	f018 020f 	ands.w	r2, r8, #15
 80078fa:	d00a      	beq.n	8007912 <_strtod_l+0x55a>
 80078fc:	4b12      	ldr	r3, [pc, #72]	; (8007948 <_strtod_l+0x590>)
 80078fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007902:	4650      	mov	r0, sl
 8007904:	4659      	mov	r1, fp
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f7f8 ffb7 	bl	800087c <__aeabi_ddiv>
 800790e:	4682      	mov	sl, r0
 8007910:	468b      	mov	fp, r1
 8007912:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007916:	d0da      	beq.n	80078ce <_strtod_l+0x516>
 8007918:	f1b8 0f1f 	cmp.w	r8, #31
 800791c:	dd20      	ble.n	8007960 <_strtod_l+0x5a8>
 800791e:	2400      	movs	r4, #0
 8007920:	46a0      	mov	r8, r4
 8007922:	9407      	str	r4, [sp, #28]
 8007924:	9405      	str	r4, [sp, #20]
 8007926:	2322      	movs	r3, #34	; 0x22
 8007928:	f04f 0a00 	mov.w	sl, #0
 800792c:	f04f 0b00 	mov.w	fp, #0
 8007930:	f8c9 3000 	str.w	r3, [r9]
 8007934:	e765      	b.n	8007802 <_strtod_l+0x44a>
 8007936:	bf00      	nop
 8007938:	0800a1b9 	.word	0x0800a1b9
 800793c:	0800a243 	.word	0x0800a243
 8007940:	0800a1c1 	.word	0x0800a1c1
 8007944:	0800a204 	.word	0x0800a204
 8007948:	0800a280 	.word	0x0800a280
 800794c:	0800a258 	.word	0x0800a258
 8007950:	7ff00000 	.word	0x7ff00000
 8007954:	7ca00000 	.word	0x7ca00000
 8007958:	fff80000 	.word	0xfff80000
 800795c:	7fefffff 	.word	0x7fefffff
 8007960:	f018 0310 	ands.w	r3, r8, #16
 8007964:	bf18      	it	ne
 8007966:	236a      	movne	r3, #106	; 0x6a
 8007968:	4da0      	ldr	r5, [pc, #640]	; (8007bec <_strtod_l+0x834>)
 800796a:	9304      	str	r3, [sp, #16]
 800796c:	4650      	mov	r0, sl
 800796e:	4659      	mov	r1, fp
 8007970:	2300      	movs	r3, #0
 8007972:	f1b8 0f00 	cmp.w	r8, #0
 8007976:	f300 810a 	bgt.w	8007b8e <_strtod_l+0x7d6>
 800797a:	b10b      	cbz	r3, 8007980 <_strtod_l+0x5c8>
 800797c:	4682      	mov	sl, r0
 800797e:	468b      	mov	fp, r1
 8007980:	9b04      	ldr	r3, [sp, #16]
 8007982:	b1bb      	cbz	r3, 80079b4 <_strtod_l+0x5fc>
 8007984:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007988:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800798c:	2b00      	cmp	r3, #0
 800798e:	4659      	mov	r1, fp
 8007990:	dd10      	ble.n	80079b4 <_strtod_l+0x5fc>
 8007992:	2b1f      	cmp	r3, #31
 8007994:	f340 8107 	ble.w	8007ba6 <_strtod_l+0x7ee>
 8007998:	2b34      	cmp	r3, #52	; 0x34
 800799a:	bfde      	ittt	le
 800799c:	3b20      	suble	r3, #32
 800799e:	f04f 32ff 	movle.w	r2, #4294967295
 80079a2:	fa02 f303 	lslle.w	r3, r2, r3
 80079a6:	f04f 0a00 	mov.w	sl, #0
 80079aa:	bfcc      	ite	gt
 80079ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80079b0:	ea03 0b01 	andle.w	fp, r3, r1
 80079b4:	2200      	movs	r2, #0
 80079b6:	2300      	movs	r3, #0
 80079b8:	4650      	mov	r0, sl
 80079ba:	4659      	mov	r1, fp
 80079bc:	f7f9 f89c 	bl	8000af8 <__aeabi_dcmpeq>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d1ac      	bne.n	800791e <_strtod_l+0x566>
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	9a05      	ldr	r2, [sp, #20]
 80079ca:	9908      	ldr	r1, [sp, #32]
 80079cc:	4623      	mov	r3, r4
 80079ce:	4648      	mov	r0, r9
 80079d0:	f001 fda4 	bl	800951c <__s2b>
 80079d4:	9007      	str	r0, [sp, #28]
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f43f af08 	beq.w	80077ec <_strtod_l+0x434>
 80079dc:	9a06      	ldr	r2, [sp, #24]
 80079de:	9b06      	ldr	r3, [sp, #24]
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	f1c3 0300 	rsb	r3, r3, #0
 80079e6:	bfa8      	it	ge
 80079e8:	2300      	movge	r3, #0
 80079ea:	930e      	str	r3, [sp, #56]	; 0x38
 80079ec:	2400      	movs	r4, #0
 80079ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079f2:	9316      	str	r3, [sp, #88]	; 0x58
 80079f4:	46a0      	mov	r8, r4
 80079f6:	9b07      	ldr	r3, [sp, #28]
 80079f8:	4648      	mov	r0, r9
 80079fa:	6859      	ldr	r1, [r3, #4]
 80079fc:	f001 fd08 	bl	8009410 <_Balloc>
 8007a00:	9005      	str	r0, [sp, #20]
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f43f aef6 	beq.w	80077f4 <_strtod_l+0x43c>
 8007a08:	9b07      	ldr	r3, [sp, #28]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	3202      	adds	r2, #2
 8007a0e:	f103 010c 	add.w	r1, r3, #12
 8007a12:	0092      	lsls	r2, r2, #2
 8007a14:	300c      	adds	r0, #12
 8007a16:	f7fe fe39 	bl	800668c <memcpy>
 8007a1a:	aa1e      	add	r2, sp, #120	; 0x78
 8007a1c:	a91d      	add	r1, sp, #116	; 0x74
 8007a1e:	ec4b ab10 	vmov	d0, sl, fp
 8007a22:	4648      	mov	r0, r9
 8007a24:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007a28:	f002 f834 	bl	8009a94 <__d2b>
 8007a2c:	901c      	str	r0, [sp, #112]	; 0x70
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f aee0 	beq.w	80077f4 <_strtod_l+0x43c>
 8007a34:	2101      	movs	r1, #1
 8007a36:	4648      	mov	r0, r9
 8007a38:	f001 fdfc 	bl	8009634 <__i2b>
 8007a3c:	4680      	mov	r8, r0
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f43f aed8 	beq.w	80077f4 <_strtod_l+0x43c>
 8007a44:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007a46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a48:	2e00      	cmp	r6, #0
 8007a4a:	bfab      	itete	ge
 8007a4c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007a4e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007a50:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007a52:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007a54:	bfac      	ite	ge
 8007a56:	18f7      	addge	r7, r6, r3
 8007a58:	1b9d      	sublt	r5, r3, r6
 8007a5a:	9b04      	ldr	r3, [sp, #16]
 8007a5c:	1af6      	subs	r6, r6, r3
 8007a5e:	4416      	add	r6, r2
 8007a60:	4b63      	ldr	r3, [pc, #396]	; (8007bf0 <_strtod_l+0x838>)
 8007a62:	3e01      	subs	r6, #1
 8007a64:	429e      	cmp	r6, r3
 8007a66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a6a:	f280 80af 	bge.w	8007bcc <_strtod_l+0x814>
 8007a6e:	1b9b      	subs	r3, r3, r6
 8007a70:	2b1f      	cmp	r3, #31
 8007a72:	eba2 0203 	sub.w	r2, r2, r3
 8007a76:	f04f 0101 	mov.w	r1, #1
 8007a7a:	f300 809b 	bgt.w	8007bb4 <_strtod_l+0x7fc>
 8007a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a82:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a84:	2300      	movs	r3, #0
 8007a86:	930a      	str	r3, [sp, #40]	; 0x28
 8007a88:	18be      	adds	r6, r7, r2
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	42b7      	cmp	r7, r6
 8007a8e:	4415      	add	r5, r2
 8007a90:	441d      	add	r5, r3
 8007a92:	463b      	mov	r3, r7
 8007a94:	bfa8      	it	ge
 8007a96:	4633      	movge	r3, r6
 8007a98:	42ab      	cmp	r3, r5
 8007a9a:	bfa8      	it	ge
 8007a9c:	462b      	movge	r3, r5
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfc2      	ittt	gt
 8007aa2:	1af6      	subgt	r6, r6, r3
 8007aa4:	1aed      	subgt	r5, r5, r3
 8007aa6:	1aff      	subgt	r7, r7, r3
 8007aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aaa:	b1bb      	cbz	r3, 8007adc <_strtod_l+0x724>
 8007aac:	4641      	mov	r1, r8
 8007aae:	461a      	mov	r2, r3
 8007ab0:	4648      	mov	r0, r9
 8007ab2:	f001 fe5f 	bl	8009774 <__pow5mult>
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	f43f ae9b 	beq.w	80077f4 <_strtod_l+0x43c>
 8007abe:	4601      	mov	r1, r0
 8007ac0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ac2:	4648      	mov	r0, r9
 8007ac4:	f001 fdbf 	bl	8009646 <__multiply>
 8007ac8:	900c      	str	r0, [sp, #48]	; 0x30
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f43f ae92 	beq.w	80077f4 <_strtod_l+0x43c>
 8007ad0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ad2:	4648      	mov	r0, r9
 8007ad4:	f001 fcd0 	bl	8009478 <_Bfree>
 8007ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ada:	931c      	str	r3, [sp, #112]	; 0x70
 8007adc:	2e00      	cmp	r6, #0
 8007ade:	dc7a      	bgt.n	8007bd6 <_strtod_l+0x81e>
 8007ae0:	9b06      	ldr	r3, [sp, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dd08      	ble.n	8007af8 <_strtod_l+0x740>
 8007ae6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ae8:	9905      	ldr	r1, [sp, #20]
 8007aea:	4648      	mov	r0, r9
 8007aec:	f001 fe42 	bl	8009774 <__pow5mult>
 8007af0:	9005      	str	r0, [sp, #20]
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f43f ae7e 	beq.w	80077f4 <_strtod_l+0x43c>
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	dd08      	ble.n	8007b0e <_strtod_l+0x756>
 8007afc:	462a      	mov	r2, r5
 8007afe:	9905      	ldr	r1, [sp, #20]
 8007b00:	4648      	mov	r0, r9
 8007b02:	f001 fe85 	bl	8009810 <__lshift>
 8007b06:	9005      	str	r0, [sp, #20]
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f43f ae73 	beq.w	80077f4 <_strtod_l+0x43c>
 8007b0e:	2f00      	cmp	r7, #0
 8007b10:	dd08      	ble.n	8007b24 <_strtod_l+0x76c>
 8007b12:	4641      	mov	r1, r8
 8007b14:	463a      	mov	r2, r7
 8007b16:	4648      	mov	r0, r9
 8007b18:	f001 fe7a 	bl	8009810 <__lshift>
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f43f ae68 	beq.w	80077f4 <_strtod_l+0x43c>
 8007b24:	9a05      	ldr	r2, [sp, #20]
 8007b26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b28:	4648      	mov	r0, r9
 8007b2a:	f001 fedf 	bl	80098ec <__mdiff>
 8007b2e:	4604      	mov	r4, r0
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f43f ae5f 	beq.w	80077f4 <_strtod_l+0x43c>
 8007b36:	68c3      	ldr	r3, [r0, #12]
 8007b38:	930c      	str	r3, [sp, #48]	; 0x30
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60c3      	str	r3, [r0, #12]
 8007b3e:	4641      	mov	r1, r8
 8007b40:	f001 feba 	bl	80098b8 <__mcmp>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	da55      	bge.n	8007bf4 <_strtod_l+0x83c>
 8007b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4a:	b9e3      	cbnz	r3, 8007b86 <_strtod_l+0x7ce>
 8007b4c:	f1ba 0f00 	cmp.w	sl, #0
 8007b50:	d119      	bne.n	8007b86 <_strtod_l+0x7ce>
 8007b52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b56:	b9b3      	cbnz	r3, 8007b86 <_strtod_l+0x7ce>
 8007b58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b5c:	0d1b      	lsrs	r3, r3, #20
 8007b5e:	051b      	lsls	r3, r3, #20
 8007b60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b64:	d90f      	bls.n	8007b86 <_strtod_l+0x7ce>
 8007b66:	6963      	ldr	r3, [r4, #20]
 8007b68:	b913      	cbnz	r3, 8007b70 <_strtod_l+0x7b8>
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	dd0a      	ble.n	8007b86 <_strtod_l+0x7ce>
 8007b70:	4621      	mov	r1, r4
 8007b72:	2201      	movs	r2, #1
 8007b74:	4648      	mov	r0, r9
 8007b76:	f001 fe4b 	bl	8009810 <__lshift>
 8007b7a:	4641      	mov	r1, r8
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	f001 fe9b 	bl	80098b8 <__mcmp>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	dc67      	bgt.n	8007c56 <_strtod_l+0x89e>
 8007b86:	9b04      	ldr	r3, [sp, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d171      	bne.n	8007c70 <_strtod_l+0x8b8>
 8007b8c:	e63d      	b.n	800780a <_strtod_l+0x452>
 8007b8e:	f018 0f01 	tst.w	r8, #1
 8007b92:	d004      	beq.n	8007b9e <_strtod_l+0x7e6>
 8007b94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b98:	f7f8 fd46 	bl	8000628 <__aeabi_dmul>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ba2:	3508      	adds	r5, #8
 8007ba4:	e6e5      	b.n	8007972 <_strtod_l+0x5ba>
 8007ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	ea03 0a0a 	and.w	sl, r3, sl
 8007bb2:	e6ff      	b.n	80079b4 <_strtod_l+0x5fc>
 8007bb4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007bb8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007bbc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007bc0:	36e2      	adds	r6, #226	; 0xe2
 8007bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8007bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bc8:	910f      	str	r1, [sp, #60]	; 0x3c
 8007bca:	e75d      	b.n	8007a88 <_strtod_l+0x6d0>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	930a      	str	r3, [sp, #40]	; 0x28
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bd4:	e758      	b.n	8007a88 <_strtod_l+0x6d0>
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bda:	4648      	mov	r0, r9
 8007bdc:	f001 fe18 	bl	8009810 <__lshift>
 8007be0:	901c      	str	r0, [sp, #112]	; 0x70
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f47f af7c 	bne.w	8007ae0 <_strtod_l+0x728>
 8007be8:	e604      	b.n	80077f4 <_strtod_l+0x43c>
 8007bea:	bf00      	nop
 8007bec:	0800a218 	.word	0x0800a218
 8007bf0:	fffffc02 	.word	0xfffffc02
 8007bf4:	465d      	mov	r5, fp
 8007bf6:	f040 8086 	bne.w	8007d06 <_strtod_l+0x94e>
 8007bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c00:	b32a      	cbz	r2, 8007c4e <_strtod_l+0x896>
 8007c02:	4aaf      	ldr	r2, [pc, #700]	; (8007ec0 <_strtod_l+0xb08>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d153      	bne.n	8007cb0 <_strtod_l+0x8f8>
 8007c08:	9b04      	ldr	r3, [sp, #16]
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	b1d3      	cbz	r3, 8007c44 <_strtod_l+0x88c>
 8007c0e:	4aad      	ldr	r2, [pc, #692]	; (8007ec4 <_strtod_l+0xb0c>)
 8007c10:	402a      	ands	r2, r5
 8007c12:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007c16:	f04f 31ff 	mov.w	r1, #4294967295
 8007c1a:	d816      	bhi.n	8007c4a <_strtod_l+0x892>
 8007c1c:	0d12      	lsrs	r2, r2, #20
 8007c1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c22:	fa01 f303 	lsl.w	r3, r1, r3
 8007c26:	4298      	cmp	r0, r3
 8007c28:	d142      	bne.n	8007cb0 <_strtod_l+0x8f8>
 8007c2a:	4ba7      	ldr	r3, [pc, #668]	; (8007ec8 <_strtod_l+0xb10>)
 8007c2c:	429d      	cmp	r5, r3
 8007c2e:	d102      	bne.n	8007c36 <_strtod_l+0x87e>
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f addf 	beq.w	80077f4 <_strtod_l+0x43c>
 8007c36:	4ba3      	ldr	r3, [pc, #652]	; (8007ec4 <_strtod_l+0xb0c>)
 8007c38:	402b      	ands	r3, r5
 8007c3a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007c3e:	f04f 0a00 	mov.w	sl, #0
 8007c42:	e7a0      	b.n	8007b86 <_strtod_l+0x7ce>
 8007c44:	f04f 33ff 	mov.w	r3, #4294967295
 8007c48:	e7ed      	b.n	8007c26 <_strtod_l+0x86e>
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	e7eb      	b.n	8007c26 <_strtod_l+0x86e>
 8007c4e:	bb7b      	cbnz	r3, 8007cb0 <_strtod_l+0x8f8>
 8007c50:	f1ba 0f00 	cmp.w	sl, #0
 8007c54:	d12c      	bne.n	8007cb0 <_strtod_l+0x8f8>
 8007c56:	9904      	ldr	r1, [sp, #16]
 8007c58:	4a9a      	ldr	r2, [pc, #616]	; (8007ec4 <_strtod_l+0xb0c>)
 8007c5a:	465b      	mov	r3, fp
 8007c5c:	b1f1      	cbz	r1, 8007c9c <_strtod_l+0x8e4>
 8007c5e:	ea02 010b 	and.w	r1, r2, fp
 8007c62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c66:	dc19      	bgt.n	8007c9c <_strtod_l+0x8e4>
 8007c68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c6c:	f77f ae5b 	ble.w	8007926 <_strtod_l+0x56e>
 8007c70:	4a96      	ldr	r2, [pc, #600]	; (8007ecc <_strtod_l+0xb14>)
 8007c72:	2300      	movs	r3, #0
 8007c74:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007c78:	4650      	mov	r0, sl
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c80:	f7f8 fcd2 	bl	8000628 <__aeabi_dmul>
 8007c84:	4682      	mov	sl, r0
 8007c86:	468b      	mov	fp, r1
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	f47f adbe 	bne.w	800780a <_strtod_l+0x452>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f47f adbb 	bne.w	800780a <_strtod_l+0x452>
 8007c94:	2322      	movs	r3, #34	; 0x22
 8007c96:	f8c9 3000 	str.w	r3, [r9]
 8007c9a:	e5b6      	b.n	800780a <_strtod_l+0x452>
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ca2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007ca6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007caa:	f04f 3aff 	mov.w	sl, #4294967295
 8007cae:	e76a      	b.n	8007b86 <_strtod_l+0x7ce>
 8007cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb2:	b193      	cbz	r3, 8007cda <_strtod_l+0x922>
 8007cb4:	422b      	tst	r3, r5
 8007cb6:	f43f af66 	beq.w	8007b86 <_strtod_l+0x7ce>
 8007cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cbc:	9a04      	ldr	r2, [sp, #16]
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	4659      	mov	r1, fp
 8007cc2:	b173      	cbz	r3, 8007ce2 <_strtod_l+0x92a>
 8007cc4:	f7ff fb5a 	bl	800737c <sulp>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cd0:	f7f8 faf4 	bl	80002bc <__adddf3>
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	468b      	mov	fp, r1
 8007cd8:	e755      	b.n	8007b86 <_strtod_l+0x7ce>
 8007cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cdc:	ea13 0f0a 	tst.w	r3, sl
 8007ce0:	e7e9      	b.n	8007cb6 <_strtod_l+0x8fe>
 8007ce2:	f7ff fb4b 	bl	800737c <sulp>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cee:	f7f8 fae3 	bl	80002b8 <__aeabi_dsub>
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	f7f8 fefd 	bl	8000af8 <__aeabi_dcmpeq>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f47f ae11 	bne.w	8007926 <_strtod_l+0x56e>
 8007d04:	e73f      	b.n	8007b86 <_strtod_l+0x7ce>
 8007d06:	4641      	mov	r1, r8
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f001 ff12 	bl	8009b32 <__ratio>
 8007d0e:	ec57 6b10 	vmov	r6, r7, d0
 8007d12:	2200      	movs	r2, #0
 8007d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d18:	ee10 0a10 	vmov	r0, s0
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7f8 feff 	bl	8000b20 <__aeabi_dcmple>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d077      	beq.n	8007e16 <_strtod_l+0xa5e>
 8007d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d04a      	beq.n	8007dc2 <_strtod_l+0xa0a>
 8007d2c:	4b68      	ldr	r3, [pc, #416]	; (8007ed0 <_strtod_l+0xb18>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d34:	4f66      	ldr	r7, [pc, #408]	; (8007ed0 <_strtod_l+0xb18>)
 8007d36:	2600      	movs	r6, #0
 8007d38:	4b62      	ldr	r3, [pc, #392]	; (8007ec4 <_strtod_l+0xb0c>)
 8007d3a:	402b      	ands	r3, r5
 8007d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d40:	4b64      	ldr	r3, [pc, #400]	; (8007ed4 <_strtod_l+0xb1c>)
 8007d42:	429a      	cmp	r2, r3
 8007d44:	f040 80ce 	bne.w	8007ee4 <_strtod_l+0xb2c>
 8007d48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d50:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007d54:	ec4b ab10 	vmov	d0, sl, fp
 8007d58:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d60:	f001 fe22 	bl	80099a8 <__ulp>
 8007d64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d68:	ec53 2b10 	vmov	r2, r3, d0
 8007d6c:	f7f8 fc5c 	bl	8000628 <__aeabi_dmul>
 8007d70:	4652      	mov	r2, sl
 8007d72:	465b      	mov	r3, fp
 8007d74:	f7f8 faa2 	bl	80002bc <__adddf3>
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4952      	ldr	r1, [pc, #328]	; (8007ec4 <_strtod_l+0xb0c>)
 8007d7c:	4a56      	ldr	r2, [pc, #344]	; (8007ed8 <_strtod_l+0xb20>)
 8007d7e:	4019      	ands	r1, r3
 8007d80:	4291      	cmp	r1, r2
 8007d82:	4682      	mov	sl, r0
 8007d84:	d95b      	bls.n	8007e3e <_strtod_l+0xa86>
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d103      	bne.n	8007d98 <_strtod_l+0x9e0>
 8007d90:	9b08      	ldr	r3, [sp, #32]
 8007d92:	3301      	adds	r3, #1
 8007d94:	f43f ad2e 	beq.w	80077f4 <_strtod_l+0x43c>
 8007d98:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007ec8 <_strtod_l+0xb10>
 8007d9c:	f04f 3aff 	mov.w	sl, #4294967295
 8007da0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007da2:	4648      	mov	r0, r9
 8007da4:	f001 fb68 	bl	8009478 <_Bfree>
 8007da8:	9905      	ldr	r1, [sp, #20]
 8007daa:	4648      	mov	r0, r9
 8007dac:	f001 fb64 	bl	8009478 <_Bfree>
 8007db0:	4641      	mov	r1, r8
 8007db2:	4648      	mov	r0, r9
 8007db4:	f001 fb60 	bl	8009478 <_Bfree>
 8007db8:	4621      	mov	r1, r4
 8007dba:	4648      	mov	r0, r9
 8007dbc:	f001 fb5c 	bl	8009478 <_Bfree>
 8007dc0:	e619      	b.n	80079f6 <_strtod_l+0x63e>
 8007dc2:	f1ba 0f00 	cmp.w	sl, #0
 8007dc6:	d11a      	bne.n	8007dfe <_strtod_l+0xa46>
 8007dc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dcc:	b9eb      	cbnz	r3, 8007e0a <_strtod_l+0xa52>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4b3f      	ldr	r3, [pc, #252]	; (8007ed0 <_strtod_l+0xb18>)
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fe99 	bl	8000b0c <__aeabi_dcmplt>
 8007dda:	b9c8      	cbnz	r0, 8007e10 <_strtod_l+0xa58>
 8007ddc:	4630      	mov	r0, r6
 8007dde:	4639      	mov	r1, r7
 8007de0:	2200      	movs	r2, #0
 8007de2:	4b3e      	ldr	r3, [pc, #248]	; (8007edc <_strtod_l+0xb24>)
 8007de4:	f7f8 fc20 	bl	8000628 <__aeabi_dmul>
 8007de8:	4606      	mov	r6, r0
 8007dea:	460f      	mov	r7, r1
 8007dec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007df0:	9618      	str	r6, [sp, #96]	; 0x60
 8007df2:	9319      	str	r3, [sp, #100]	; 0x64
 8007df4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007df8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007dfc:	e79c      	b.n	8007d38 <_strtod_l+0x980>
 8007dfe:	f1ba 0f01 	cmp.w	sl, #1
 8007e02:	d102      	bne.n	8007e0a <_strtod_l+0xa52>
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	f43f ad8e 	beq.w	8007926 <_strtod_l+0x56e>
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	4b34      	ldr	r3, [pc, #208]	; (8007ee0 <_strtod_l+0xb28>)
 8007e0e:	e78f      	b.n	8007d30 <_strtod_l+0x978>
 8007e10:	2600      	movs	r6, #0
 8007e12:	4f32      	ldr	r7, [pc, #200]	; (8007edc <_strtod_l+0xb24>)
 8007e14:	e7ea      	b.n	8007dec <_strtod_l+0xa34>
 8007e16:	4b31      	ldr	r3, [pc, #196]	; (8007edc <_strtod_l+0xb24>)
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f7f8 fc03 	bl	8000628 <__aeabi_dmul>
 8007e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e24:	4606      	mov	r6, r0
 8007e26:	460f      	mov	r7, r1
 8007e28:	b933      	cbnz	r3, 8007e38 <_strtod_l+0xa80>
 8007e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e2e:	9010      	str	r0, [sp, #64]	; 0x40
 8007e30:	9311      	str	r3, [sp, #68]	; 0x44
 8007e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e36:	e7df      	b.n	8007df8 <_strtod_l+0xa40>
 8007e38:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007e3c:	e7f9      	b.n	8007e32 <_strtod_l+0xa7a>
 8007e3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1ab      	bne.n	8007da0 <_strtod_l+0x9e8>
 8007e48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e4c:	0d1b      	lsrs	r3, r3, #20
 8007e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e50:	051b      	lsls	r3, r3, #20
 8007e52:	429a      	cmp	r2, r3
 8007e54:	465d      	mov	r5, fp
 8007e56:	d1a3      	bne.n	8007da0 <_strtod_l+0x9e8>
 8007e58:	4639      	mov	r1, r7
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f7f8 fe94 	bl	8000b88 <__aeabi_d2iz>
 8007e60:	f7f8 fb78 	bl	8000554 <__aeabi_i2d>
 8007e64:	460b      	mov	r3, r1
 8007e66:	4602      	mov	r2, r0
 8007e68:	4639      	mov	r1, r7
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7f8 fa24 	bl	80002b8 <__aeabi_dsub>
 8007e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e72:	4606      	mov	r6, r0
 8007e74:	460f      	mov	r7, r1
 8007e76:	b933      	cbnz	r3, 8007e86 <_strtod_l+0xace>
 8007e78:	f1ba 0f00 	cmp.w	sl, #0
 8007e7c:	d103      	bne.n	8007e86 <_strtod_l+0xace>
 8007e7e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	d06d      	beq.n	8007f62 <_strtod_l+0xbaa>
 8007e86:	a30a      	add	r3, pc, #40	; (adr r3, 8007eb0 <_strtod_l+0xaf8>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fe3c 	bl	8000b0c <__aeabi_dcmplt>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	f47f acb8 	bne.w	800780a <_strtod_l+0x452>
 8007e9a:	a307      	add	r3, pc, #28	; (adr r3, 8007eb8 <_strtod_l+0xb00>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 fe50 	bl	8000b48 <__aeabi_dcmpgt>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	f43f af79 	beq.w	8007da0 <_strtod_l+0x9e8>
 8007eae:	e4ac      	b.n	800780a <_strtod_l+0x452>
 8007eb0:	94a03595 	.word	0x94a03595
 8007eb4:	3fdfffff 	.word	0x3fdfffff
 8007eb8:	35afe535 	.word	0x35afe535
 8007ebc:	3fe00000 	.word	0x3fe00000
 8007ec0:	000fffff 	.word	0x000fffff
 8007ec4:	7ff00000 	.word	0x7ff00000
 8007ec8:	7fefffff 	.word	0x7fefffff
 8007ecc:	39500000 	.word	0x39500000
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	7fe00000 	.word	0x7fe00000
 8007ed8:	7c9fffff 	.word	0x7c9fffff
 8007edc:	3fe00000 	.word	0x3fe00000
 8007ee0:	bff00000 	.word	0xbff00000
 8007ee4:	9b04      	ldr	r3, [sp, #16]
 8007ee6:	b333      	cbz	r3, 8007f36 <_strtod_l+0xb7e>
 8007ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007eee:	d822      	bhi.n	8007f36 <_strtod_l+0xb7e>
 8007ef0:	a327      	add	r3, pc, #156	; (adr r3, 8007f90 <_strtod_l+0xbd8>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	4639      	mov	r1, r7
 8007efa:	f7f8 fe11 	bl	8000b20 <__aeabi_dcmple>
 8007efe:	b1a0      	cbz	r0, 8007f2a <_strtod_l+0xb72>
 8007f00:	4639      	mov	r1, r7
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7f8 fe68 	bl	8000bd8 <__aeabi_d2uiz>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	bf08      	it	eq
 8007f0c:	2001      	moveq	r0, #1
 8007f0e:	f7f8 fb11 	bl	8000534 <__aeabi_ui2d>
 8007f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f14:	4606      	mov	r6, r0
 8007f16:	460f      	mov	r7, r1
 8007f18:	bb03      	cbnz	r3, 8007f5c <_strtod_l+0xba4>
 8007f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f1e:	9012      	str	r0, [sp, #72]	; 0x48
 8007f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007f26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f36:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007f3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007f3e:	f001 fd33 	bl	80099a8 <__ulp>
 8007f42:	4650      	mov	r0, sl
 8007f44:	ec53 2b10 	vmov	r2, r3, d0
 8007f48:	4659      	mov	r1, fp
 8007f4a:	f7f8 fb6d 	bl	8000628 <__aeabi_dmul>
 8007f4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f52:	f7f8 f9b3 	bl	80002bc <__adddf3>
 8007f56:	4682      	mov	sl, r0
 8007f58:	468b      	mov	fp, r1
 8007f5a:	e772      	b.n	8007e42 <_strtod_l+0xa8a>
 8007f5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007f60:	e7df      	b.n	8007f22 <_strtod_l+0xb6a>
 8007f62:	a30d      	add	r3, pc, #52	; (adr r3, 8007f98 <_strtod_l+0xbe0>)
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f7f8 fdd0 	bl	8000b0c <__aeabi_dcmplt>
 8007f6c:	e79c      	b.n	8007ea8 <_strtod_l+0xaf0>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	930d      	str	r3, [sp, #52]	; 0x34
 8007f72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	f7ff ba61 	b.w	800743e <_strtod_l+0x86>
 8007f7c:	2b65      	cmp	r3, #101	; 0x65
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	f43f ab4e 	beq.w	8007622 <_strtod_l+0x26a>
 8007f86:	2101      	movs	r1, #1
 8007f88:	4614      	mov	r4, r2
 8007f8a:	9104      	str	r1, [sp, #16]
 8007f8c:	f7ff bacb 	b.w	8007526 <_strtod_l+0x16e>
 8007f90:	ffc00000 	.word	0xffc00000
 8007f94:	41dfffff 	.word	0x41dfffff
 8007f98:	94a03595 	.word	0x94a03595
 8007f9c:	3fcfffff 	.word	0x3fcfffff

08007fa0 <_strtod_r>:
 8007fa0:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <_strtod_r+0x18>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	b410      	push	{r4}
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	4c04      	ldr	r4, [pc, #16]	; (8007fbc <_strtod_r+0x1c>)
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	bf08      	it	eq
 8007fae:	4623      	moveq	r3, r4
 8007fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb4:	f7ff ba00 	b.w	80073b8 <_strtod_l>
 8007fb8:	200000d0 	.word	0x200000d0
 8007fbc:	20000134 	.word	0x20000134

08007fc0 <_strtol_l.isra.0>:
 8007fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	4689      	mov	r9, r1
 8007fc8:	4692      	mov	sl, r2
 8007fca:	461e      	mov	r6, r3
 8007fcc:	460f      	mov	r7, r1
 8007fce:	463d      	mov	r5, r7
 8007fd0:	9808      	ldr	r0, [sp, #32]
 8007fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fd6:	f001 f9ed 	bl	80093b4 <__locale_ctype_ptr_l>
 8007fda:	4420      	add	r0, r4
 8007fdc:	7843      	ldrb	r3, [r0, #1]
 8007fde:	f013 0308 	ands.w	r3, r3, #8
 8007fe2:	d132      	bne.n	800804a <_strtol_l.isra.0+0x8a>
 8007fe4:	2c2d      	cmp	r4, #45	; 0x2d
 8007fe6:	d132      	bne.n	800804e <_strtol_l.isra.0+0x8e>
 8007fe8:	787c      	ldrb	r4, [r7, #1]
 8007fea:	1cbd      	adds	r5, r7, #2
 8007fec:	2201      	movs	r2, #1
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	d05d      	beq.n	80080ae <_strtol_l.isra.0+0xee>
 8007ff2:	2e10      	cmp	r6, #16
 8007ff4:	d109      	bne.n	800800a <_strtol_l.isra.0+0x4a>
 8007ff6:	2c30      	cmp	r4, #48	; 0x30
 8007ff8:	d107      	bne.n	800800a <_strtol_l.isra.0+0x4a>
 8007ffa:	782b      	ldrb	r3, [r5, #0]
 8007ffc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008000:	2b58      	cmp	r3, #88	; 0x58
 8008002:	d14f      	bne.n	80080a4 <_strtol_l.isra.0+0xe4>
 8008004:	786c      	ldrb	r4, [r5, #1]
 8008006:	2610      	movs	r6, #16
 8008008:	3502      	adds	r5, #2
 800800a:	2a00      	cmp	r2, #0
 800800c:	bf14      	ite	ne
 800800e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008012:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008016:	2700      	movs	r7, #0
 8008018:	fbb1 fcf6 	udiv	ip, r1, r6
 800801c:	4638      	mov	r0, r7
 800801e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008022:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008026:	2b09      	cmp	r3, #9
 8008028:	d817      	bhi.n	800805a <_strtol_l.isra.0+0x9a>
 800802a:	461c      	mov	r4, r3
 800802c:	42a6      	cmp	r6, r4
 800802e:	dd23      	ble.n	8008078 <_strtol_l.isra.0+0xb8>
 8008030:	1c7b      	adds	r3, r7, #1
 8008032:	d007      	beq.n	8008044 <_strtol_l.isra.0+0x84>
 8008034:	4584      	cmp	ip, r0
 8008036:	d31c      	bcc.n	8008072 <_strtol_l.isra.0+0xb2>
 8008038:	d101      	bne.n	800803e <_strtol_l.isra.0+0x7e>
 800803a:	45a6      	cmp	lr, r4
 800803c:	db19      	blt.n	8008072 <_strtol_l.isra.0+0xb2>
 800803e:	fb00 4006 	mla	r0, r0, r6, r4
 8008042:	2701      	movs	r7, #1
 8008044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008048:	e7eb      	b.n	8008022 <_strtol_l.isra.0+0x62>
 800804a:	462f      	mov	r7, r5
 800804c:	e7bf      	b.n	8007fce <_strtol_l.isra.0+0xe>
 800804e:	2c2b      	cmp	r4, #43	; 0x2b
 8008050:	bf04      	itt	eq
 8008052:	1cbd      	addeq	r5, r7, #2
 8008054:	787c      	ldrbeq	r4, [r7, #1]
 8008056:	461a      	mov	r2, r3
 8008058:	e7c9      	b.n	8007fee <_strtol_l.isra.0+0x2e>
 800805a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800805e:	2b19      	cmp	r3, #25
 8008060:	d801      	bhi.n	8008066 <_strtol_l.isra.0+0xa6>
 8008062:	3c37      	subs	r4, #55	; 0x37
 8008064:	e7e2      	b.n	800802c <_strtol_l.isra.0+0x6c>
 8008066:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800806a:	2b19      	cmp	r3, #25
 800806c:	d804      	bhi.n	8008078 <_strtol_l.isra.0+0xb8>
 800806e:	3c57      	subs	r4, #87	; 0x57
 8008070:	e7dc      	b.n	800802c <_strtol_l.isra.0+0x6c>
 8008072:	f04f 37ff 	mov.w	r7, #4294967295
 8008076:	e7e5      	b.n	8008044 <_strtol_l.isra.0+0x84>
 8008078:	1c7b      	adds	r3, r7, #1
 800807a:	d108      	bne.n	800808e <_strtol_l.isra.0+0xce>
 800807c:	2322      	movs	r3, #34	; 0x22
 800807e:	f8c8 3000 	str.w	r3, [r8]
 8008082:	4608      	mov	r0, r1
 8008084:	f1ba 0f00 	cmp.w	sl, #0
 8008088:	d107      	bne.n	800809a <_strtol_l.isra.0+0xda>
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	b102      	cbz	r2, 8008092 <_strtol_l.isra.0+0xd2>
 8008090:	4240      	negs	r0, r0
 8008092:	f1ba 0f00 	cmp.w	sl, #0
 8008096:	d0f8      	beq.n	800808a <_strtol_l.isra.0+0xca>
 8008098:	b10f      	cbz	r7, 800809e <_strtol_l.isra.0+0xde>
 800809a:	f105 39ff 	add.w	r9, r5, #4294967295
 800809e:	f8ca 9000 	str.w	r9, [sl]
 80080a2:	e7f2      	b.n	800808a <_strtol_l.isra.0+0xca>
 80080a4:	2430      	movs	r4, #48	; 0x30
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	d1af      	bne.n	800800a <_strtol_l.isra.0+0x4a>
 80080aa:	2608      	movs	r6, #8
 80080ac:	e7ad      	b.n	800800a <_strtol_l.isra.0+0x4a>
 80080ae:	2c30      	cmp	r4, #48	; 0x30
 80080b0:	d0a3      	beq.n	8007ffa <_strtol_l.isra.0+0x3a>
 80080b2:	260a      	movs	r6, #10
 80080b4:	e7a9      	b.n	800800a <_strtol_l.isra.0+0x4a>
	...

080080b8 <_strtol_r>:
 80080b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ba:	4c06      	ldr	r4, [pc, #24]	; (80080d4 <_strtol_r+0x1c>)
 80080bc:	4d06      	ldr	r5, [pc, #24]	; (80080d8 <_strtol_r+0x20>)
 80080be:	6824      	ldr	r4, [r4, #0]
 80080c0:	6a24      	ldr	r4, [r4, #32]
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	bf08      	it	eq
 80080c6:	462c      	moveq	r4, r5
 80080c8:	9400      	str	r4, [sp, #0]
 80080ca:	f7ff ff79 	bl	8007fc0 <_strtol_l.isra.0>
 80080ce:	b003      	add	sp, #12
 80080d0:	bd30      	pop	{r4, r5, pc}
 80080d2:	bf00      	nop
 80080d4:	200000d0 	.word	0x200000d0
 80080d8:	20000134 	.word	0x20000134

080080dc <quorem>:
 80080dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	6903      	ldr	r3, [r0, #16]
 80080e2:	690c      	ldr	r4, [r1, #16]
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	4680      	mov	r8, r0
 80080e8:	f2c0 8082 	blt.w	80081f0 <quorem+0x114>
 80080ec:	3c01      	subs	r4, #1
 80080ee:	f101 0714 	add.w	r7, r1, #20
 80080f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80080f6:	f100 0614 	add.w	r6, r0, #20
 80080fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80080fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008102:	eb06 030c 	add.w	r3, r6, ip
 8008106:	3501      	adds	r5, #1
 8008108:	eb07 090c 	add.w	r9, r7, ip
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008112:	b395      	cbz	r5, 800817a <quorem+0x9e>
 8008114:	f04f 0a00 	mov.w	sl, #0
 8008118:	4638      	mov	r0, r7
 800811a:	46b6      	mov	lr, r6
 800811c:	46d3      	mov	fp, sl
 800811e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008122:	b293      	uxth	r3, r2
 8008124:	fb05 a303 	mla	r3, r5, r3, sl
 8008128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800812c:	b29b      	uxth	r3, r3
 800812e:	ebab 0303 	sub.w	r3, fp, r3
 8008132:	0c12      	lsrs	r2, r2, #16
 8008134:	f8de b000 	ldr.w	fp, [lr]
 8008138:	fb05 a202 	mla	r2, r5, r2, sl
 800813c:	fa13 f38b 	uxtah	r3, r3, fp
 8008140:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008144:	fa1f fb82 	uxth.w	fp, r2
 8008148:	f8de 2000 	ldr.w	r2, [lr]
 800814c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008154:	b29b      	uxth	r3, r3
 8008156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800815a:	4581      	cmp	r9, r0
 800815c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008160:	f84e 3b04 	str.w	r3, [lr], #4
 8008164:	d2db      	bcs.n	800811e <quorem+0x42>
 8008166:	f856 300c 	ldr.w	r3, [r6, ip]
 800816a:	b933      	cbnz	r3, 800817a <quorem+0x9e>
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	3b04      	subs	r3, #4
 8008170:	429e      	cmp	r6, r3
 8008172:	461a      	mov	r2, r3
 8008174:	d330      	bcc.n	80081d8 <quorem+0xfc>
 8008176:	f8c8 4010 	str.w	r4, [r8, #16]
 800817a:	4640      	mov	r0, r8
 800817c:	f001 fb9c 	bl	80098b8 <__mcmp>
 8008180:	2800      	cmp	r0, #0
 8008182:	db25      	blt.n	80081d0 <quorem+0xf4>
 8008184:	3501      	adds	r5, #1
 8008186:	4630      	mov	r0, r6
 8008188:	f04f 0c00 	mov.w	ip, #0
 800818c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008190:	f8d0 e000 	ldr.w	lr, [r0]
 8008194:	b293      	uxth	r3, r2
 8008196:	ebac 0303 	sub.w	r3, ip, r3
 800819a:	0c12      	lsrs	r2, r2, #16
 800819c:	fa13 f38e 	uxtah	r3, r3, lr
 80081a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ae:	45b9      	cmp	r9, r7
 80081b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081b4:	f840 3b04 	str.w	r3, [r0], #4
 80081b8:	d2e8      	bcs.n	800818c <quorem+0xb0>
 80081ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80081be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80081c2:	b92a      	cbnz	r2, 80081d0 <quorem+0xf4>
 80081c4:	3b04      	subs	r3, #4
 80081c6:	429e      	cmp	r6, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	d30b      	bcc.n	80081e4 <quorem+0x108>
 80081cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80081d0:	4628      	mov	r0, r5
 80081d2:	b003      	add	sp, #12
 80081d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	3b04      	subs	r3, #4
 80081dc:	2a00      	cmp	r2, #0
 80081de:	d1ca      	bne.n	8008176 <quorem+0x9a>
 80081e0:	3c01      	subs	r4, #1
 80081e2:	e7c5      	b.n	8008170 <quorem+0x94>
 80081e4:	6812      	ldr	r2, [r2, #0]
 80081e6:	3b04      	subs	r3, #4
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	d1ef      	bne.n	80081cc <quorem+0xf0>
 80081ec:	3c01      	subs	r4, #1
 80081ee:	e7ea      	b.n	80081c6 <quorem+0xea>
 80081f0:	2000      	movs	r0, #0
 80081f2:	e7ee      	b.n	80081d2 <quorem+0xf6>
 80081f4:	0000      	movs	r0, r0
	...

080081f8 <_dtoa_r>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	ec57 6b10 	vmov	r6, r7, d0
 8008200:	b097      	sub	sp, #92	; 0x5c
 8008202:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008204:	9106      	str	r1, [sp, #24]
 8008206:	4604      	mov	r4, r0
 8008208:	920b      	str	r2, [sp, #44]	; 0x2c
 800820a:	9312      	str	r3, [sp, #72]	; 0x48
 800820c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008210:	e9cd 6700 	strd	r6, r7, [sp]
 8008214:	b93d      	cbnz	r5, 8008226 <_dtoa_r+0x2e>
 8008216:	2010      	movs	r0, #16
 8008218:	f001 f8e0 	bl	80093dc <malloc>
 800821c:	6260      	str	r0, [r4, #36]	; 0x24
 800821e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008222:	6005      	str	r5, [r0, #0]
 8008224:	60c5      	str	r5, [r0, #12]
 8008226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008228:	6819      	ldr	r1, [r3, #0]
 800822a:	b151      	cbz	r1, 8008242 <_dtoa_r+0x4a>
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	604a      	str	r2, [r1, #4]
 8008230:	2301      	movs	r3, #1
 8008232:	4093      	lsls	r3, r2
 8008234:	608b      	str	r3, [r1, #8]
 8008236:	4620      	mov	r0, r4
 8008238:	f001 f91e 	bl	8009478 <_Bfree>
 800823c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	1e3b      	subs	r3, r7, #0
 8008244:	bfbb      	ittet	lt
 8008246:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800824a:	9301      	strlt	r3, [sp, #4]
 800824c:	2300      	movge	r3, #0
 800824e:	2201      	movlt	r2, #1
 8008250:	bfac      	ite	ge
 8008252:	f8c8 3000 	strge.w	r3, [r8]
 8008256:	f8c8 2000 	strlt.w	r2, [r8]
 800825a:	4baf      	ldr	r3, [pc, #700]	; (8008518 <_dtoa_r+0x320>)
 800825c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008260:	ea33 0308 	bics.w	r3, r3, r8
 8008264:	d114      	bne.n	8008290 <_dtoa_r+0x98>
 8008266:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008268:	f242 730f 	movw	r3, #9999	; 0x270f
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	9b00      	ldr	r3, [sp, #0]
 8008270:	b923      	cbnz	r3, 800827c <_dtoa_r+0x84>
 8008272:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008276:	2800      	cmp	r0, #0
 8008278:	f000 8542 	beq.w	8008d00 <_dtoa_r+0xb08>
 800827c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800827e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800852c <_dtoa_r+0x334>
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 8544 	beq.w	8008d10 <_dtoa_r+0xb18>
 8008288:	f10b 0303 	add.w	r3, fp, #3
 800828c:	f000 bd3e 	b.w	8008d0c <_dtoa_r+0xb14>
 8008290:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008294:	2200      	movs	r2, #0
 8008296:	2300      	movs	r3, #0
 8008298:	4630      	mov	r0, r6
 800829a:	4639      	mov	r1, r7
 800829c:	f7f8 fc2c 	bl	8000af8 <__aeabi_dcmpeq>
 80082a0:	4681      	mov	r9, r0
 80082a2:	b168      	cbz	r0, 80082c0 <_dtoa_r+0xc8>
 80082a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082a6:	2301      	movs	r3, #1
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8524 	beq.w	8008cfa <_dtoa_r+0xb02>
 80082b2:	4b9a      	ldr	r3, [pc, #616]	; (800851c <_dtoa_r+0x324>)
 80082b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	f000 bd28 	b.w	8008d10 <_dtoa_r+0xb18>
 80082c0:	aa14      	add	r2, sp, #80	; 0x50
 80082c2:	a915      	add	r1, sp, #84	; 0x54
 80082c4:	ec47 6b10 	vmov	d0, r6, r7
 80082c8:	4620      	mov	r0, r4
 80082ca:	f001 fbe3 	bl	8009a94 <__d2b>
 80082ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80082d2:	9004      	str	r0, [sp, #16]
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	d07c      	beq.n	80083d2 <_dtoa_r+0x1da>
 80082d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80082e0:	46b2      	mov	sl, r6
 80082e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80082e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80082ee:	2200      	movs	r2, #0
 80082f0:	4b8b      	ldr	r3, [pc, #556]	; (8008520 <_dtoa_r+0x328>)
 80082f2:	4650      	mov	r0, sl
 80082f4:	4659      	mov	r1, fp
 80082f6:	f7f7 ffdf 	bl	80002b8 <__aeabi_dsub>
 80082fa:	a381      	add	r3, pc, #516	; (adr r3, 8008500 <_dtoa_r+0x308>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f8 f992 	bl	8000628 <__aeabi_dmul>
 8008304:	a380      	add	r3, pc, #512	; (adr r3, 8008508 <_dtoa_r+0x310>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ffd7 	bl	80002bc <__adddf3>
 800830e:	4606      	mov	r6, r0
 8008310:	4628      	mov	r0, r5
 8008312:	460f      	mov	r7, r1
 8008314:	f7f8 f91e 	bl	8000554 <__aeabi_i2d>
 8008318:	a37d      	add	r3, pc, #500	; (adr r3, 8008510 <_dtoa_r+0x318>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f8 f983 	bl	8000628 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4630      	mov	r0, r6
 8008328:	4639      	mov	r1, r7
 800832a:	f7f7 ffc7 	bl	80002bc <__adddf3>
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	f7f8 fc29 	bl	8000b88 <__aeabi_d2iz>
 8008336:	2200      	movs	r2, #0
 8008338:	4682      	mov	sl, r0
 800833a:	2300      	movs	r3, #0
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	f7f8 fbe4 	bl	8000b0c <__aeabi_dcmplt>
 8008344:	b148      	cbz	r0, 800835a <_dtoa_r+0x162>
 8008346:	4650      	mov	r0, sl
 8008348:	f7f8 f904 	bl	8000554 <__aeabi_i2d>
 800834c:	4632      	mov	r2, r6
 800834e:	463b      	mov	r3, r7
 8008350:	f7f8 fbd2 	bl	8000af8 <__aeabi_dcmpeq>
 8008354:	b908      	cbnz	r0, 800835a <_dtoa_r+0x162>
 8008356:	f10a 3aff 	add.w	sl, sl, #4294967295
 800835a:	f1ba 0f16 	cmp.w	sl, #22
 800835e:	d859      	bhi.n	8008414 <_dtoa_r+0x21c>
 8008360:	4970      	ldr	r1, [pc, #448]	; (8008524 <_dtoa_r+0x32c>)
 8008362:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800836a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800836e:	f7f8 fbeb 	bl	8000b48 <__aeabi_dcmpgt>
 8008372:	2800      	cmp	r0, #0
 8008374:	d050      	beq.n	8008418 <_dtoa_r+0x220>
 8008376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800837a:	2300      	movs	r3, #0
 800837c:	930f      	str	r3, [sp, #60]	; 0x3c
 800837e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008380:	1b5d      	subs	r5, r3, r5
 8008382:	f1b5 0801 	subs.w	r8, r5, #1
 8008386:	bf49      	itett	mi
 8008388:	f1c5 0301 	rsbmi	r3, r5, #1
 800838c:	2300      	movpl	r3, #0
 800838e:	9305      	strmi	r3, [sp, #20]
 8008390:	f04f 0800 	movmi.w	r8, #0
 8008394:	bf58      	it	pl
 8008396:	9305      	strpl	r3, [sp, #20]
 8008398:	f1ba 0f00 	cmp.w	sl, #0
 800839c:	db3e      	blt.n	800841c <_dtoa_r+0x224>
 800839e:	2300      	movs	r3, #0
 80083a0:	44d0      	add	r8, sl
 80083a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80083a6:	9307      	str	r3, [sp, #28]
 80083a8:	9b06      	ldr	r3, [sp, #24]
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	f200 8090 	bhi.w	80084d0 <_dtoa_r+0x2d8>
 80083b0:	2b05      	cmp	r3, #5
 80083b2:	bfc4      	itt	gt
 80083b4:	3b04      	subgt	r3, #4
 80083b6:	9306      	strgt	r3, [sp, #24]
 80083b8:	9b06      	ldr	r3, [sp, #24]
 80083ba:	f1a3 0302 	sub.w	r3, r3, #2
 80083be:	bfcc      	ite	gt
 80083c0:	2500      	movgt	r5, #0
 80083c2:	2501      	movle	r5, #1
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	f200 808f 	bhi.w	80084e8 <_dtoa_r+0x2f0>
 80083ca:	e8df f003 	tbb	[pc, r3]
 80083ce:	7f7d      	.short	0x7f7d
 80083d0:	7131      	.short	0x7131
 80083d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80083d6:	441d      	add	r5, r3
 80083d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80083dc:	2820      	cmp	r0, #32
 80083de:	dd13      	ble.n	8008408 <_dtoa_r+0x210>
 80083e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	fa08 f800 	lsl.w	r8, r8, r0
 80083ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80083ee:	fa23 f000 	lsr.w	r0, r3, r0
 80083f2:	ea48 0000 	orr.w	r0, r8, r0
 80083f6:	f7f8 f89d 	bl	8000534 <__aeabi_ui2d>
 80083fa:	2301      	movs	r3, #1
 80083fc:	4682      	mov	sl, r0
 80083fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008402:	3d01      	subs	r5, #1
 8008404:	9313      	str	r3, [sp, #76]	; 0x4c
 8008406:	e772      	b.n	80082ee <_dtoa_r+0xf6>
 8008408:	9b00      	ldr	r3, [sp, #0]
 800840a:	f1c0 0020 	rsb	r0, r0, #32
 800840e:	fa03 f000 	lsl.w	r0, r3, r0
 8008412:	e7f0      	b.n	80083f6 <_dtoa_r+0x1fe>
 8008414:	2301      	movs	r3, #1
 8008416:	e7b1      	b.n	800837c <_dtoa_r+0x184>
 8008418:	900f      	str	r0, [sp, #60]	; 0x3c
 800841a:	e7b0      	b.n	800837e <_dtoa_r+0x186>
 800841c:	9b05      	ldr	r3, [sp, #20]
 800841e:	eba3 030a 	sub.w	r3, r3, sl
 8008422:	9305      	str	r3, [sp, #20]
 8008424:	f1ca 0300 	rsb	r3, sl, #0
 8008428:	9307      	str	r3, [sp, #28]
 800842a:	2300      	movs	r3, #0
 800842c:	930e      	str	r3, [sp, #56]	; 0x38
 800842e:	e7bb      	b.n	80083a8 <_dtoa_r+0x1b0>
 8008430:	2301      	movs	r3, #1
 8008432:	930a      	str	r3, [sp, #40]	; 0x28
 8008434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	dd59      	ble.n	80084ee <_dtoa_r+0x2f6>
 800843a:	9302      	str	r3, [sp, #8]
 800843c:	4699      	mov	r9, r3
 800843e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008440:	2200      	movs	r2, #0
 8008442:	6072      	str	r2, [r6, #4]
 8008444:	2204      	movs	r2, #4
 8008446:	f102 0014 	add.w	r0, r2, #20
 800844a:	4298      	cmp	r0, r3
 800844c:	6871      	ldr	r1, [r6, #4]
 800844e:	d953      	bls.n	80084f8 <_dtoa_r+0x300>
 8008450:	4620      	mov	r0, r4
 8008452:	f000 ffdd 	bl	8009410 <_Balloc>
 8008456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008458:	6030      	str	r0, [r6, #0]
 800845a:	f1b9 0f0e 	cmp.w	r9, #14
 800845e:	f8d3 b000 	ldr.w	fp, [r3]
 8008462:	f200 80e6 	bhi.w	8008632 <_dtoa_r+0x43a>
 8008466:	2d00      	cmp	r5, #0
 8008468:	f000 80e3 	beq.w	8008632 <_dtoa_r+0x43a>
 800846c:	ed9d 7b00 	vldr	d7, [sp]
 8008470:	f1ba 0f00 	cmp.w	sl, #0
 8008474:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008478:	dd74      	ble.n	8008564 <_dtoa_r+0x36c>
 800847a:	4a2a      	ldr	r2, [pc, #168]	; (8008524 <_dtoa_r+0x32c>)
 800847c:	f00a 030f 	and.w	r3, sl, #15
 8008480:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008484:	ed93 7b00 	vldr	d7, [r3]
 8008488:	ea4f 162a 	mov.w	r6, sl, asr #4
 800848c:	06f0      	lsls	r0, r6, #27
 800848e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008492:	d565      	bpl.n	8008560 <_dtoa_r+0x368>
 8008494:	4b24      	ldr	r3, [pc, #144]	; (8008528 <_dtoa_r+0x330>)
 8008496:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800849a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800849e:	f7f8 f9ed 	bl	800087c <__aeabi_ddiv>
 80084a2:	e9cd 0100 	strd	r0, r1, [sp]
 80084a6:	f006 060f 	and.w	r6, r6, #15
 80084aa:	2503      	movs	r5, #3
 80084ac:	4f1e      	ldr	r7, [pc, #120]	; (8008528 <_dtoa_r+0x330>)
 80084ae:	e04c      	b.n	800854a <_dtoa_r+0x352>
 80084b0:	2301      	movs	r3, #1
 80084b2:	930a      	str	r3, [sp, #40]	; 0x28
 80084b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b6:	4453      	add	r3, sl
 80084b8:	f103 0901 	add.w	r9, r3, #1
 80084bc:	9302      	str	r3, [sp, #8]
 80084be:	464b      	mov	r3, r9
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	bfb8      	it	lt
 80084c4:	2301      	movlt	r3, #1
 80084c6:	e7ba      	b.n	800843e <_dtoa_r+0x246>
 80084c8:	2300      	movs	r3, #0
 80084ca:	e7b2      	b.n	8008432 <_dtoa_r+0x23a>
 80084cc:	2300      	movs	r3, #0
 80084ce:	e7f0      	b.n	80084b2 <_dtoa_r+0x2ba>
 80084d0:	2501      	movs	r5, #1
 80084d2:	2300      	movs	r3, #0
 80084d4:	9306      	str	r3, [sp, #24]
 80084d6:	950a      	str	r5, [sp, #40]	; 0x28
 80084d8:	f04f 33ff 	mov.w	r3, #4294967295
 80084dc:	9302      	str	r3, [sp, #8]
 80084de:	4699      	mov	r9, r3
 80084e0:	2200      	movs	r2, #0
 80084e2:	2312      	movs	r3, #18
 80084e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80084e6:	e7aa      	b.n	800843e <_dtoa_r+0x246>
 80084e8:	2301      	movs	r3, #1
 80084ea:	930a      	str	r3, [sp, #40]	; 0x28
 80084ec:	e7f4      	b.n	80084d8 <_dtoa_r+0x2e0>
 80084ee:	2301      	movs	r3, #1
 80084f0:	9302      	str	r3, [sp, #8]
 80084f2:	4699      	mov	r9, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	e7f5      	b.n	80084e4 <_dtoa_r+0x2ec>
 80084f8:	3101      	adds	r1, #1
 80084fa:	6071      	str	r1, [r6, #4]
 80084fc:	0052      	lsls	r2, r2, #1
 80084fe:	e7a2      	b.n	8008446 <_dtoa_r+0x24e>
 8008500:	636f4361 	.word	0x636f4361
 8008504:	3fd287a7 	.word	0x3fd287a7
 8008508:	8b60c8b3 	.word	0x8b60c8b3
 800850c:	3fc68a28 	.word	0x3fc68a28
 8008510:	509f79fb 	.word	0x509f79fb
 8008514:	3fd34413 	.word	0x3fd34413
 8008518:	7ff00000 	.word	0x7ff00000
 800851c:	0800a1c5 	.word	0x0800a1c5
 8008520:	3ff80000 	.word	0x3ff80000
 8008524:	0800a280 	.word	0x0800a280
 8008528:	0800a258 	.word	0x0800a258
 800852c:	0800a249 	.word	0x0800a249
 8008530:	07f1      	lsls	r1, r6, #31
 8008532:	d508      	bpl.n	8008546 <_dtoa_r+0x34e>
 8008534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853c:	f7f8 f874 	bl	8000628 <__aeabi_dmul>
 8008540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008544:	3501      	adds	r5, #1
 8008546:	1076      	asrs	r6, r6, #1
 8008548:	3708      	adds	r7, #8
 800854a:	2e00      	cmp	r6, #0
 800854c:	d1f0      	bne.n	8008530 <_dtoa_r+0x338>
 800854e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008556:	f7f8 f991 	bl	800087c <__aeabi_ddiv>
 800855a:	e9cd 0100 	strd	r0, r1, [sp]
 800855e:	e01a      	b.n	8008596 <_dtoa_r+0x39e>
 8008560:	2502      	movs	r5, #2
 8008562:	e7a3      	b.n	80084ac <_dtoa_r+0x2b4>
 8008564:	f000 80a0 	beq.w	80086a8 <_dtoa_r+0x4b0>
 8008568:	f1ca 0600 	rsb	r6, sl, #0
 800856c:	4b9f      	ldr	r3, [pc, #636]	; (80087ec <_dtoa_r+0x5f4>)
 800856e:	4fa0      	ldr	r7, [pc, #640]	; (80087f0 <_dtoa_r+0x5f8>)
 8008570:	f006 020f 	and.w	r2, r6, #15
 8008574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008580:	f7f8 f852 	bl	8000628 <__aeabi_dmul>
 8008584:	e9cd 0100 	strd	r0, r1, [sp]
 8008588:	1136      	asrs	r6, r6, #4
 800858a:	2300      	movs	r3, #0
 800858c:	2502      	movs	r5, #2
 800858e:	2e00      	cmp	r6, #0
 8008590:	d17f      	bne.n	8008692 <_dtoa_r+0x49a>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e1      	bne.n	800855a <_dtoa_r+0x362>
 8008596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 8087 	beq.w	80086ac <_dtoa_r+0x4b4>
 800859e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085a2:	2200      	movs	r2, #0
 80085a4:	4b93      	ldr	r3, [pc, #588]	; (80087f4 <_dtoa_r+0x5fc>)
 80085a6:	4630      	mov	r0, r6
 80085a8:	4639      	mov	r1, r7
 80085aa:	f7f8 faaf 	bl	8000b0c <__aeabi_dcmplt>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d07c      	beq.n	80086ac <_dtoa_r+0x4b4>
 80085b2:	f1b9 0f00 	cmp.w	r9, #0
 80085b6:	d079      	beq.n	80086ac <_dtoa_r+0x4b4>
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	dd35      	ble.n	800862a <_dtoa_r+0x432>
 80085be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085c2:	9308      	str	r3, [sp, #32]
 80085c4:	4639      	mov	r1, r7
 80085c6:	2200      	movs	r2, #0
 80085c8:	4b8b      	ldr	r3, [pc, #556]	; (80087f8 <_dtoa_r+0x600>)
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7f8 f82c 	bl	8000628 <__aeabi_dmul>
 80085d0:	e9cd 0100 	strd	r0, r1, [sp]
 80085d4:	9f02      	ldr	r7, [sp, #8]
 80085d6:	3501      	adds	r5, #1
 80085d8:	4628      	mov	r0, r5
 80085da:	f7f7 ffbb 	bl	8000554 <__aeabi_i2d>
 80085de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085e2:	f7f8 f821 	bl	8000628 <__aeabi_dmul>
 80085e6:	2200      	movs	r2, #0
 80085e8:	4b84      	ldr	r3, [pc, #528]	; (80087fc <_dtoa_r+0x604>)
 80085ea:	f7f7 fe67 	bl	80002bc <__adddf3>
 80085ee:	4605      	mov	r5, r0
 80085f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80085f4:	2f00      	cmp	r7, #0
 80085f6:	d15d      	bne.n	80086b4 <_dtoa_r+0x4bc>
 80085f8:	2200      	movs	r2, #0
 80085fa:	4b81      	ldr	r3, [pc, #516]	; (8008800 <_dtoa_r+0x608>)
 80085fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008600:	f7f7 fe5a 	bl	80002b8 <__aeabi_dsub>
 8008604:	462a      	mov	r2, r5
 8008606:	4633      	mov	r3, r6
 8008608:	e9cd 0100 	strd	r0, r1, [sp]
 800860c:	f7f8 fa9c 	bl	8000b48 <__aeabi_dcmpgt>
 8008610:	2800      	cmp	r0, #0
 8008612:	f040 8288 	bne.w	8008b26 <_dtoa_r+0x92e>
 8008616:	462a      	mov	r2, r5
 8008618:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800861c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008620:	f7f8 fa74 	bl	8000b0c <__aeabi_dcmplt>
 8008624:	2800      	cmp	r0, #0
 8008626:	f040 827c 	bne.w	8008b22 <_dtoa_r+0x92a>
 800862a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800862e:	e9cd 2300 	strd	r2, r3, [sp]
 8008632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008634:	2b00      	cmp	r3, #0
 8008636:	f2c0 8150 	blt.w	80088da <_dtoa_r+0x6e2>
 800863a:	f1ba 0f0e 	cmp.w	sl, #14
 800863e:	f300 814c 	bgt.w	80088da <_dtoa_r+0x6e2>
 8008642:	4b6a      	ldr	r3, [pc, #424]	; (80087ec <_dtoa_r+0x5f4>)
 8008644:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008648:	ed93 7b00 	vldr	d7, [r3]
 800864c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864e:	2b00      	cmp	r3, #0
 8008650:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008654:	f280 80d8 	bge.w	8008808 <_dtoa_r+0x610>
 8008658:	f1b9 0f00 	cmp.w	r9, #0
 800865c:	f300 80d4 	bgt.w	8008808 <_dtoa_r+0x610>
 8008660:	f040 825e 	bne.w	8008b20 <_dtoa_r+0x928>
 8008664:	2200      	movs	r2, #0
 8008666:	4b66      	ldr	r3, [pc, #408]	; (8008800 <_dtoa_r+0x608>)
 8008668:	ec51 0b17 	vmov	r0, r1, d7
 800866c:	f7f7 ffdc 	bl	8000628 <__aeabi_dmul>
 8008670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008674:	f7f8 fa5e 	bl	8000b34 <__aeabi_dcmpge>
 8008678:	464f      	mov	r7, r9
 800867a:	464e      	mov	r6, r9
 800867c:	2800      	cmp	r0, #0
 800867e:	f040 8234 	bne.w	8008aea <_dtoa_r+0x8f2>
 8008682:	2331      	movs	r3, #49	; 0x31
 8008684:	f10b 0501 	add.w	r5, fp, #1
 8008688:	f88b 3000 	strb.w	r3, [fp]
 800868c:	f10a 0a01 	add.w	sl, sl, #1
 8008690:	e22f      	b.n	8008af2 <_dtoa_r+0x8fa>
 8008692:	07f2      	lsls	r2, r6, #31
 8008694:	d505      	bpl.n	80086a2 <_dtoa_r+0x4aa>
 8008696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869a:	f7f7 ffc5 	bl	8000628 <__aeabi_dmul>
 800869e:	3501      	adds	r5, #1
 80086a0:	2301      	movs	r3, #1
 80086a2:	1076      	asrs	r6, r6, #1
 80086a4:	3708      	adds	r7, #8
 80086a6:	e772      	b.n	800858e <_dtoa_r+0x396>
 80086a8:	2502      	movs	r5, #2
 80086aa:	e774      	b.n	8008596 <_dtoa_r+0x39e>
 80086ac:	f8cd a020 	str.w	sl, [sp, #32]
 80086b0:	464f      	mov	r7, r9
 80086b2:	e791      	b.n	80085d8 <_dtoa_r+0x3e0>
 80086b4:	4b4d      	ldr	r3, [pc, #308]	; (80087ec <_dtoa_r+0x5f4>)
 80086b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80086be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d047      	beq.n	8008754 <_dtoa_r+0x55c>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	2000      	movs	r0, #0
 80086ca:	494e      	ldr	r1, [pc, #312]	; (8008804 <_dtoa_r+0x60c>)
 80086cc:	f7f8 f8d6 	bl	800087c <__aeabi_ddiv>
 80086d0:	462a      	mov	r2, r5
 80086d2:	4633      	mov	r3, r6
 80086d4:	f7f7 fdf0 	bl	80002b8 <__aeabi_dsub>
 80086d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80086dc:	465d      	mov	r5, fp
 80086de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086e2:	f7f8 fa51 	bl	8000b88 <__aeabi_d2iz>
 80086e6:	4606      	mov	r6, r0
 80086e8:	f7f7 ff34 	bl	8000554 <__aeabi_i2d>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086f4:	f7f7 fde0 	bl	80002b8 <__aeabi_dsub>
 80086f8:	3630      	adds	r6, #48	; 0x30
 80086fa:	f805 6b01 	strb.w	r6, [r5], #1
 80086fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008702:	e9cd 0100 	strd	r0, r1, [sp]
 8008706:	f7f8 fa01 	bl	8000b0c <__aeabi_dcmplt>
 800870a:	2800      	cmp	r0, #0
 800870c:	d163      	bne.n	80087d6 <_dtoa_r+0x5de>
 800870e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008712:	2000      	movs	r0, #0
 8008714:	4937      	ldr	r1, [pc, #220]	; (80087f4 <_dtoa_r+0x5fc>)
 8008716:	f7f7 fdcf 	bl	80002b8 <__aeabi_dsub>
 800871a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800871e:	f7f8 f9f5 	bl	8000b0c <__aeabi_dcmplt>
 8008722:	2800      	cmp	r0, #0
 8008724:	f040 80b7 	bne.w	8008896 <_dtoa_r+0x69e>
 8008728:	eba5 030b 	sub.w	r3, r5, fp
 800872c:	429f      	cmp	r7, r3
 800872e:	f77f af7c 	ble.w	800862a <_dtoa_r+0x432>
 8008732:	2200      	movs	r2, #0
 8008734:	4b30      	ldr	r3, [pc, #192]	; (80087f8 <_dtoa_r+0x600>)
 8008736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800873a:	f7f7 ff75 	bl	8000628 <__aeabi_dmul>
 800873e:	2200      	movs	r2, #0
 8008740:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008744:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <_dtoa_r+0x600>)
 8008746:	e9dd 0100 	ldrd	r0, r1, [sp]
 800874a:	f7f7 ff6d 	bl	8000628 <__aeabi_dmul>
 800874e:	e9cd 0100 	strd	r0, r1, [sp]
 8008752:	e7c4      	b.n	80086de <_dtoa_r+0x4e6>
 8008754:	462a      	mov	r2, r5
 8008756:	4633      	mov	r3, r6
 8008758:	f7f7 ff66 	bl	8000628 <__aeabi_dmul>
 800875c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008760:	eb0b 0507 	add.w	r5, fp, r7
 8008764:	465e      	mov	r6, fp
 8008766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800876a:	f7f8 fa0d 	bl	8000b88 <__aeabi_d2iz>
 800876e:	4607      	mov	r7, r0
 8008770:	f7f7 fef0 	bl	8000554 <__aeabi_i2d>
 8008774:	3730      	adds	r7, #48	; 0x30
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800877e:	f7f7 fd9b 	bl	80002b8 <__aeabi_dsub>
 8008782:	f806 7b01 	strb.w	r7, [r6], #1
 8008786:	42ae      	cmp	r6, r5
 8008788:	e9cd 0100 	strd	r0, r1, [sp]
 800878c:	f04f 0200 	mov.w	r2, #0
 8008790:	d126      	bne.n	80087e0 <_dtoa_r+0x5e8>
 8008792:	4b1c      	ldr	r3, [pc, #112]	; (8008804 <_dtoa_r+0x60c>)
 8008794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008798:	f7f7 fd90 	bl	80002bc <__adddf3>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087a4:	f7f8 f9d0 	bl	8000b48 <__aeabi_dcmpgt>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d174      	bne.n	8008896 <_dtoa_r+0x69e>
 80087ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087b0:	2000      	movs	r0, #0
 80087b2:	4914      	ldr	r1, [pc, #80]	; (8008804 <_dtoa_r+0x60c>)
 80087b4:	f7f7 fd80 	bl	80002b8 <__aeabi_dsub>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087c0:	f7f8 f9a4 	bl	8000b0c <__aeabi_dcmplt>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f43f af30 	beq.w	800862a <_dtoa_r+0x432>
 80087ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087ce:	2b30      	cmp	r3, #48	; 0x30
 80087d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80087d4:	d002      	beq.n	80087dc <_dtoa_r+0x5e4>
 80087d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80087da:	e04a      	b.n	8008872 <_dtoa_r+0x67a>
 80087dc:	4615      	mov	r5, r2
 80087de:	e7f4      	b.n	80087ca <_dtoa_r+0x5d2>
 80087e0:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <_dtoa_r+0x600>)
 80087e2:	f7f7 ff21 	bl	8000628 <__aeabi_dmul>
 80087e6:	e9cd 0100 	strd	r0, r1, [sp]
 80087ea:	e7bc      	b.n	8008766 <_dtoa_r+0x56e>
 80087ec:	0800a280 	.word	0x0800a280
 80087f0:	0800a258 	.word	0x0800a258
 80087f4:	3ff00000 	.word	0x3ff00000
 80087f8:	40240000 	.word	0x40240000
 80087fc:	401c0000 	.word	0x401c0000
 8008800:	40140000 	.word	0x40140000
 8008804:	3fe00000 	.word	0x3fe00000
 8008808:	e9dd 6700 	ldrd	r6, r7, [sp]
 800880c:	465d      	mov	r5, fp
 800880e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	f7f8 f831 	bl	800087c <__aeabi_ddiv>
 800881a:	f7f8 f9b5 	bl	8000b88 <__aeabi_d2iz>
 800881e:	4680      	mov	r8, r0
 8008820:	f7f7 fe98 	bl	8000554 <__aeabi_i2d>
 8008824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008828:	f7f7 fefe 	bl	8000628 <__aeabi_dmul>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008838:	f7f7 fd3e 	bl	80002b8 <__aeabi_dsub>
 800883c:	f805 6b01 	strb.w	r6, [r5], #1
 8008840:	eba5 060b 	sub.w	r6, r5, fp
 8008844:	45b1      	cmp	r9, r6
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	d139      	bne.n	80088c0 <_dtoa_r+0x6c8>
 800884c:	f7f7 fd36 	bl	80002bc <__adddf3>
 8008850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008854:	4606      	mov	r6, r0
 8008856:	460f      	mov	r7, r1
 8008858:	f7f8 f976 	bl	8000b48 <__aeabi_dcmpgt>
 800885c:	b9c8      	cbnz	r0, 8008892 <_dtoa_r+0x69a>
 800885e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008862:	4630      	mov	r0, r6
 8008864:	4639      	mov	r1, r7
 8008866:	f7f8 f947 	bl	8000af8 <__aeabi_dcmpeq>
 800886a:	b110      	cbz	r0, 8008872 <_dtoa_r+0x67a>
 800886c:	f018 0f01 	tst.w	r8, #1
 8008870:	d10f      	bne.n	8008892 <_dtoa_r+0x69a>
 8008872:	9904      	ldr	r1, [sp, #16]
 8008874:	4620      	mov	r0, r4
 8008876:	f000 fdff 	bl	8009478 <_Bfree>
 800887a:	2300      	movs	r3, #0
 800887c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800887e:	702b      	strb	r3, [r5, #0]
 8008880:	f10a 0301 	add.w	r3, sl, #1
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 8241 	beq.w	8008d10 <_dtoa_r+0xb18>
 800888e:	601d      	str	r5, [r3, #0]
 8008890:	e23e      	b.n	8008d10 <_dtoa_r+0xb18>
 8008892:	f8cd a020 	str.w	sl, [sp, #32]
 8008896:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800889a:	2a39      	cmp	r2, #57	; 0x39
 800889c:	f105 33ff 	add.w	r3, r5, #4294967295
 80088a0:	d108      	bne.n	80088b4 <_dtoa_r+0x6bc>
 80088a2:	459b      	cmp	fp, r3
 80088a4:	d10a      	bne.n	80088bc <_dtoa_r+0x6c4>
 80088a6:	9b08      	ldr	r3, [sp, #32]
 80088a8:	3301      	adds	r3, #1
 80088aa:	9308      	str	r3, [sp, #32]
 80088ac:	2330      	movs	r3, #48	; 0x30
 80088ae:	f88b 3000 	strb.w	r3, [fp]
 80088b2:	465b      	mov	r3, fp
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	3201      	adds	r2, #1
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	e78c      	b.n	80087d6 <_dtoa_r+0x5de>
 80088bc:	461d      	mov	r5, r3
 80088be:	e7ea      	b.n	8008896 <_dtoa_r+0x69e>
 80088c0:	2200      	movs	r2, #0
 80088c2:	4b9b      	ldr	r3, [pc, #620]	; (8008b30 <_dtoa_r+0x938>)
 80088c4:	f7f7 feb0 	bl	8000628 <__aeabi_dmul>
 80088c8:	2200      	movs	r2, #0
 80088ca:	2300      	movs	r3, #0
 80088cc:	4606      	mov	r6, r0
 80088ce:	460f      	mov	r7, r1
 80088d0:	f7f8 f912 	bl	8000af8 <__aeabi_dcmpeq>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d09a      	beq.n	800880e <_dtoa_r+0x616>
 80088d8:	e7cb      	b.n	8008872 <_dtoa_r+0x67a>
 80088da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088dc:	2a00      	cmp	r2, #0
 80088de:	f000 808b 	beq.w	80089f8 <_dtoa_r+0x800>
 80088e2:	9a06      	ldr	r2, [sp, #24]
 80088e4:	2a01      	cmp	r2, #1
 80088e6:	dc6e      	bgt.n	80089c6 <_dtoa_r+0x7ce>
 80088e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	d067      	beq.n	80089be <_dtoa_r+0x7c6>
 80088ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088f2:	9f07      	ldr	r7, [sp, #28]
 80088f4:	9d05      	ldr	r5, [sp, #20]
 80088f6:	9a05      	ldr	r2, [sp, #20]
 80088f8:	2101      	movs	r1, #1
 80088fa:	441a      	add	r2, r3
 80088fc:	4620      	mov	r0, r4
 80088fe:	9205      	str	r2, [sp, #20]
 8008900:	4498      	add	r8, r3
 8008902:	f000 fe97 	bl	8009634 <__i2b>
 8008906:	4606      	mov	r6, r0
 8008908:	2d00      	cmp	r5, #0
 800890a:	dd0c      	ble.n	8008926 <_dtoa_r+0x72e>
 800890c:	f1b8 0f00 	cmp.w	r8, #0
 8008910:	dd09      	ble.n	8008926 <_dtoa_r+0x72e>
 8008912:	4545      	cmp	r5, r8
 8008914:	9a05      	ldr	r2, [sp, #20]
 8008916:	462b      	mov	r3, r5
 8008918:	bfa8      	it	ge
 800891a:	4643      	movge	r3, r8
 800891c:	1ad2      	subs	r2, r2, r3
 800891e:	9205      	str	r2, [sp, #20]
 8008920:	1aed      	subs	r5, r5, r3
 8008922:	eba8 0803 	sub.w	r8, r8, r3
 8008926:	9b07      	ldr	r3, [sp, #28]
 8008928:	b1eb      	cbz	r3, 8008966 <_dtoa_r+0x76e>
 800892a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892c:	2b00      	cmp	r3, #0
 800892e:	d067      	beq.n	8008a00 <_dtoa_r+0x808>
 8008930:	b18f      	cbz	r7, 8008956 <_dtoa_r+0x75e>
 8008932:	4631      	mov	r1, r6
 8008934:	463a      	mov	r2, r7
 8008936:	4620      	mov	r0, r4
 8008938:	f000 ff1c 	bl	8009774 <__pow5mult>
 800893c:	9a04      	ldr	r2, [sp, #16]
 800893e:	4601      	mov	r1, r0
 8008940:	4606      	mov	r6, r0
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fe7f 	bl	8009646 <__multiply>
 8008948:	9904      	ldr	r1, [sp, #16]
 800894a:	9008      	str	r0, [sp, #32]
 800894c:	4620      	mov	r0, r4
 800894e:	f000 fd93 	bl	8009478 <_Bfree>
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	9304      	str	r3, [sp, #16]
 8008956:	9b07      	ldr	r3, [sp, #28]
 8008958:	1bda      	subs	r2, r3, r7
 800895a:	d004      	beq.n	8008966 <_dtoa_r+0x76e>
 800895c:	9904      	ldr	r1, [sp, #16]
 800895e:	4620      	mov	r0, r4
 8008960:	f000 ff08 	bl	8009774 <__pow5mult>
 8008964:	9004      	str	r0, [sp, #16]
 8008966:	2101      	movs	r1, #1
 8008968:	4620      	mov	r0, r4
 800896a:	f000 fe63 	bl	8009634 <__i2b>
 800896e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008970:	4607      	mov	r7, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 81d0 	beq.w	8008d18 <_dtoa_r+0xb20>
 8008978:	461a      	mov	r2, r3
 800897a:	4601      	mov	r1, r0
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fef9 	bl	8009774 <__pow5mult>
 8008982:	9b06      	ldr	r3, [sp, #24]
 8008984:	2b01      	cmp	r3, #1
 8008986:	4607      	mov	r7, r0
 8008988:	dc40      	bgt.n	8008a0c <_dtoa_r+0x814>
 800898a:	9b00      	ldr	r3, [sp, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d139      	bne.n	8008a04 <_dtoa_r+0x80c>
 8008990:	9b01      	ldr	r3, [sp, #4]
 8008992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008996:	2b00      	cmp	r3, #0
 8008998:	d136      	bne.n	8008a08 <_dtoa_r+0x810>
 800899a:	9b01      	ldr	r3, [sp, #4]
 800899c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089a0:	0d1b      	lsrs	r3, r3, #20
 80089a2:	051b      	lsls	r3, r3, #20
 80089a4:	b12b      	cbz	r3, 80089b2 <_dtoa_r+0x7ba>
 80089a6:	9b05      	ldr	r3, [sp, #20]
 80089a8:	3301      	adds	r3, #1
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	f108 0801 	add.w	r8, r8, #1
 80089b0:	2301      	movs	r3, #1
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d12a      	bne.n	8008a10 <_dtoa_r+0x818>
 80089ba:	2001      	movs	r0, #1
 80089bc:	e030      	b.n	8008a20 <_dtoa_r+0x828>
 80089be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089c4:	e795      	b.n	80088f2 <_dtoa_r+0x6fa>
 80089c6:	9b07      	ldr	r3, [sp, #28]
 80089c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80089cc:	42bb      	cmp	r3, r7
 80089ce:	bfbf      	itttt	lt
 80089d0:	9b07      	ldrlt	r3, [sp, #28]
 80089d2:	9707      	strlt	r7, [sp, #28]
 80089d4:	1afa      	sublt	r2, r7, r3
 80089d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80089d8:	bfbb      	ittet	lt
 80089da:	189b      	addlt	r3, r3, r2
 80089dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80089de:	1bdf      	subge	r7, r3, r7
 80089e0:	2700      	movlt	r7, #0
 80089e2:	f1b9 0f00 	cmp.w	r9, #0
 80089e6:	bfb5      	itete	lt
 80089e8:	9b05      	ldrlt	r3, [sp, #20]
 80089ea:	9d05      	ldrge	r5, [sp, #20]
 80089ec:	eba3 0509 	sublt.w	r5, r3, r9
 80089f0:	464b      	movge	r3, r9
 80089f2:	bfb8      	it	lt
 80089f4:	2300      	movlt	r3, #0
 80089f6:	e77e      	b.n	80088f6 <_dtoa_r+0x6fe>
 80089f8:	9f07      	ldr	r7, [sp, #28]
 80089fa:	9d05      	ldr	r5, [sp, #20]
 80089fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80089fe:	e783      	b.n	8008908 <_dtoa_r+0x710>
 8008a00:	9a07      	ldr	r2, [sp, #28]
 8008a02:	e7ab      	b.n	800895c <_dtoa_r+0x764>
 8008a04:	2300      	movs	r3, #0
 8008a06:	e7d4      	b.n	80089b2 <_dtoa_r+0x7ba>
 8008a08:	9b00      	ldr	r3, [sp, #0]
 8008a0a:	e7d2      	b.n	80089b2 <_dtoa_r+0x7ba>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9307      	str	r3, [sp, #28]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008a16:	6918      	ldr	r0, [r3, #16]
 8008a18:	f000 fdbe 	bl	8009598 <__hi0bits>
 8008a1c:	f1c0 0020 	rsb	r0, r0, #32
 8008a20:	4440      	add	r0, r8
 8008a22:	f010 001f 	ands.w	r0, r0, #31
 8008a26:	d047      	beq.n	8008ab8 <_dtoa_r+0x8c0>
 8008a28:	f1c0 0320 	rsb	r3, r0, #32
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	dd3b      	ble.n	8008aa8 <_dtoa_r+0x8b0>
 8008a30:	9b05      	ldr	r3, [sp, #20]
 8008a32:	f1c0 001c 	rsb	r0, r0, #28
 8008a36:	4403      	add	r3, r0
 8008a38:	9305      	str	r3, [sp, #20]
 8008a3a:	4405      	add	r5, r0
 8008a3c:	4480      	add	r8, r0
 8008a3e:	9b05      	ldr	r3, [sp, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dd05      	ble.n	8008a50 <_dtoa_r+0x858>
 8008a44:	461a      	mov	r2, r3
 8008a46:	9904      	ldr	r1, [sp, #16]
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fee1 	bl	8009810 <__lshift>
 8008a4e:	9004      	str	r0, [sp, #16]
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	dd05      	ble.n	8008a62 <_dtoa_r+0x86a>
 8008a56:	4639      	mov	r1, r7
 8008a58:	4642      	mov	r2, r8
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fed8 	bl	8009810 <__lshift>
 8008a60:	4607      	mov	r7, r0
 8008a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a64:	b353      	cbz	r3, 8008abc <_dtoa_r+0x8c4>
 8008a66:	4639      	mov	r1, r7
 8008a68:	9804      	ldr	r0, [sp, #16]
 8008a6a:	f000 ff25 	bl	80098b8 <__mcmp>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	da24      	bge.n	8008abc <_dtoa_r+0x8c4>
 8008a72:	2300      	movs	r3, #0
 8008a74:	220a      	movs	r2, #10
 8008a76:	9904      	ldr	r1, [sp, #16]
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 fd14 	bl	80094a6 <__multadd>
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a80:	9004      	str	r0, [sp, #16]
 8008a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 814d 	beq.w	8008d26 <_dtoa_r+0xb2e>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4631      	mov	r1, r6
 8008a90:	220a      	movs	r2, #10
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 fd07 	bl	80094a6 <__multadd>
 8008a98:	9b02      	ldr	r3, [sp, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	dc4f      	bgt.n	8008b40 <_dtoa_r+0x948>
 8008aa0:	9b06      	ldr	r3, [sp, #24]
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	dd4c      	ble.n	8008b40 <_dtoa_r+0x948>
 8008aa6:	e011      	b.n	8008acc <_dtoa_r+0x8d4>
 8008aa8:	d0c9      	beq.n	8008a3e <_dtoa_r+0x846>
 8008aaa:	9a05      	ldr	r2, [sp, #20]
 8008aac:	331c      	adds	r3, #28
 8008aae:	441a      	add	r2, r3
 8008ab0:	9205      	str	r2, [sp, #20]
 8008ab2:	441d      	add	r5, r3
 8008ab4:	4498      	add	r8, r3
 8008ab6:	e7c2      	b.n	8008a3e <_dtoa_r+0x846>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	e7f6      	b.n	8008aaa <_dtoa_r+0x8b2>
 8008abc:	f1b9 0f00 	cmp.w	r9, #0
 8008ac0:	dc38      	bgt.n	8008b34 <_dtoa_r+0x93c>
 8008ac2:	9b06      	ldr	r3, [sp, #24]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	dd35      	ble.n	8008b34 <_dtoa_r+0x93c>
 8008ac8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008acc:	9b02      	ldr	r3, [sp, #8]
 8008ace:	b963      	cbnz	r3, 8008aea <_dtoa_r+0x8f2>
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	2205      	movs	r2, #5
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 fce6 	bl	80094a6 <__multadd>
 8008ada:	4601      	mov	r1, r0
 8008adc:	4607      	mov	r7, r0
 8008ade:	9804      	ldr	r0, [sp, #16]
 8008ae0:	f000 feea 	bl	80098b8 <__mcmp>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	f73f adcc 	bgt.w	8008682 <_dtoa_r+0x48a>
 8008aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aec:	465d      	mov	r5, fp
 8008aee:	ea6f 0a03 	mvn.w	sl, r3
 8008af2:	f04f 0900 	mov.w	r9, #0
 8008af6:	4639      	mov	r1, r7
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fcbd 	bl	8009478 <_Bfree>
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	f43f aeb7 	beq.w	8008872 <_dtoa_r+0x67a>
 8008b04:	f1b9 0f00 	cmp.w	r9, #0
 8008b08:	d005      	beq.n	8008b16 <_dtoa_r+0x91e>
 8008b0a:	45b1      	cmp	r9, r6
 8008b0c:	d003      	beq.n	8008b16 <_dtoa_r+0x91e>
 8008b0e:	4649      	mov	r1, r9
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fcb1 	bl	8009478 <_Bfree>
 8008b16:	4631      	mov	r1, r6
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fcad 	bl	8009478 <_Bfree>
 8008b1e:	e6a8      	b.n	8008872 <_dtoa_r+0x67a>
 8008b20:	2700      	movs	r7, #0
 8008b22:	463e      	mov	r6, r7
 8008b24:	e7e1      	b.n	8008aea <_dtoa_r+0x8f2>
 8008b26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008b2a:	463e      	mov	r6, r7
 8008b2c:	e5a9      	b.n	8008682 <_dtoa_r+0x48a>
 8008b2e:	bf00      	nop
 8008b30:	40240000 	.word	0x40240000
 8008b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b36:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 80fa 	beq.w	8008d34 <_dtoa_r+0xb3c>
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	dd05      	ble.n	8008b50 <_dtoa_r+0x958>
 8008b44:	4631      	mov	r1, r6
 8008b46:	462a      	mov	r2, r5
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 fe61 	bl	8009810 <__lshift>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d04c      	beq.n	8008bf0 <_dtoa_r+0x9f8>
 8008b56:	6871      	ldr	r1, [r6, #4]
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 fc59 	bl	8009410 <_Balloc>
 8008b5e:	6932      	ldr	r2, [r6, #16]
 8008b60:	3202      	adds	r2, #2
 8008b62:	4605      	mov	r5, r0
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	f106 010c 	add.w	r1, r6, #12
 8008b6a:	300c      	adds	r0, #12
 8008b6c:	f7fd fd8e 	bl	800668c <memcpy>
 8008b70:	2201      	movs	r2, #1
 8008b72:	4629      	mov	r1, r5
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 fe4b 	bl	8009810 <__lshift>
 8008b7a:	9b00      	ldr	r3, [sp, #0]
 8008b7c:	f8cd b014 	str.w	fp, [sp, #20]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	46b1      	mov	r9, r6
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	4606      	mov	r6, r0
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	9804      	ldr	r0, [sp, #16]
 8008b8e:	f7ff faa5 	bl	80080dc <quorem>
 8008b92:	4649      	mov	r1, r9
 8008b94:	4605      	mov	r5, r0
 8008b96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b9a:	9804      	ldr	r0, [sp, #16]
 8008b9c:	f000 fe8c 	bl	80098b8 <__mcmp>
 8008ba0:	4632      	mov	r2, r6
 8008ba2:	9000      	str	r0, [sp, #0]
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fea0 	bl	80098ec <__mdiff>
 8008bac:	68c3      	ldr	r3, [r0, #12]
 8008bae:	4602      	mov	r2, r0
 8008bb0:	bb03      	cbnz	r3, 8008bf4 <_dtoa_r+0x9fc>
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	9008      	str	r0, [sp, #32]
 8008bb6:	9804      	ldr	r0, [sp, #16]
 8008bb8:	f000 fe7e 	bl	80098b8 <__mcmp>
 8008bbc:	9a08      	ldr	r2, [sp, #32]
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	9308      	str	r3, [sp, #32]
 8008bc6:	f000 fc57 	bl	8009478 <_Bfree>
 8008bca:	9b08      	ldr	r3, [sp, #32]
 8008bcc:	b9a3      	cbnz	r3, 8008bf8 <_dtoa_r+0xa00>
 8008bce:	9a06      	ldr	r2, [sp, #24]
 8008bd0:	b992      	cbnz	r2, 8008bf8 <_dtoa_r+0xa00>
 8008bd2:	9a07      	ldr	r2, [sp, #28]
 8008bd4:	b982      	cbnz	r2, 8008bf8 <_dtoa_r+0xa00>
 8008bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bda:	d029      	beq.n	8008c30 <_dtoa_r+0xa38>
 8008bdc:	9b00      	ldr	r3, [sp, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd01      	ble.n	8008be6 <_dtoa_r+0x9ee>
 8008be2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008be6:	9b05      	ldr	r3, [sp, #20]
 8008be8:	1c5d      	adds	r5, r3, #1
 8008bea:	f883 8000 	strb.w	r8, [r3]
 8008bee:	e782      	b.n	8008af6 <_dtoa_r+0x8fe>
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	e7c2      	b.n	8008b7a <_dtoa_r+0x982>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e7e3      	b.n	8008bc0 <_dtoa_r+0x9c8>
 8008bf8:	9a00      	ldr	r2, [sp, #0]
 8008bfa:	2a00      	cmp	r2, #0
 8008bfc:	db04      	blt.n	8008c08 <_dtoa_r+0xa10>
 8008bfe:	d125      	bne.n	8008c4c <_dtoa_r+0xa54>
 8008c00:	9a06      	ldr	r2, [sp, #24]
 8008c02:	bb1a      	cbnz	r2, 8008c4c <_dtoa_r+0xa54>
 8008c04:	9a07      	ldr	r2, [sp, #28]
 8008c06:	bb0a      	cbnz	r2, 8008c4c <_dtoa_r+0xa54>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	ddec      	ble.n	8008be6 <_dtoa_r+0x9ee>
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	9904      	ldr	r1, [sp, #16]
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 fdfd 	bl	8009810 <__lshift>
 8008c16:	4639      	mov	r1, r7
 8008c18:	9004      	str	r0, [sp, #16]
 8008c1a:	f000 fe4d 	bl	80098b8 <__mcmp>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	dc03      	bgt.n	8008c2a <_dtoa_r+0xa32>
 8008c22:	d1e0      	bne.n	8008be6 <_dtoa_r+0x9ee>
 8008c24:	f018 0f01 	tst.w	r8, #1
 8008c28:	d0dd      	beq.n	8008be6 <_dtoa_r+0x9ee>
 8008c2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c2e:	d1d8      	bne.n	8008be2 <_dtoa_r+0x9ea>
 8008c30:	9b05      	ldr	r3, [sp, #20]
 8008c32:	9a05      	ldr	r2, [sp, #20]
 8008c34:	1c5d      	adds	r5, r3, #1
 8008c36:	2339      	movs	r3, #57	; 0x39
 8008c38:	7013      	strb	r3, [r2, #0]
 8008c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c3e:	2b39      	cmp	r3, #57	; 0x39
 8008c40:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c44:	d04f      	beq.n	8008ce6 <_dtoa_r+0xaee>
 8008c46:	3301      	adds	r3, #1
 8008c48:	7013      	strb	r3, [r2, #0]
 8008c4a:	e754      	b.n	8008af6 <_dtoa_r+0x8fe>
 8008c4c:	9a05      	ldr	r2, [sp, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f102 0501 	add.w	r5, r2, #1
 8008c54:	dd06      	ble.n	8008c64 <_dtoa_r+0xa6c>
 8008c56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c5a:	d0e9      	beq.n	8008c30 <_dtoa_r+0xa38>
 8008c5c:	f108 0801 	add.w	r8, r8, #1
 8008c60:	9b05      	ldr	r3, [sp, #20]
 8008c62:	e7c2      	b.n	8008bea <_dtoa_r+0x9f2>
 8008c64:	9a02      	ldr	r2, [sp, #8]
 8008c66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008c6a:	eba5 030b 	sub.w	r3, r5, fp
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d021      	beq.n	8008cb6 <_dtoa_r+0xabe>
 8008c72:	2300      	movs	r3, #0
 8008c74:	220a      	movs	r2, #10
 8008c76:	9904      	ldr	r1, [sp, #16]
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fc14 	bl	80094a6 <__multadd>
 8008c7e:	45b1      	cmp	r9, r6
 8008c80:	9004      	str	r0, [sp, #16]
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	f04f 020a 	mov.w	r2, #10
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	d105      	bne.n	8008c9c <_dtoa_r+0xaa4>
 8008c90:	f000 fc09 	bl	80094a6 <__multadd>
 8008c94:	4681      	mov	r9, r0
 8008c96:	4606      	mov	r6, r0
 8008c98:	9505      	str	r5, [sp, #20]
 8008c9a:	e776      	b.n	8008b8a <_dtoa_r+0x992>
 8008c9c:	f000 fc03 	bl	80094a6 <__multadd>
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	4681      	mov	r9, r0
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	220a      	movs	r2, #10
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fbfc 	bl	80094a6 <__multadd>
 8008cae:	4606      	mov	r6, r0
 8008cb0:	e7f2      	b.n	8008c98 <_dtoa_r+0xaa0>
 8008cb2:	f04f 0900 	mov.w	r9, #0
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	9904      	ldr	r1, [sp, #16]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f000 fda8 	bl	8009810 <__lshift>
 8008cc0:	4639      	mov	r1, r7
 8008cc2:	9004      	str	r0, [sp, #16]
 8008cc4:	f000 fdf8 	bl	80098b8 <__mcmp>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dcb6      	bgt.n	8008c3a <_dtoa_r+0xa42>
 8008ccc:	d102      	bne.n	8008cd4 <_dtoa_r+0xadc>
 8008cce:	f018 0f01 	tst.w	r8, #1
 8008cd2:	d1b2      	bne.n	8008c3a <_dtoa_r+0xa42>
 8008cd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cd8:	2b30      	cmp	r3, #48	; 0x30
 8008cda:	f105 32ff 	add.w	r2, r5, #4294967295
 8008cde:	f47f af0a 	bne.w	8008af6 <_dtoa_r+0x8fe>
 8008ce2:	4615      	mov	r5, r2
 8008ce4:	e7f6      	b.n	8008cd4 <_dtoa_r+0xadc>
 8008ce6:	4593      	cmp	fp, r2
 8008ce8:	d105      	bne.n	8008cf6 <_dtoa_r+0xafe>
 8008cea:	2331      	movs	r3, #49	; 0x31
 8008cec:	f10a 0a01 	add.w	sl, sl, #1
 8008cf0:	f88b 3000 	strb.w	r3, [fp]
 8008cf4:	e6ff      	b.n	8008af6 <_dtoa_r+0x8fe>
 8008cf6:	4615      	mov	r5, r2
 8008cf8:	e79f      	b.n	8008c3a <_dtoa_r+0xa42>
 8008cfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008d60 <_dtoa_r+0xb68>
 8008cfe:	e007      	b.n	8008d10 <_dtoa_r+0xb18>
 8008d00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008d64 <_dtoa_r+0xb6c>
 8008d06:	b11b      	cbz	r3, 8008d10 <_dtoa_r+0xb18>
 8008d08:	f10b 0308 	add.w	r3, fp, #8
 8008d0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	4658      	mov	r0, fp
 8008d12:	b017      	add	sp, #92	; 0x5c
 8008d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d18:	9b06      	ldr	r3, [sp, #24]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	f77f ae35 	ble.w	800898a <_dtoa_r+0x792>
 8008d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d22:	9307      	str	r3, [sp, #28]
 8008d24:	e649      	b.n	80089ba <_dtoa_r+0x7c2>
 8008d26:	9b02      	ldr	r3, [sp, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dc03      	bgt.n	8008d34 <_dtoa_r+0xb3c>
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	f73f aecc 	bgt.w	8008acc <_dtoa_r+0x8d4>
 8008d34:	465d      	mov	r5, fp
 8008d36:	4639      	mov	r1, r7
 8008d38:	9804      	ldr	r0, [sp, #16]
 8008d3a:	f7ff f9cf 	bl	80080dc <quorem>
 8008d3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d42:	f805 8b01 	strb.w	r8, [r5], #1
 8008d46:	9a02      	ldr	r2, [sp, #8]
 8008d48:	eba5 030b 	sub.w	r3, r5, fp
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	ddb0      	ble.n	8008cb2 <_dtoa_r+0xaba>
 8008d50:	2300      	movs	r3, #0
 8008d52:	220a      	movs	r2, #10
 8008d54:	9904      	ldr	r1, [sp, #16]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 fba5 	bl	80094a6 <__multadd>
 8008d5c:	9004      	str	r0, [sp, #16]
 8008d5e:	e7ea      	b.n	8008d36 <_dtoa_r+0xb3e>
 8008d60:	0800a1c4 	.word	0x0800a1c4
 8008d64:	0800a240 	.word	0x0800a240

08008d68 <rshift>:
 8008d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d6a:	6906      	ldr	r6, [r0, #16]
 8008d6c:	114b      	asrs	r3, r1, #5
 8008d6e:	429e      	cmp	r6, r3
 8008d70:	f100 0414 	add.w	r4, r0, #20
 8008d74:	dd30      	ble.n	8008dd8 <rshift+0x70>
 8008d76:	f011 011f 	ands.w	r1, r1, #31
 8008d7a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008d7e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008d82:	d108      	bne.n	8008d96 <rshift+0x2e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	42b2      	cmp	r2, r6
 8008d88:	460b      	mov	r3, r1
 8008d8a:	d211      	bcs.n	8008db0 <rshift+0x48>
 8008d8c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008d90:	f841 3b04 	str.w	r3, [r1], #4
 8008d94:	e7f7      	b.n	8008d86 <rshift+0x1e>
 8008d96:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008d9a:	f1c1 0c20 	rsb	ip, r1, #32
 8008d9e:	40cd      	lsrs	r5, r1
 8008da0:	3204      	adds	r2, #4
 8008da2:	4623      	mov	r3, r4
 8008da4:	42b2      	cmp	r2, r6
 8008da6:	4617      	mov	r7, r2
 8008da8:	d30c      	bcc.n	8008dc4 <rshift+0x5c>
 8008daa:	601d      	str	r5, [r3, #0]
 8008dac:	b105      	cbz	r5, 8008db0 <rshift+0x48>
 8008dae:	3304      	adds	r3, #4
 8008db0:	1b1a      	subs	r2, r3, r4
 8008db2:	42a3      	cmp	r3, r4
 8008db4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008db8:	bf08      	it	eq
 8008dba:	2300      	moveq	r3, #0
 8008dbc:	6102      	str	r2, [r0, #16]
 8008dbe:	bf08      	it	eq
 8008dc0:	6143      	streq	r3, [r0, #20]
 8008dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc4:	683f      	ldr	r7, [r7, #0]
 8008dc6:	fa07 f70c 	lsl.w	r7, r7, ip
 8008dca:	433d      	orrs	r5, r7
 8008dcc:	f843 5b04 	str.w	r5, [r3], #4
 8008dd0:	f852 5b04 	ldr.w	r5, [r2], #4
 8008dd4:	40cd      	lsrs	r5, r1
 8008dd6:	e7e5      	b.n	8008da4 <rshift+0x3c>
 8008dd8:	4623      	mov	r3, r4
 8008dda:	e7e9      	b.n	8008db0 <rshift+0x48>

08008ddc <__hexdig_fun>:
 8008ddc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008de0:	2b09      	cmp	r3, #9
 8008de2:	d802      	bhi.n	8008dea <__hexdig_fun+0xe>
 8008de4:	3820      	subs	r0, #32
 8008de6:	b2c0      	uxtb	r0, r0
 8008de8:	4770      	bx	lr
 8008dea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d801      	bhi.n	8008df6 <__hexdig_fun+0x1a>
 8008df2:	3847      	subs	r0, #71	; 0x47
 8008df4:	e7f7      	b.n	8008de6 <__hexdig_fun+0xa>
 8008df6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008dfa:	2b05      	cmp	r3, #5
 8008dfc:	d801      	bhi.n	8008e02 <__hexdig_fun+0x26>
 8008dfe:	3827      	subs	r0, #39	; 0x27
 8008e00:	e7f1      	b.n	8008de6 <__hexdig_fun+0xa>
 8008e02:	2000      	movs	r0, #0
 8008e04:	4770      	bx	lr

08008e06 <__gethex>:
 8008e06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	b08b      	sub	sp, #44	; 0x2c
 8008e0c:	468a      	mov	sl, r1
 8008e0e:	9002      	str	r0, [sp, #8]
 8008e10:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008e12:	9306      	str	r3, [sp, #24]
 8008e14:	4690      	mov	r8, r2
 8008e16:	f000 fad0 	bl	80093ba <__localeconv_l>
 8008e1a:	6803      	ldr	r3, [r0, #0]
 8008e1c:	9303      	str	r3, [sp, #12]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7f7 f9ee 	bl	8000200 <strlen>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	9001      	str	r0, [sp, #4]
 8008e28:	4403      	add	r3, r0
 8008e2a:	f04f 0b00 	mov.w	fp, #0
 8008e2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	f8da 3000 	ldr.w	r3, [sl]
 8008e38:	3302      	adds	r3, #2
 8008e3a:	461f      	mov	r7, r3
 8008e3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e40:	2830      	cmp	r0, #48	; 0x30
 8008e42:	d06c      	beq.n	8008f1e <__gethex+0x118>
 8008e44:	f7ff ffca 	bl	8008ddc <__hexdig_fun>
 8008e48:	4604      	mov	r4, r0
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d16a      	bne.n	8008f24 <__gethex+0x11e>
 8008e4e:	9a01      	ldr	r2, [sp, #4]
 8008e50:	9903      	ldr	r1, [sp, #12]
 8008e52:	4638      	mov	r0, r7
 8008e54:	f001 f8f4 	bl	800a040 <strncmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d166      	bne.n	8008f2a <__gethex+0x124>
 8008e5c:	9b01      	ldr	r3, [sp, #4]
 8008e5e:	5cf8      	ldrb	r0, [r7, r3]
 8008e60:	18fe      	adds	r6, r7, r3
 8008e62:	f7ff ffbb 	bl	8008ddc <__hexdig_fun>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d062      	beq.n	8008f30 <__gethex+0x12a>
 8008e6a:	4633      	mov	r3, r6
 8008e6c:	7818      	ldrb	r0, [r3, #0]
 8008e6e:	2830      	cmp	r0, #48	; 0x30
 8008e70:	461f      	mov	r7, r3
 8008e72:	f103 0301 	add.w	r3, r3, #1
 8008e76:	d0f9      	beq.n	8008e6c <__gethex+0x66>
 8008e78:	f7ff ffb0 	bl	8008ddc <__hexdig_fun>
 8008e7c:	fab0 f580 	clz	r5, r0
 8008e80:	096d      	lsrs	r5, r5, #5
 8008e82:	4634      	mov	r4, r6
 8008e84:	f04f 0b01 	mov.w	fp, #1
 8008e88:	463a      	mov	r2, r7
 8008e8a:	4616      	mov	r6, r2
 8008e8c:	3201      	adds	r2, #1
 8008e8e:	7830      	ldrb	r0, [r6, #0]
 8008e90:	f7ff ffa4 	bl	8008ddc <__hexdig_fun>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d1f8      	bne.n	8008e8a <__gethex+0x84>
 8008e98:	9a01      	ldr	r2, [sp, #4]
 8008e9a:	9903      	ldr	r1, [sp, #12]
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f001 f8cf 	bl	800a040 <strncmp>
 8008ea2:	b950      	cbnz	r0, 8008eba <__gethex+0xb4>
 8008ea4:	b954      	cbnz	r4, 8008ebc <__gethex+0xb6>
 8008ea6:	9b01      	ldr	r3, [sp, #4]
 8008ea8:	18f4      	adds	r4, r6, r3
 8008eaa:	4622      	mov	r2, r4
 8008eac:	4616      	mov	r6, r2
 8008eae:	3201      	adds	r2, #1
 8008eb0:	7830      	ldrb	r0, [r6, #0]
 8008eb2:	f7ff ff93 	bl	8008ddc <__hexdig_fun>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d1f8      	bne.n	8008eac <__gethex+0xa6>
 8008eba:	b10c      	cbz	r4, 8008ec0 <__gethex+0xba>
 8008ebc:	1ba4      	subs	r4, r4, r6
 8008ebe:	00a4      	lsls	r4, r4, #2
 8008ec0:	7833      	ldrb	r3, [r6, #0]
 8008ec2:	2b50      	cmp	r3, #80	; 0x50
 8008ec4:	d001      	beq.n	8008eca <__gethex+0xc4>
 8008ec6:	2b70      	cmp	r3, #112	; 0x70
 8008ec8:	d140      	bne.n	8008f4c <__gethex+0x146>
 8008eca:	7873      	ldrb	r3, [r6, #1]
 8008ecc:	2b2b      	cmp	r3, #43	; 0x2b
 8008ece:	d031      	beq.n	8008f34 <__gethex+0x12e>
 8008ed0:	2b2d      	cmp	r3, #45	; 0x2d
 8008ed2:	d033      	beq.n	8008f3c <__gethex+0x136>
 8008ed4:	1c71      	adds	r1, r6, #1
 8008ed6:	f04f 0900 	mov.w	r9, #0
 8008eda:	7808      	ldrb	r0, [r1, #0]
 8008edc:	f7ff ff7e 	bl	8008ddc <__hexdig_fun>
 8008ee0:	1e43      	subs	r3, r0, #1
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b18      	cmp	r3, #24
 8008ee6:	d831      	bhi.n	8008f4c <__gethex+0x146>
 8008ee8:	f1a0 0210 	sub.w	r2, r0, #16
 8008eec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ef0:	f7ff ff74 	bl	8008ddc <__hexdig_fun>
 8008ef4:	1e43      	subs	r3, r0, #1
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b18      	cmp	r3, #24
 8008efa:	d922      	bls.n	8008f42 <__gethex+0x13c>
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	d000      	beq.n	8008f04 <__gethex+0xfe>
 8008f02:	4252      	negs	r2, r2
 8008f04:	4414      	add	r4, r2
 8008f06:	f8ca 1000 	str.w	r1, [sl]
 8008f0a:	b30d      	cbz	r5, 8008f50 <__gethex+0x14a>
 8008f0c:	f1bb 0f00 	cmp.w	fp, #0
 8008f10:	bf0c      	ite	eq
 8008f12:	2706      	moveq	r7, #6
 8008f14:	2700      	movne	r7, #0
 8008f16:	4638      	mov	r0, r7
 8008f18:	b00b      	add	sp, #44	; 0x2c
 8008f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1e:	f10b 0b01 	add.w	fp, fp, #1
 8008f22:	e78a      	b.n	8008e3a <__gethex+0x34>
 8008f24:	2500      	movs	r5, #0
 8008f26:	462c      	mov	r4, r5
 8008f28:	e7ae      	b.n	8008e88 <__gethex+0x82>
 8008f2a:	463e      	mov	r6, r7
 8008f2c:	2501      	movs	r5, #1
 8008f2e:	e7c7      	b.n	8008ec0 <__gethex+0xba>
 8008f30:	4604      	mov	r4, r0
 8008f32:	e7fb      	b.n	8008f2c <__gethex+0x126>
 8008f34:	f04f 0900 	mov.w	r9, #0
 8008f38:	1cb1      	adds	r1, r6, #2
 8008f3a:	e7ce      	b.n	8008eda <__gethex+0xd4>
 8008f3c:	f04f 0901 	mov.w	r9, #1
 8008f40:	e7fa      	b.n	8008f38 <__gethex+0x132>
 8008f42:	230a      	movs	r3, #10
 8008f44:	fb03 0202 	mla	r2, r3, r2, r0
 8008f48:	3a10      	subs	r2, #16
 8008f4a:	e7cf      	b.n	8008eec <__gethex+0xe6>
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	e7da      	b.n	8008f06 <__gethex+0x100>
 8008f50:	1bf3      	subs	r3, r6, r7
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4629      	mov	r1, r5
 8008f56:	2b07      	cmp	r3, #7
 8008f58:	dc49      	bgt.n	8008fee <__gethex+0x1e8>
 8008f5a:	9802      	ldr	r0, [sp, #8]
 8008f5c:	f000 fa58 	bl	8009410 <_Balloc>
 8008f60:	9b01      	ldr	r3, [sp, #4]
 8008f62:	f100 0914 	add.w	r9, r0, #20
 8008f66:	f04f 0b00 	mov.w	fp, #0
 8008f6a:	f1c3 0301 	rsb	r3, r3, #1
 8008f6e:	4605      	mov	r5, r0
 8008f70:	f8cd 9010 	str.w	r9, [sp, #16]
 8008f74:	46da      	mov	sl, fp
 8008f76:	9308      	str	r3, [sp, #32]
 8008f78:	42b7      	cmp	r7, r6
 8008f7a:	d33b      	bcc.n	8008ff4 <__gethex+0x1ee>
 8008f7c:	9804      	ldr	r0, [sp, #16]
 8008f7e:	f840 ab04 	str.w	sl, [r0], #4
 8008f82:	eba0 0009 	sub.w	r0, r0, r9
 8008f86:	1080      	asrs	r0, r0, #2
 8008f88:	6128      	str	r0, [r5, #16]
 8008f8a:	0147      	lsls	r7, r0, #5
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	f000 fb03 	bl	8009598 <__hi0bits>
 8008f92:	f8d8 6000 	ldr.w	r6, [r8]
 8008f96:	1a3f      	subs	r7, r7, r0
 8008f98:	42b7      	cmp	r7, r6
 8008f9a:	dd64      	ble.n	8009066 <__gethex+0x260>
 8008f9c:	1bbf      	subs	r7, r7, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 fe13 	bl	8009bcc <__any_on>
 8008fa6:	4682      	mov	sl, r0
 8008fa8:	b178      	cbz	r0, 8008fca <__gethex+0x1c4>
 8008faa:	1e7b      	subs	r3, r7, #1
 8008fac:	1159      	asrs	r1, r3, #5
 8008fae:	f003 021f 	and.w	r2, r3, #31
 8008fb2:	f04f 0a01 	mov.w	sl, #1
 8008fb6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008fba:	fa0a f202 	lsl.w	r2, sl, r2
 8008fbe:	420a      	tst	r2, r1
 8008fc0:	d003      	beq.n	8008fca <__gethex+0x1c4>
 8008fc2:	4553      	cmp	r3, sl
 8008fc4:	dc46      	bgt.n	8009054 <__gethex+0x24e>
 8008fc6:	f04f 0a02 	mov.w	sl, #2
 8008fca:	4639      	mov	r1, r7
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f7ff fecb 	bl	8008d68 <rshift>
 8008fd2:	443c      	add	r4, r7
 8008fd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	da52      	bge.n	8009082 <__gethex+0x27c>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	9802      	ldr	r0, [sp, #8]
 8008fe0:	f000 fa4a 	bl	8009478 <_Bfree>
 8008fe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	27a3      	movs	r7, #163	; 0xa3
 8008fec:	e793      	b.n	8008f16 <__gethex+0x110>
 8008fee:	3101      	adds	r1, #1
 8008ff0:	105b      	asrs	r3, r3, #1
 8008ff2:	e7b0      	b.n	8008f56 <__gethex+0x150>
 8008ff4:	1e73      	subs	r3, r6, #1
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	9a07      	ldr	r2, [sp, #28]
 8008ffa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d018      	beq.n	8009034 <__gethex+0x22e>
 8009002:	f1bb 0f20 	cmp.w	fp, #32
 8009006:	d107      	bne.n	8009018 <__gethex+0x212>
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	f8c3 a000 	str.w	sl, [r3]
 800900e:	3304      	adds	r3, #4
 8009010:	f04f 0a00 	mov.w	sl, #0
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	46d3      	mov	fp, sl
 8009018:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800901c:	f7ff fede 	bl	8008ddc <__hexdig_fun>
 8009020:	f000 000f 	and.w	r0, r0, #15
 8009024:	fa00 f00b 	lsl.w	r0, r0, fp
 8009028:	ea4a 0a00 	orr.w	sl, sl, r0
 800902c:	f10b 0b04 	add.w	fp, fp, #4
 8009030:	9b05      	ldr	r3, [sp, #20]
 8009032:	e00d      	b.n	8009050 <__gethex+0x24a>
 8009034:	9b05      	ldr	r3, [sp, #20]
 8009036:	9a08      	ldr	r2, [sp, #32]
 8009038:	4413      	add	r3, r2
 800903a:	42bb      	cmp	r3, r7
 800903c:	d3e1      	bcc.n	8009002 <__gethex+0x1fc>
 800903e:	4618      	mov	r0, r3
 8009040:	9a01      	ldr	r2, [sp, #4]
 8009042:	9903      	ldr	r1, [sp, #12]
 8009044:	9309      	str	r3, [sp, #36]	; 0x24
 8009046:	f000 fffb 	bl	800a040 <strncmp>
 800904a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904c:	2800      	cmp	r0, #0
 800904e:	d1d8      	bne.n	8009002 <__gethex+0x1fc>
 8009050:	461e      	mov	r6, r3
 8009052:	e791      	b.n	8008f78 <__gethex+0x172>
 8009054:	1eb9      	subs	r1, r7, #2
 8009056:	4628      	mov	r0, r5
 8009058:	f000 fdb8 	bl	8009bcc <__any_on>
 800905c:	2800      	cmp	r0, #0
 800905e:	d0b2      	beq.n	8008fc6 <__gethex+0x1c0>
 8009060:	f04f 0a03 	mov.w	sl, #3
 8009064:	e7b1      	b.n	8008fca <__gethex+0x1c4>
 8009066:	da09      	bge.n	800907c <__gethex+0x276>
 8009068:	1bf7      	subs	r7, r6, r7
 800906a:	4629      	mov	r1, r5
 800906c:	463a      	mov	r2, r7
 800906e:	9802      	ldr	r0, [sp, #8]
 8009070:	f000 fbce 	bl	8009810 <__lshift>
 8009074:	1be4      	subs	r4, r4, r7
 8009076:	4605      	mov	r5, r0
 8009078:	f100 0914 	add.w	r9, r0, #20
 800907c:	f04f 0a00 	mov.w	sl, #0
 8009080:	e7a8      	b.n	8008fd4 <__gethex+0x1ce>
 8009082:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009086:	42a0      	cmp	r0, r4
 8009088:	dd6a      	ble.n	8009160 <__gethex+0x35a>
 800908a:	1b04      	subs	r4, r0, r4
 800908c:	42a6      	cmp	r6, r4
 800908e:	dc2e      	bgt.n	80090ee <__gethex+0x2e8>
 8009090:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d022      	beq.n	80090de <__gethex+0x2d8>
 8009098:	2b03      	cmp	r3, #3
 800909a:	d024      	beq.n	80090e6 <__gethex+0x2e0>
 800909c:	2b01      	cmp	r3, #1
 800909e:	d115      	bne.n	80090cc <__gethex+0x2c6>
 80090a0:	42a6      	cmp	r6, r4
 80090a2:	d113      	bne.n	80090cc <__gethex+0x2c6>
 80090a4:	2e01      	cmp	r6, #1
 80090a6:	dc0b      	bgt.n	80090c0 <__gethex+0x2ba>
 80090a8:	9a06      	ldr	r2, [sp, #24]
 80090aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	2301      	movs	r3, #1
 80090b2:	612b      	str	r3, [r5, #16]
 80090b4:	f8c9 3000 	str.w	r3, [r9]
 80090b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090ba:	2762      	movs	r7, #98	; 0x62
 80090bc:	601d      	str	r5, [r3, #0]
 80090be:	e72a      	b.n	8008f16 <__gethex+0x110>
 80090c0:	1e71      	subs	r1, r6, #1
 80090c2:	4628      	mov	r0, r5
 80090c4:	f000 fd82 	bl	8009bcc <__any_on>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d1ed      	bne.n	80090a8 <__gethex+0x2a2>
 80090cc:	4629      	mov	r1, r5
 80090ce:	9802      	ldr	r0, [sp, #8]
 80090d0:	f000 f9d2 	bl	8009478 <_Bfree>
 80090d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090d6:	2300      	movs	r3, #0
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	2750      	movs	r7, #80	; 0x50
 80090dc:	e71b      	b.n	8008f16 <__gethex+0x110>
 80090de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d0e1      	beq.n	80090a8 <__gethex+0x2a2>
 80090e4:	e7f2      	b.n	80090cc <__gethex+0x2c6>
 80090e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1dd      	bne.n	80090a8 <__gethex+0x2a2>
 80090ec:	e7ee      	b.n	80090cc <__gethex+0x2c6>
 80090ee:	1e67      	subs	r7, r4, #1
 80090f0:	f1ba 0f00 	cmp.w	sl, #0
 80090f4:	d131      	bne.n	800915a <__gethex+0x354>
 80090f6:	b127      	cbz	r7, 8009102 <__gethex+0x2fc>
 80090f8:	4639      	mov	r1, r7
 80090fa:	4628      	mov	r0, r5
 80090fc:	f000 fd66 	bl	8009bcc <__any_on>
 8009100:	4682      	mov	sl, r0
 8009102:	117a      	asrs	r2, r7, #5
 8009104:	2301      	movs	r3, #1
 8009106:	f007 071f 	and.w	r7, r7, #31
 800910a:	fa03 f707 	lsl.w	r7, r3, r7
 800910e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009112:	4621      	mov	r1, r4
 8009114:	421f      	tst	r7, r3
 8009116:	4628      	mov	r0, r5
 8009118:	bf18      	it	ne
 800911a:	f04a 0a02 	orrne.w	sl, sl, #2
 800911e:	1b36      	subs	r6, r6, r4
 8009120:	f7ff fe22 	bl	8008d68 <rshift>
 8009124:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009128:	2702      	movs	r7, #2
 800912a:	f1ba 0f00 	cmp.w	sl, #0
 800912e:	d048      	beq.n	80091c2 <__gethex+0x3bc>
 8009130:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d015      	beq.n	8009164 <__gethex+0x35e>
 8009138:	2b03      	cmp	r3, #3
 800913a:	d017      	beq.n	800916c <__gethex+0x366>
 800913c:	2b01      	cmp	r3, #1
 800913e:	d109      	bne.n	8009154 <__gethex+0x34e>
 8009140:	f01a 0f02 	tst.w	sl, #2
 8009144:	d006      	beq.n	8009154 <__gethex+0x34e>
 8009146:	f8d9 3000 	ldr.w	r3, [r9]
 800914a:	ea4a 0a03 	orr.w	sl, sl, r3
 800914e:	f01a 0f01 	tst.w	sl, #1
 8009152:	d10e      	bne.n	8009172 <__gethex+0x36c>
 8009154:	f047 0710 	orr.w	r7, r7, #16
 8009158:	e033      	b.n	80091c2 <__gethex+0x3bc>
 800915a:	f04f 0a01 	mov.w	sl, #1
 800915e:	e7d0      	b.n	8009102 <__gethex+0x2fc>
 8009160:	2701      	movs	r7, #1
 8009162:	e7e2      	b.n	800912a <__gethex+0x324>
 8009164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009166:	f1c3 0301 	rsb	r3, r3, #1
 800916a:	9315      	str	r3, [sp, #84]	; 0x54
 800916c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0f0      	beq.n	8009154 <__gethex+0x34e>
 8009172:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009176:	f105 0314 	add.w	r3, r5, #20
 800917a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800917e:	eb03 010a 	add.w	r1, r3, sl
 8009182:	f04f 0c00 	mov.w	ip, #0
 8009186:	4618      	mov	r0, r3
 8009188:	f853 2b04 	ldr.w	r2, [r3], #4
 800918c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009190:	d01c      	beq.n	80091cc <__gethex+0x3c6>
 8009192:	3201      	adds	r2, #1
 8009194:	6002      	str	r2, [r0, #0]
 8009196:	2f02      	cmp	r7, #2
 8009198:	f105 0314 	add.w	r3, r5, #20
 800919c:	d138      	bne.n	8009210 <__gethex+0x40a>
 800919e:	f8d8 2000 	ldr.w	r2, [r8]
 80091a2:	3a01      	subs	r2, #1
 80091a4:	42b2      	cmp	r2, r6
 80091a6:	d10a      	bne.n	80091be <__gethex+0x3b8>
 80091a8:	1171      	asrs	r1, r6, #5
 80091aa:	2201      	movs	r2, #1
 80091ac:	f006 061f 	and.w	r6, r6, #31
 80091b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091b4:	fa02 f606 	lsl.w	r6, r2, r6
 80091b8:	421e      	tst	r6, r3
 80091ba:	bf18      	it	ne
 80091bc:	4617      	movne	r7, r2
 80091be:	f047 0720 	orr.w	r7, r7, #32
 80091c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091c4:	601d      	str	r5, [r3, #0]
 80091c6:	9b06      	ldr	r3, [sp, #24]
 80091c8:	601c      	str	r4, [r3, #0]
 80091ca:	e6a4      	b.n	8008f16 <__gethex+0x110>
 80091cc:	4299      	cmp	r1, r3
 80091ce:	f843 cc04 	str.w	ip, [r3, #-4]
 80091d2:	d8d8      	bhi.n	8009186 <__gethex+0x380>
 80091d4:	68ab      	ldr	r3, [r5, #8]
 80091d6:	4599      	cmp	r9, r3
 80091d8:	db12      	blt.n	8009200 <__gethex+0x3fa>
 80091da:	6869      	ldr	r1, [r5, #4]
 80091dc:	9802      	ldr	r0, [sp, #8]
 80091de:	3101      	adds	r1, #1
 80091e0:	f000 f916 	bl	8009410 <_Balloc>
 80091e4:	692a      	ldr	r2, [r5, #16]
 80091e6:	3202      	adds	r2, #2
 80091e8:	f105 010c 	add.w	r1, r5, #12
 80091ec:	4683      	mov	fp, r0
 80091ee:	0092      	lsls	r2, r2, #2
 80091f0:	300c      	adds	r0, #12
 80091f2:	f7fd fa4b 	bl	800668c <memcpy>
 80091f6:	4629      	mov	r1, r5
 80091f8:	9802      	ldr	r0, [sp, #8]
 80091fa:	f000 f93d 	bl	8009478 <_Bfree>
 80091fe:	465d      	mov	r5, fp
 8009200:	692b      	ldr	r3, [r5, #16]
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009208:	612a      	str	r2, [r5, #16]
 800920a:	2201      	movs	r2, #1
 800920c:	615a      	str	r2, [r3, #20]
 800920e:	e7c2      	b.n	8009196 <__gethex+0x390>
 8009210:	692a      	ldr	r2, [r5, #16]
 8009212:	454a      	cmp	r2, r9
 8009214:	dd0b      	ble.n	800922e <__gethex+0x428>
 8009216:	2101      	movs	r1, #1
 8009218:	4628      	mov	r0, r5
 800921a:	f7ff fda5 	bl	8008d68 <rshift>
 800921e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009222:	3401      	adds	r4, #1
 8009224:	42a3      	cmp	r3, r4
 8009226:	f6ff aed9 	blt.w	8008fdc <__gethex+0x1d6>
 800922a:	2701      	movs	r7, #1
 800922c:	e7c7      	b.n	80091be <__gethex+0x3b8>
 800922e:	f016 061f 	ands.w	r6, r6, #31
 8009232:	d0fa      	beq.n	800922a <__gethex+0x424>
 8009234:	449a      	add	sl, r3
 8009236:	f1c6 0620 	rsb	r6, r6, #32
 800923a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800923e:	f000 f9ab 	bl	8009598 <__hi0bits>
 8009242:	42b0      	cmp	r0, r6
 8009244:	dbe7      	blt.n	8009216 <__gethex+0x410>
 8009246:	e7f0      	b.n	800922a <__gethex+0x424>

08009248 <L_shift>:
 8009248:	f1c2 0208 	rsb	r2, r2, #8
 800924c:	0092      	lsls	r2, r2, #2
 800924e:	b570      	push	{r4, r5, r6, lr}
 8009250:	f1c2 0620 	rsb	r6, r2, #32
 8009254:	6843      	ldr	r3, [r0, #4]
 8009256:	6804      	ldr	r4, [r0, #0]
 8009258:	fa03 f506 	lsl.w	r5, r3, r6
 800925c:	432c      	orrs	r4, r5
 800925e:	40d3      	lsrs	r3, r2
 8009260:	6004      	str	r4, [r0, #0]
 8009262:	f840 3f04 	str.w	r3, [r0, #4]!
 8009266:	4288      	cmp	r0, r1
 8009268:	d3f4      	bcc.n	8009254 <L_shift+0xc>
 800926a:	bd70      	pop	{r4, r5, r6, pc}

0800926c <__match>:
 800926c:	b530      	push	{r4, r5, lr}
 800926e:	6803      	ldr	r3, [r0, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009276:	b914      	cbnz	r4, 800927e <__match+0x12>
 8009278:	6003      	str	r3, [r0, #0]
 800927a:	2001      	movs	r0, #1
 800927c:	bd30      	pop	{r4, r5, pc}
 800927e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009282:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009286:	2d19      	cmp	r5, #25
 8009288:	bf98      	it	ls
 800928a:	3220      	addls	r2, #32
 800928c:	42a2      	cmp	r2, r4
 800928e:	d0f0      	beq.n	8009272 <__match+0x6>
 8009290:	2000      	movs	r0, #0
 8009292:	e7f3      	b.n	800927c <__match+0x10>

08009294 <__hexnan>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	680b      	ldr	r3, [r1, #0]
 800929a:	6801      	ldr	r1, [r0, #0]
 800929c:	115f      	asrs	r7, r3, #5
 800929e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80092a2:	f013 031f 	ands.w	r3, r3, #31
 80092a6:	b087      	sub	sp, #28
 80092a8:	bf18      	it	ne
 80092aa:	3704      	addne	r7, #4
 80092ac:	2500      	movs	r5, #0
 80092ae:	1f3e      	subs	r6, r7, #4
 80092b0:	4682      	mov	sl, r0
 80092b2:	4690      	mov	r8, r2
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	f847 5c04 	str.w	r5, [r7, #-4]
 80092ba:	46b1      	mov	r9, r6
 80092bc:	4634      	mov	r4, r6
 80092be:	9502      	str	r5, [sp, #8]
 80092c0:	46ab      	mov	fp, r5
 80092c2:	784a      	ldrb	r2, [r1, #1]
 80092c4:	1c4b      	adds	r3, r1, #1
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	b342      	cbz	r2, 800931c <__hexnan+0x88>
 80092ca:	4610      	mov	r0, r2
 80092cc:	9105      	str	r1, [sp, #20]
 80092ce:	9204      	str	r2, [sp, #16]
 80092d0:	f7ff fd84 	bl	8008ddc <__hexdig_fun>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d143      	bne.n	8009360 <__hexnan+0xcc>
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	9905      	ldr	r1, [sp, #20]
 80092dc:	2a20      	cmp	r2, #32
 80092de:	d818      	bhi.n	8009312 <__hexnan+0x7e>
 80092e0:	9b02      	ldr	r3, [sp, #8]
 80092e2:	459b      	cmp	fp, r3
 80092e4:	dd13      	ble.n	800930e <__hexnan+0x7a>
 80092e6:	454c      	cmp	r4, r9
 80092e8:	d206      	bcs.n	80092f8 <__hexnan+0x64>
 80092ea:	2d07      	cmp	r5, #7
 80092ec:	dc04      	bgt.n	80092f8 <__hexnan+0x64>
 80092ee:	462a      	mov	r2, r5
 80092f0:	4649      	mov	r1, r9
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7ff ffa8 	bl	8009248 <L_shift>
 80092f8:	4544      	cmp	r4, r8
 80092fa:	d944      	bls.n	8009386 <__hexnan+0xf2>
 80092fc:	2300      	movs	r3, #0
 80092fe:	f1a4 0904 	sub.w	r9, r4, #4
 8009302:	f844 3c04 	str.w	r3, [r4, #-4]
 8009306:	f8cd b008 	str.w	fp, [sp, #8]
 800930a:	464c      	mov	r4, r9
 800930c:	461d      	mov	r5, r3
 800930e:	9903      	ldr	r1, [sp, #12]
 8009310:	e7d7      	b.n	80092c2 <__hexnan+0x2e>
 8009312:	2a29      	cmp	r2, #41	; 0x29
 8009314:	d14a      	bne.n	80093ac <__hexnan+0x118>
 8009316:	3102      	adds	r1, #2
 8009318:	f8ca 1000 	str.w	r1, [sl]
 800931c:	f1bb 0f00 	cmp.w	fp, #0
 8009320:	d044      	beq.n	80093ac <__hexnan+0x118>
 8009322:	454c      	cmp	r4, r9
 8009324:	d206      	bcs.n	8009334 <__hexnan+0xa0>
 8009326:	2d07      	cmp	r5, #7
 8009328:	dc04      	bgt.n	8009334 <__hexnan+0xa0>
 800932a:	462a      	mov	r2, r5
 800932c:	4649      	mov	r1, r9
 800932e:	4620      	mov	r0, r4
 8009330:	f7ff ff8a 	bl	8009248 <L_shift>
 8009334:	4544      	cmp	r4, r8
 8009336:	d928      	bls.n	800938a <__hexnan+0xf6>
 8009338:	4643      	mov	r3, r8
 800933a:	f854 2b04 	ldr.w	r2, [r4], #4
 800933e:	f843 2b04 	str.w	r2, [r3], #4
 8009342:	42a6      	cmp	r6, r4
 8009344:	d2f9      	bcs.n	800933a <__hexnan+0xa6>
 8009346:	2200      	movs	r2, #0
 8009348:	f843 2b04 	str.w	r2, [r3], #4
 800934c:	429e      	cmp	r6, r3
 800934e:	d2fb      	bcs.n	8009348 <__hexnan+0xb4>
 8009350:	6833      	ldr	r3, [r6, #0]
 8009352:	b91b      	cbnz	r3, 800935c <__hexnan+0xc8>
 8009354:	4546      	cmp	r6, r8
 8009356:	d127      	bne.n	80093a8 <__hexnan+0x114>
 8009358:	2301      	movs	r3, #1
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	2005      	movs	r0, #5
 800935e:	e026      	b.n	80093ae <__hexnan+0x11a>
 8009360:	3501      	adds	r5, #1
 8009362:	2d08      	cmp	r5, #8
 8009364:	f10b 0b01 	add.w	fp, fp, #1
 8009368:	dd06      	ble.n	8009378 <__hexnan+0xe4>
 800936a:	4544      	cmp	r4, r8
 800936c:	d9cf      	bls.n	800930e <__hexnan+0x7a>
 800936e:	2300      	movs	r3, #0
 8009370:	f844 3c04 	str.w	r3, [r4, #-4]
 8009374:	2501      	movs	r5, #1
 8009376:	3c04      	subs	r4, #4
 8009378:	6822      	ldr	r2, [r4, #0]
 800937a:	f000 000f 	and.w	r0, r0, #15
 800937e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009382:	6020      	str	r0, [r4, #0]
 8009384:	e7c3      	b.n	800930e <__hexnan+0x7a>
 8009386:	2508      	movs	r5, #8
 8009388:	e7c1      	b.n	800930e <__hexnan+0x7a>
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0df      	beq.n	8009350 <__hexnan+0xbc>
 8009390:	f04f 32ff 	mov.w	r2, #4294967295
 8009394:	f1c3 0320 	rsb	r3, r3, #32
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80093a0:	401a      	ands	r2, r3
 80093a2:	f847 2c04 	str.w	r2, [r7, #-4]
 80093a6:	e7d3      	b.n	8009350 <__hexnan+0xbc>
 80093a8:	3e04      	subs	r6, #4
 80093aa:	e7d1      	b.n	8009350 <__hexnan+0xbc>
 80093ac:	2004      	movs	r0, #4
 80093ae:	b007      	add	sp, #28
 80093b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093b4 <__locale_ctype_ptr_l>:
 80093b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80093b8:	4770      	bx	lr

080093ba <__localeconv_l>:
 80093ba:	30f0      	adds	r0, #240	; 0xf0
 80093bc:	4770      	bx	lr
	...

080093c0 <_localeconv_r>:
 80093c0:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <_localeconv_r+0x14>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6a18      	ldr	r0, [r3, #32]
 80093c6:	4b04      	ldr	r3, [pc, #16]	; (80093d8 <_localeconv_r+0x18>)
 80093c8:	2800      	cmp	r0, #0
 80093ca:	bf08      	it	eq
 80093cc:	4618      	moveq	r0, r3
 80093ce:	30f0      	adds	r0, #240	; 0xf0
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	200000d0 	.word	0x200000d0
 80093d8:	20000134 	.word	0x20000134

080093dc <malloc>:
 80093dc:	4b02      	ldr	r3, [pc, #8]	; (80093e8 <malloc+0xc>)
 80093de:	4601      	mov	r1, r0
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	f000 bc71 	b.w	8009cc8 <_malloc_r>
 80093e6:	bf00      	nop
 80093e8:	200000d0 	.word	0x200000d0

080093ec <__ascii_mbtowc>:
 80093ec:	b082      	sub	sp, #8
 80093ee:	b901      	cbnz	r1, 80093f2 <__ascii_mbtowc+0x6>
 80093f0:	a901      	add	r1, sp, #4
 80093f2:	b142      	cbz	r2, 8009406 <__ascii_mbtowc+0x1a>
 80093f4:	b14b      	cbz	r3, 800940a <__ascii_mbtowc+0x1e>
 80093f6:	7813      	ldrb	r3, [r2, #0]
 80093f8:	600b      	str	r3, [r1, #0]
 80093fa:	7812      	ldrb	r2, [r2, #0]
 80093fc:	1c10      	adds	r0, r2, #0
 80093fe:	bf18      	it	ne
 8009400:	2001      	movne	r0, #1
 8009402:	b002      	add	sp, #8
 8009404:	4770      	bx	lr
 8009406:	4610      	mov	r0, r2
 8009408:	e7fb      	b.n	8009402 <__ascii_mbtowc+0x16>
 800940a:	f06f 0001 	mvn.w	r0, #1
 800940e:	e7f8      	b.n	8009402 <__ascii_mbtowc+0x16>

08009410 <_Balloc>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009414:	4604      	mov	r4, r0
 8009416:	460e      	mov	r6, r1
 8009418:	b93d      	cbnz	r5, 800942a <_Balloc+0x1a>
 800941a:	2010      	movs	r0, #16
 800941c:	f7ff ffde 	bl	80093dc <malloc>
 8009420:	6260      	str	r0, [r4, #36]	; 0x24
 8009422:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009426:	6005      	str	r5, [r0, #0]
 8009428:	60c5      	str	r5, [r0, #12]
 800942a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800942c:	68eb      	ldr	r3, [r5, #12]
 800942e:	b183      	cbz	r3, 8009452 <_Balloc+0x42>
 8009430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009438:	b9b8      	cbnz	r0, 800946a <_Balloc+0x5a>
 800943a:	2101      	movs	r1, #1
 800943c:	fa01 f506 	lsl.w	r5, r1, r6
 8009440:	1d6a      	adds	r2, r5, #5
 8009442:	0092      	lsls	r2, r2, #2
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fbe2 	bl	8009c0e <_calloc_r>
 800944a:	b160      	cbz	r0, 8009466 <_Balloc+0x56>
 800944c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009450:	e00e      	b.n	8009470 <_Balloc+0x60>
 8009452:	2221      	movs	r2, #33	; 0x21
 8009454:	2104      	movs	r1, #4
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fbd9 	bl	8009c0e <_calloc_r>
 800945c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800945e:	60e8      	str	r0, [r5, #12]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e4      	bne.n	8009430 <_Balloc+0x20>
 8009466:	2000      	movs	r0, #0
 8009468:	bd70      	pop	{r4, r5, r6, pc}
 800946a:	6802      	ldr	r2, [r0, #0]
 800946c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009470:	2300      	movs	r3, #0
 8009472:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009476:	e7f7      	b.n	8009468 <_Balloc+0x58>

08009478 <_Bfree>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800947c:	4606      	mov	r6, r0
 800947e:	460d      	mov	r5, r1
 8009480:	b93c      	cbnz	r4, 8009492 <_Bfree+0x1a>
 8009482:	2010      	movs	r0, #16
 8009484:	f7ff ffaa 	bl	80093dc <malloc>
 8009488:	6270      	str	r0, [r6, #36]	; 0x24
 800948a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800948e:	6004      	str	r4, [r0, #0]
 8009490:	60c4      	str	r4, [r0, #12]
 8009492:	b13d      	cbz	r5, 80094a4 <_Bfree+0x2c>
 8009494:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009496:	686a      	ldr	r2, [r5, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800949e:	6029      	str	r1, [r5, #0]
 80094a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80094a4:	bd70      	pop	{r4, r5, r6, pc}

080094a6 <__multadd>:
 80094a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094aa:	690d      	ldr	r5, [r1, #16]
 80094ac:	461f      	mov	r7, r3
 80094ae:	4606      	mov	r6, r0
 80094b0:	460c      	mov	r4, r1
 80094b2:	f101 0c14 	add.w	ip, r1, #20
 80094b6:	2300      	movs	r3, #0
 80094b8:	f8dc 0000 	ldr.w	r0, [ip]
 80094bc:	b281      	uxth	r1, r0
 80094be:	fb02 7101 	mla	r1, r2, r1, r7
 80094c2:	0c0f      	lsrs	r7, r1, #16
 80094c4:	0c00      	lsrs	r0, r0, #16
 80094c6:	fb02 7000 	mla	r0, r2, r0, r7
 80094ca:	b289      	uxth	r1, r1
 80094cc:	3301      	adds	r3, #1
 80094ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80094d2:	429d      	cmp	r5, r3
 80094d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80094d8:	f84c 1b04 	str.w	r1, [ip], #4
 80094dc:	dcec      	bgt.n	80094b8 <__multadd+0x12>
 80094de:	b1d7      	cbz	r7, 8009516 <__multadd+0x70>
 80094e0:	68a3      	ldr	r3, [r4, #8]
 80094e2:	42ab      	cmp	r3, r5
 80094e4:	dc12      	bgt.n	800950c <__multadd+0x66>
 80094e6:	6861      	ldr	r1, [r4, #4]
 80094e8:	4630      	mov	r0, r6
 80094ea:	3101      	adds	r1, #1
 80094ec:	f7ff ff90 	bl	8009410 <_Balloc>
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	3202      	adds	r2, #2
 80094f4:	f104 010c 	add.w	r1, r4, #12
 80094f8:	4680      	mov	r8, r0
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	300c      	adds	r0, #12
 80094fe:	f7fd f8c5 	bl	800668c <memcpy>
 8009502:	4621      	mov	r1, r4
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff ffb7 	bl	8009478 <_Bfree>
 800950a:	4644      	mov	r4, r8
 800950c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009510:	3501      	adds	r5, #1
 8009512:	615f      	str	r7, [r3, #20]
 8009514:	6125      	str	r5, [r4, #16]
 8009516:	4620      	mov	r0, r4
 8009518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800951c <__s2b>:
 800951c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	4615      	mov	r5, r2
 8009524:	461f      	mov	r7, r3
 8009526:	2209      	movs	r2, #9
 8009528:	3308      	adds	r3, #8
 800952a:	4606      	mov	r6, r0
 800952c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009530:	2100      	movs	r1, #0
 8009532:	2201      	movs	r2, #1
 8009534:	429a      	cmp	r2, r3
 8009536:	db20      	blt.n	800957a <__s2b+0x5e>
 8009538:	4630      	mov	r0, r6
 800953a:	f7ff ff69 	bl	8009410 <_Balloc>
 800953e:	9b08      	ldr	r3, [sp, #32]
 8009540:	6143      	str	r3, [r0, #20]
 8009542:	2d09      	cmp	r5, #9
 8009544:	f04f 0301 	mov.w	r3, #1
 8009548:	6103      	str	r3, [r0, #16]
 800954a:	dd19      	ble.n	8009580 <__s2b+0x64>
 800954c:	f104 0809 	add.w	r8, r4, #9
 8009550:	46c1      	mov	r9, r8
 8009552:	442c      	add	r4, r5
 8009554:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009558:	4601      	mov	r1, r0
 800955a:	3b30      	subs	r3, #48	; 0x30
 800955c:	220a      	movs	r2, #10
 800955e:	4630      	mov	r0, r6
 8009560:	f7ff ffa1 	bl	80094a6 <__multadd>
 8009564:	45a1      	cmp	r9, r4
 8009566:	d1f5      	bne.n	8009554 <__s2b+0x38>
 8009568:	eb08 0405 	add.w	r4, r8, r5
 800956c:	3c08      	subs	r4, #8
 800956e:	1b2d      	subs	r5, r5, r4
 8009570:	1963      	adds	r3, r4, r5
 8009572:	42bb      	cmp	r3, r7
 8009574:	db07      	blt.n	8009586 <__s2b+0x6a>
 8009576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957a:	0052      	lsls	r2, r2, #1
 800957c:	3101      	adds	r1, #1
 800957e:	e7d9      	b.n	8009534 <__s2b+0x18>
 8009580:	340a      	adds	r4, #10
 8009582:	2509      	movs	r5, #9
 8009584:	e7f3      	b.n	800956e <__s2b+0x52>
 8009586:	f814 3b01 	ldrb.w	r3, [r4], #1
 800958a:	4601      	mov	r1, r0
 800958c:	3b30      	subs	r3, #48	; 0x30
 800958e:	220a      	movs	r2, #10
 8009590:	4630      	mov	r0, r6
 8009592:	f7ff ff88 	bl	80094a6 <__multadd>
 8009596:	e7eb      	b.n	8009570 <__s2b+0x54>

08009598 <__hi0bits>:
 8009598:	0c02      	lsrs	r2, r0, #16
 800959a:	0412      	lsls	r2, r2, #16
 800959c:	4603      	mov	r3, r0
 800959e:	b9b2      	cbnz	r2, 80095ce <__hi0bits+0x36>
 80095a0:	0403      	lsls	r3, r0, #16
 80095a2:	2010      	movs	r0, #16
 80095a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80095a8:	bf04      	itt	eq
 80095aa:	021b      	lsleq	r3, r3, #8
 80095ac:	3008      	addeq	r0, #8
 80095ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80095b2:	bf04      	itt	eq
 80095b4:	011b      	lsleq	r3, r3, #4
 80095b6:	3004      	addeq	r0, #4
 80095b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80095bc:	bf04      	itt	eq
 80095be:	009b      	lsleq	r3, r3, #2
 80095c0:	3002      	addeq	r0, #2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	db06      	blt.n	80095d4 <__hi0bits+0x3c>
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	d503      	bpl.n	80095d2 <__hi0bits+0x3a>
 80095ca:	3001      	adds	r0, #1
 80095cc:	4770      	bx	lr
 80095ce:	2000      	movs	r0, #0
 80095d0:	e7e8      	b.n	80095a4 <__hi0bits+0xc>
 80095d2:	2020      	movs	r0, #32
 80095d4:	4770      	bx	lr

080095d6 <__lo0bits>:
 80095d6:	6803      	ldr	r3, [r0, #0]
 80095d8:	f013 0207 	ands.w	r2, r3, #7
 80095dc:	4601      	mov	r1, r0
 80095de:	d00b      	beq.n	80095f8 <__lo0bits+0x22>
 80095e0:	07da      	lsls	r2, r3, #31
 80095e2:	d423      	bmi.n	800962c <__lo0bits+0x56>
 80095e4:	0798      	lsls	r0, r3, #30
 80095e6:	bf49      	itett	mi
 80095e8:	085b      	lsrmi	r3, r3, #1
 80095ea:	089b      	lsrpl	r3, r3, #2
 80095ec:	2001      	movmi	r0, #1
 80095ee:	600b      	strmi	r3, [r1, #0]
 80095f0:	bf5c      	itt	pl
 80095f2:	600b      	strpl	r3, [r1, #0]
 80095f4:	2002      	movpl	r0, #2
 80095f6:	4770      	bx	lr
 80095f8:	b298      	uxth	r0, r3
 80095fa:	b9a8      	cbnz	r0, 8009628 <__lo0bits+0x52>
 80095fc:	0c1b      	lsrs	r3, r3, #16
 80095fe:	2010      	movs	r0, #16
 8009600:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009604:	bf04      	itt	eq
 8009606:	0a1b      	lsreq	r3, r3, #8
 8009608:	3008      	addeq	r0, #8
 800960a:	071a      	lsls	r2, r3, #28
 800960c:	bf04      	itt	eq
 800960e:	091b      	lsreq	r3, r3, #4
 8009610:	3004      	addeq	r0, #4
 8009612:	079a      	lsls	r2, r3, #30
 8009614:	bf04      	itt	eq
 8009616:	089b      	lsreq	r3, r3, #2
 8009618:	3002      	addeq	r0, #2
 800961a:	07da      	lsls	r2, r3, #31
 800961c:	d402      	bmi.n	8009624 <__lo0bits+0x4e>
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	d006      	beq.n	8009630 <__lo0bits+0x5a>
 8009622:	3001      	adds	r0, #1
 8009624:	600b      	str	r3, [r1, #0]
 8009626:	4770      	bx	lr
 8009628:	4610      	mov	r0, r2
 800962a:	e7e9      	b.n	8009600 <__lo0bits+0x2a>
 800962c:	2000      	movs	r0, #0
 800962e:	4770      	bx	lr
 8009630:	2020      	movs	r0, #32
 8009632:	4770      	bx	lr

08009634 <__i2b>:
 8009634:	b510      	push	{r4, lr}
 8009636:	460c      	mov	r4, r1
 8009638:	2101      	movs	r1, #1
 800963a:	f7ff fee9 	bl	8009410 <_Balloc>
 800963e:	2201      	movs	r2, #1
 8009640:	6144      	str	r4, [r0, #20]
 8009642:	6102      	str	r2, [r0, #16]
 8009644:	bd10      	pop	{r4, pc}

08009646 <__multiply>:
 8009646:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964a:	4614      	mov	r4, r2
 800964c:	690a      	ldr	r2, [r1, #16]
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	429a      	cmp	r2, r3
 8009652:	bfb8      	it	lt
 8009654:	460b      	movlt	r3, r1
 8009656:	4688      	mov	r8, r1
 8009658:	bfbc      	itt	lt
 800965a:	46a0      	movlt	r8, r4
 800965c:	461c      	movlt	r4, r3
 800965e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009662:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800966a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800966e:	eb07 0609 	add.w	r6, r7, r9
 8009672:	42b3      	cmp	r3, r6
 8009674:	bfb8      	it	lt
 8009676:	3101      	addlt	r1, #1
 8009678:	f7ff feca 	bl	8009410 <_Balloc>
 800967c:	f100 0514 	add.w	r5, r0, #20
 8009680:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009684:	462b      	mov	r3, r5
 8009686:	2200      	movs	r2, #0
 8009688:	4573      	cmp	r3, lr
 800968a:	d316      	bcc.n	80096ba <__multiply+0x74>
 800968c:	f104 0214 	add.w	r2, r4, #20
 8009690:	f108 0114 	add.w	r1, r8, #20
 8009694:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009698:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	9b00      	ldr	r3, [sp, #0]
 80096a0:	9201      	str	r2, [sp, #4]
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d80c      	bhi.n	80096c0 <__multiply+0x7a>
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	dd03      	ble.n	80096b2 <__multiply+0x6c>
 80096aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d05d      	beq.n	800976e <__multiply+0x128>
 80096b2:	6106      	str	r6, [r0, #16]
 80096b4:	b003      	add	sp, #12
 80096b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ba:	f843 2b04 	str.w	r2, [r3], #4
 80096be:	e7e3      	b.n	8009688 <__multiply+0x42>
 80096c0:	f8b2 b000 	ldrh.w	fp, [r2]
 80096c4:	f1bb 0f00 	cmp.w	fp, #0
 80096c8:	d023      	beq.n	8009712 <__multiply+0xcc>
 80096ca:	4689      	mov	r9, r1
 80096cc:	46ac      	mov	ip, r5
 80096ce:	f04f 0800 	mov.w	r8, #0
 80096d2:	f859 4b04 	ldr.w	r4, [r9], #4
 80096d6:	f8dc a000 	ldr.w	sl, [ip]
 80096da:	b2a3      	uxth	r3, r4
 80096dc:	fa1f fa8a 	uxth.w	sl, sl
 80096e0:	fb0b a303 	mla	r3, fp, r3, sl
 80096e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80096e8:	f8dc 4000 	ldr.w	r4, [ip]
 80096ec:	4443      	add	r3, r8
 80096ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80096f2:	fb0b 840a 	mla	r4, fp, sl, r8
 80096f6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80096fa:	46e2      	mov	sl, ip
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009702:	454f      	cmp	r7, r9
 8009704:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009708:	f84a 3b04 	str.w	r3, [sl], #4
 800970c:	d82b      	bhi.n	8009766 <__multiply+0x120>
 800970e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009712:	9b01      	ldr	r3, [sp, #4]
 8009714:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009718:	3204      	adds	r2, #4
 800971a:	f1ba 0f00 	cmp.w	sl, #0
 800971e:	d020      	beq.n	8009762 <__multiply+0x11c>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	4689      	mov	r9, r1
 8009724:	46a8      	mov	r8, r5
 8009726:	f04f 0b00 	mov.w	fp, #0
 800972a:	f8b9 c000 	ldrh.w	ip, [r9]
 800972e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009732:	fb0a 440c 	mla	r4, sl, ip, r4
 8009736:	445c      	add	r4, fp
 8009738:	46c4      	mov	ip, r8
 800973a:	b29b      	uxth	r3, r3
 800973c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009740:	f84c 3b04 	str.w	r3, [ip], #4
 8009744:	f859 3b04 	ldr.w	r3, [r9], #4
 8009748:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800974c:	0c1b      	lsrs	r3, r3, #16
 800974e:	fb0a b303 	mla	r3, sl, r3, fp
 8009752:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009756:	454f      	cmp	r7, r9
 8009758:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800975c:	d805      	bhi.n	800976a <__multiply+0x124>
 800975e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009762:	3504      	adds	r5, #4
 8009764:	e79b      	b.n	800969e <__multiply+0x58>
 8009766:	46d4      	mov	ip, sl
 8009768:	e7b3      	b.n	80096d2 <__multiply+0x8c>
 800976a:	46e0      	mov	r8, ip
 800976c:	e7dd      	b.n	800972a <__multiply+0xe4>
 800976e:	3e01      	subs	r6, #1
 8009770:	e799      	b.n	80096a6 <__multiply+0x60>
	...

08009774 <__pow5mult>:
 8009774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009778:	4615      	mov	r5, r2
 800977a:	f012 0203 	ands.w	r2, r2, #3
 800977e:	4606      	mov	r6, r0
 8009780:	460f      	mov	r7, r1
 8009782:	d007      	beq.n	8009794 <__pow5mult+0x20>
 8009784:	3a01      	subs	r2, #1
 8009786:	4c21      	ldr	r4, [pc, #132]	; (800980c <__pow5mult+0x98>)
 8009788:	2300      	movs	r3, #0
 800978a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800978e:	f7ff fe8a 	bl	80094a6 <__multadd>
 8009792:	4607      	mov	r7, r0
 8009794:	10ad      	asrs	r5, r5, #2
 8009796:	d035      	beq.n	8009804 <__pow5mult+0x90>
 8009798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800979a:	b93c      	cbnz	r4, 80097ac <__pow5mult+0x38>
 800979c:	2010      	movs	r0, #16
 800979e:	f7ff fe1d 	bl	80093dc <malloc>
 80097a2:	6270      	str	r0, [r6, #36]	; 0x24
 80097a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097a8:	6004      	str	r4, [r0, #0]
 80097aa:	60c4      	str	r4, [r0, #12]
 80097ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097b4:	b94c      	cbnz	r4, 80097ca <__pow5mult+0x56>
 80097b6:	f240 2171 	movw	r1, #625	; 0x271
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ff3a 	bl	8009634 <__i2b>
 80097c0:	2300      	movs	r3, #0
 80097c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80097c6:	4604      	mov	r4, r0
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	f04f 0800 	mov.w	r8, #0
 80097ce:	07eb      	lsls	r3, r5, #31
 80097d0:	d50a      	bpl.n	80097e8 <__pow5mult+0x74>
 80097d2:	4639      	mov	r1, r7
 80097d4:	4622      	mov	r2, r4
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff ff35 	bl	8009646 <__multiply>
 80097dc:	4639      	mov	r1, r7
 80097de:	4681      	mov	r9, r0
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7ff fe49 	bl	8009478 <_Bfree>
 80097e6:	464f      	mov	r7, r9
 80097e8:	106d      	asrs	r5, r5, #1
 80097ea:	d00b      	beq.n	8009804 <__pow5mult+0x90>
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	b938      	cbnz	r0, 8009800 <__pow5mult+0x8c>
 80097f0:	4622      	mov	r2, r4
 80097f2:	4621      	mov	r1, r4
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff ff26 	bl	8009646 <__multiply>
 80097fa:	6020      	str	r0, [r4, #0]
 80097fc:	f8c0 8000 	str.w	r8, [r0]
 8009800:	4604      	mov	r4, r0
 8009802:	e7e4      	b.n	80097ce <__pow5mult+0x5a>
 8009804:	4638      	mov	r0, r7
 8009806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980a:	bf00      	nop
 800980c:	0800a348 	.word	0x0800a348

08009810 <__lshift>:
 8009810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	460c      	mov	r4, r1
 8009816:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	6849      	ldr	r1, [r1, #4]
 800981e:	eb0a 0903 	add.w	r9, sl, r3
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	4607      	mov	r7, r0
 8009826:	4616      	mov	r6, r2
 8009828:	f109 0501 	add.w	r5, r9, #1
 800982c:	42ab      	cmp	r3, r5
 800982e:	db32      	blt.n	8009896 <__lshift+0x86>
 8009830:	4638      	mov	r0, r7
 8009832:	f7ff fded 	bl	8009410 <_Balloc>
 8009836:	2300      	movs	r3, #0
 8009838:	4680      	mov	r8, r0
 800983a:	f100 0114 	add.w	r1, r0, #20
 800983e:	461a      	mov	r2, r3
 8009840:	4553      	cmp	r3, sl
 8009842:	db2b      	blt.n	800989c <__lshift+0x8c>
 8009844:	6920      	ldr	r0, [r4, #16]
 8009846:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800984a:	f104 0314 	add.w	r3, r4, #20
 800984e:	f016 021f 	ands.w	r2, r6, #31
 8009852:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009856:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800985a:	d025      	beq.n	80098a8 <__lshift+0x98>
 800985c:	f1c2 0e20 	rsb	lr, r2, #32
 8009860:	2000      	movs	r0, #0
 8009862:	681e      	ldr	r6, [r3, #0]
 8009864:	468a      	mov	sl, r1
 8009866:	4096      	lsls	r6, r2
 8009868:	4330      	orrs	r0, r6
 800986a:	f84a 0b04 	str.w	r0, [sl], #4
 800986e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009872:	459c      	cmp	ip, r3
 8009874:	fa20 f00e 	lsr.w	r0, r0, lr
 8009878:	d814      	bhi.n	80098a4 <__lshift+0x94>
 800987a:	6048      	str	r0, [r1, #4]
 800987c:	b108      	cbz	r0, 8009882 <__lshift+0x72>
 800987e:	f109 0502 	add.w	r5, r9, #2
 8009882:	3d01      	subs	r5, #1
 8009884:	4638      	mov	r0, r7
 8009886:	f8c8 5010 	str.w	r5, [r8, #16]
 800988a:	4621      	mov	r1, r4
 800988c:	f7ff fdf4 	bl	8009478 <_Bfree>
 8009890:	4640      	mov	r0, r8
 8009892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009896:	3101      	adds	r1, #1
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	e7c7      	b.n	800982c <__lshift+0x1c>
 800989c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80098a0:	3301      	adds	r3, #1
 80098a2:	e7cd      	b.n	8009840 <__lshift+0x30>
 80098a4:	4651      	mov	r1, sl
 80098a6:	e7dc      	b.n	8009862 <__lshift+0x52>
 80098a8:	3904      	subs	r1, #4
 80098aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80098b2:	459c      	cmp	ip, r3
 80098b4:	d8f9      	bhi.n	80098aa <__lshift+0x9a>
 80098b6:	e7e4      	b.n	8009882 <__lshift+0x72>

080098b8 <__mcmp>:
 80098b8:	6903      	ldr	r3, [r0, #16]
 80098ba:	690a      	ldr	r2, [r1, #16]
 80098bc:	1a9b      	subs	r3, r3, r2
 80098be:	b530      	push	{r4, r5, lr}
 80098c0:	d10c      	bne.n	80098dc <__mcmp+0x24>
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	3014      	adds	r0, #20
 80098c6:	3114      	adds	r1, #20
 80098c8:	1884      	adds	r4, r0, r2
 80098ca:	4411      	add	r1, r2
 80098cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098d4:	4295      	cmp	r5, r2
 80098d6:	d003      	beq.n	80098e0 <__mcmp+0x28>
 80098d8:	d305      	bcc.n	80098e6 <__mcmp+0x2e>
 80098da:	2301      	movs	r3, #1
 80098dc:	4618      	mov	r0, r3
 80098de:	bd30      	pop	{r4, r5, pc}
 80098e0:	42a0      	cmp	r0, r4
 80098e2:	d3f3      	bcc.n	80098cc <__mcmp+0x14>
 80098e4:	e7fa      	b.n	80098dc <__mcmp+0x24>
 80098e6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ea:	e7f7      	b.n	80098dc <__mcmp+0x24>

080098ec <__mdiff>:
 80098ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f0:	460d      	mov	r5, r1
 80098f2:	4607      	mov	r7, r0
 80098f4:	4611      	mov	r1, r2
 80098f6:	4628      	mov	r0, r5
 80098f8:	4614      	mov	r4, r2
 80098fa:	f7ff ffdd 	bl	80098b8 <__mcmp>
 80098fe:	1e06      	subs	r6, r0, #0
 8009900:	d108      	bne.n	8009914 <__mdiff+0x28>
 8009902:	4631      	mov	r1, r6
 8009904:	4638      	mov	r0, r7
 8009906:	f7ff fd83 	bl	8009410 <_Balloc>
 800990a:	2301      	movs	r3, #1
 800990c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009914:	bfa4      	itt	ge
 8009916:	4623      	movge	r3, r4
 8009918:	462c      	movge	r4, r5
 800991a:	4638      	mov	r0, r7
 800991c:	6861      	ldr	r1, [r4, #4]
 800991e:	bfa6      	itte	ge
 8009920:	461d      	movge	r5, r3
 8009922:	2600      	movge	r6, #0
 8009924:	2601      	movlt	r6, #1
 8009926:	f7ff fd73 	bl	8009410 <_Balloc>
 800992a:	692b      	ldr	r3, [r5, #16]
 800992c:	60c6      	str	r6, [r0, #12]
 800992e:	6926      	ldr	r6, [r4, #16]
 8009930:	f105 0914 	add.w	r9, r5, #20
 8009934:	f104 0214 	add.w	r2, r4, #20
 8009938:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800993c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009940:	f100 0514 	add.w	r5, r0, #20
 8009944:	f04f 0e00 	mov.w	lr, #0
 8009948:	f852 ab04 	ldr.w	sl, [r2], #4
 800994c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009950:	fa1e f18a 	uxtah	r1, lr, sl
 8009954:	b2a3      	uxth	r3, r4
 8009956:	1ac9      	subs	r1, r1, r3
 8009958:	0c23      	lsrs	r3, r4, #16
 800995a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800995e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009962:	b289      	uxth	r1, r1
 8009964:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009968:	45c8      	cmp	r8, r9
 800996a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800996e:	4694      	mov	ip, r2
 8009970:	f845 3b04 	str.w	r3, [r5], #4
 8009974:	d8e8      	bhi.n	8009948 <__mdiff+0x5c>
 8009976:	45bc      	cmp	ip, r7
 8009978:	d304      	bcc.n	8009984 <__mdiff+0x98>
 800997a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800997e:	b183      	cbz	r3, 80099a2 <__mdiff+0xb6>
 8009980:	6106      	str	r6, [r0, #16]
 8009982:	e7c5      	b.n	8009910 <__mdiff+0x24>
 8009984:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009988:	fa1e f381 	uxtah	r3, lr, r1
 800998c:	141a      	asrs	r2, r3, #16
 800998e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009992:	b29b      	uxth	r3, r3
 8009994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009998:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800999c:	f845 3b04 	str.w	r3, [r5], #4
 80099a0:	e7e9      	b.n	8009976 <__mdiff+0x8a>
 80099a2:	3e01      	subs	r6, #1
 80099a4:	e7e9      	b.n	800997a <__mdiff+0x8e>
	...

080099a8 <__ulp>:
 80099a8:	4b12      	ldr	r3, [pc, #72]	; (80099f4 <__ulp+0x4c>)
 80099aa:	ee10 2a90 	vmov	r2, s1
 80099ae:	401a      	ands	r2, r3
 80099b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dd04      	ble.n	80099c2 <__ulp+0x1a>
 80099b8:	2000      	movs	r0, #0
 80099ba:	4619      	mov	r1, r3
 80099bc:	ec41 0b10 	vmov	d0, r0, r1
 80099c0:	4770      	bx	lr
 80099c2:	425b      	negs	r3, r3
 80099c4:	151b      	asrs	r3, r3, #20
 80099c6:	2b13      	cmp	r3, #19
 80099c8:	f04f 0000 	mov.w	r0, #0
 80099cc:	f04f 0100 	mov.w	r1, #0
 80099d0:	dc04      	bgt.n	80099dc <__ulp+0x34>
 80099d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80099d6:	fa42 f103 	asr.w	r1, r2, r3
 80099da:	e7ef      	b.n	80099bc <__ulp+0x14>
 80099dc:	3b14      	subs	r3, #20
 80099de:	2b1e      	cmp	r3, #30
 80099e0:	f04f 0201 	mov.w	r2, #1
 80099e4:	bfda      	itte	le
 80099e6:	f1c3 031f 	rsble	r3, r3, #31
 80099ea:	fa02 f303 	lslle.w	r3, r2, r3
 80099ee:	4613      	movgt	r3, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	e7e3      	b.n	80099bc <__ulp+0x14>
 80099f4:	7ff00000 	.word	0x7ff00000

080099f8 <__b2d>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	6905      	ldr	r5, [r0, #16]
 80099fc:	f100 0714 	add.w	r7, r0, #20
 8009a00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009a04:	1f2e      	subs	r6, r5, #4
 8009a06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f7ff fdc4 	bl	8009598 <__hi0bits>
 8009a10:	f1c0 0320 	rsb	r3, r0, #32
 8009a14:	280a      	cmp	r0, #10
 8009a16:	600b      	str	r3, [r1, #0]
 8009a18:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009a90 <__b2d+0x98>
 8009a1c:	dc14      	bgt.n	8009a48 <__b2d+0x50>
 8009a1e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a22:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a26:	42b7      	cmp	r7, r6
 8009a28:	ea41 030c 	orr.w	r3, r1, ip
 8009a2c:	bf34      	ite	cc
 8009a2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a32:	2100      	movcs	r1, #0
 8009a34:	3015      	adds	r0, #21
 8009a36:	fa04 f000 	lsl.w	r0, r4, r0
 8009a3a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a3e:	ea40 0201 	orr.w	r2, r0, r1
 8009a42:	ec43 2b10 	vmov	d0, r2, r3
 8009a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a48:	42b7      	cmp	r7, r6
 8009a4a:	bf3a      	itte	cc
 8009a4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a54:	2100      	movcs	r1, #0
 8009a56:	380b      	subs	r0, #11
 8009a58:	d015      	beq.n	8009a86 <__b2d+0x8e>
 8009a5a:	4084      	lsls	r4, r0
 8009a5c:	f1c0 0520 	rsb	r5, r0, #32
 8009a60:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009a64:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009a68:	42be      	cmp	r6, r7
 8009a6a:	fa21 fc05 	lsr.w	ip, r1, r5
 8009a6e:	ea44 030c 	orr.w	r3, r4, ip
 8009a72:	bf8c      	ite	hi
 8009a74:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a78:	2400      	movls	r4, #0
 8009a7a:	fa01 f000 	lsl.w	r0, r1, r0
 8009a7e:	40ec      	lsrs	r4, r5
 8009a80:	ea40 0204 	orr.w	r2, r0, r4
 8009a84:	e7dd      	b.n	8009a42 <__b2d+0x4a>
 8009a86:	ea44 030c 	orr.w	r3, r4, ip
 8009a8a:	460a      	mov	r2, r1
 8009a8c:	e7d9      	b.n	8009a42 <__b2d+0x4a>
 8009a8e:	bf00      	nop
 8009a90:	3ff00000 	.word	0x3ff00000

08009a94 <__d2b>:
 8009a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a98:	460e      	mov	r6, r1
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	ec59 8b10 	vmov	r8, r9, d0
 8009aa0:	4615      	mov	r5, r2
 8009aa2:	f7ff fcb5 	bl	8009410 <_Balloc>
 8009aa6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009aaa:	4607      	mov	r7, r0
 8009aac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ab0:	bb34      	cbnz	r4, 8009b00 <__d2b+0x6c>
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ab8:	d027      	beq.n	8009b0a <__d2b+0x76>
 8009aba:	a802      	add	r0, sp, #8
 8009abc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009ac0:	f7ff fd89 	bl	80095d6 <__lo0bits>
 8009ac4:	9900      	ldr	r1, [sp, #0]
 8009ac6:	b1f0      	cbz	r0, 8009b06 <__d2b+0x72>
 8009ac8:	9a01      	ldr	r2, [sp, #4]
 8009aca:	f1c0 0320 	rsb	r3, r0, #32
 8009ace:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	40c2      	lsrs	r2, r0
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	9201      	str	r2, [sp, #4]
 8009ada:	9b01      	ldr	r3, [sp, #4]
 8009adc:	61bb      	str	r3, [r7, #24]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bf14      	ite	ne
 8009ae2:	2102      	movne	r1, #2
 8009ae4:	2101      	moveq	r1, #1
 8009ae6:	6139      	str	r1, [r7, #16]
 8009ae8:	b1c4      	cbz	r4, 8009b1c <__d2b+0x88>
 8009aea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009aee:	4404      	add	r4, r0
 8009af0:	6034      	str	r4, [r6, #0]
 8009af2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009af6:	6028      	str	r0, [r5, #0]
 8009af8:	4638      	mov	r0, r7
 8009afa:	b003      	add	sp, #12
 8009afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b04:	e7d5      	b.n	8009ab2 <__d2b+0x1e>
 8009b06:	6179      	str	r1, [r7, #20]
 8009b08:	e7e7      	b.n	8009ada <__d2b+0x46>
 8009b0a:	a801      	add	r0, sp, #4
 8009b0c:	f7ff fd63 	bl	80095d6 <__lo0bits>
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	2101      	movs	r1, #1
 8009b16:	6139      	str	r1, [r7, #16]
 8009b18:	3020      	adds	r0, #32
 8009b1a:	e7e5      	b.n	8009ae8 <__d2b+0x54>
 8009b1c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b24:	6030      	str	r0, [r6, #0]
 8009b26:	6918      	ldr	r0, [r3, #16]
 8009b28:	f7ff fd36 	bl	8009598 <__hi0bits>
 8009b2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b30:	e7e1      	b.n	8009af6 <__d2b+0x62>

08009b32 <__ratio>:
 8009b32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b36:	4688      	mov	r8, r1
 8009b38:	4669      	mov	r1, sp
 8009b3a:	4681      	mov	r9, r0
 8009b3c:	f7ff ff5c 	bl	80099f8 <__b2d>
 8009b40:	a901      	add	r1, sp, #4
 8009b42:	4640      	mov	r0, r8
 8009b44:	ec57 6b10 	vmov	r6, r7, d0
 8009b48:	f7ff ff56 	bl	80099f8 <__b2d>
 8009b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b50:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b54:	eba3 0c02 	sub.w	ip, r3, r2
 8009b58:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b5c:	1a9b      	subs	r3, r3, r2
 8009b5e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b62:	ec5b ab10 	vmov	sl, fp, d0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfce      	itee	gt
 8009b6a:	463a      	movgt	r2, r7
 8009b6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b70:	465a      	movle	r2, fp
 8009b72:	4659      	mov	r1, fp
 8009b74:	463d      	mov	r5, r7
 8009b76:	bfd4      	ite	le
 8009b78:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009b7c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009b80:	4630      	mov	r0, r6
 8009b82:	ee10 2a10 	vmov	r2, s0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4629      	mov	r1, r5
 8009b8a:	f7f6 fe77 	bl	800087c <__aeabi_ddiv>
 8009b8e:	ec41 0b10 	vmov	d0, r0, r1
 8009b92:	b003      	add	sp, #12
 8009b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b98 <__copybits>:
 8009b98:	3901      	subs	r1, #1
 8009b9a:	b510      	push	{r4, lr}
 8009b9c:	1149      	asrs	r1, r1, #5
 8009b9e:	6914      	ldr	r4, [r2, #16]
 8009ba0:	3101      	adds	r1, #1
 8009ba2:	f102 0314 	add.w	r3, r2, #20
 8009ba6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009baa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bae:	42a3      	cmp	r3, r4
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	d303      	bcc.n	8009bbc <__copybits+0x24>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	428a      	cmp	r2, r1
 8009bb8:	d305      	bcc.n	8009bc6 <__copybits+0x2e>
 8009bba:	bd10      	pop	{r4, pc}
 8009bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc0:	f840 2b04 	str.w	r2, [r0], #4
 8009bc4:	e7f3      	b.n	8009bae <__copybits+0x16>
 8009bc6:	f842 3b04 	str.w	r3, [r2], #4
 8009bca:	e7f4      	b.n	8009bb6 <__copybits+0x1e>

08009bcc <__any_on>:
 8009bcc:	f100 0214 	add.w	r2, r0, #20
 8009bd0:	6900      	ldr	r0, [r0, #16]
 8009bd2:	114b      	asrs	r3, r1, #5
 8009bd4:	4298      	cmp	r0, r3
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	db11      	blt.n	8009bfe <__any_on+0x32>
 8009bda:	dd0a      	ble.n	8009bf2 <__any_on+0x26>
 8009bdc:	f011 011f 	ands.w	r1, r1, #31
 8009be0:	d007      	beq.n	8009bf2 <__any_on+0x26>
 8009be2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009be6:	fa24 f001 	lsr.w	r0, r4, r1
 8009bea:	fa00 f101 	lsl.w	r1, r0, r1
 8009bee:	428c      	cmp	r4, r1
 8009bf0:	d10b      	bne.n	8009c0a <__any_on+0x3e>
 8009bf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d803      	bhi.n	8009c02 <__any_on+0x36>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	4603      	mov	r3, r0
 8009c00:	e7f7      	b.n	8009bf2 <__any_on+0x26>
 8009c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c06:	2900      	cmp	r1, #0
 8009c08:	d0f5      	beq.n	8009bf6 <__any_on+0x2a>
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	e7f6      	b.n	8009bfc <__any_on+0x30>

08009c0e <_calloc_r>:
 8009c0e:	b538      	push	{r3, r4, r5, lr}
 8009c10:	fb02 f401 	mul.w	r4, r2, r1
 8009c14:	4621      	mov	r1, r4
 8009c16:	f000 f857 	bl	8009cc8 <_malloc_r>
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	b118      	cbz	r0, 8009c26 <_calloc_r+0x18>
 8009c1e:	4622      	mov	r2, r4
 8009c20:	2100      	movs	r1, #0
 8009c22:	f7fc fd3e 	bl	80066a2 <memset>
 8009c26:	4628      	mov	r0, r5
 8009c28:	bd38      	pop	{r3, r4, r5, pc}
	...

08009c2c <_free_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4605      	mov	r5, r0
 8009c30:	2900      	cmp	r1, #0
 8009c32:	d045      	beq.n	8009cc0 <_free_r+0x94>
 8009c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c38:	1f0c      	subs	r4, r1, #4
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bfb8      	it	lt
 8009c3e:	18e4      	addlt	r4, r4, r3
 8009c40:	f000 fa36 	bl	800a0b0 <__malloc_lock>
 8009c44:	4a1f      	ldr	r2, [pc, #124]	; (8009cc4 <_free_r+0x98>)
 8009c46:	6813      	ldr	r3, [r2, #0]
 8009c48:	4610      	mov	r0, r2
 8009c4a:	b933      	cbnz	r3, 8009c5a <_free_r+0x2e>
 8009c4c:	6063      	str	r3, [r4, #4]
 8009c4e:	6014      	str	r4, [r2, #0]
 8009c50:	4628      	mov	r0, r5
 8009c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c56:	f000 ba2c 	b.w	800a0b2 <__malloc_unlock>
 8009c5a:	42a3      	cmp	r3, r4
 8009c5c:	d90c      	bls.n	8009c78 <_free_r+0x4c>
 8009c5e:	6821      	ldr	r1, [r4, #0]
 8009c60:	1862      	adds	r2, r4, r1
 8009c62:	4293      	cmp	r3, r2
 8009c64:	bf04      	itt	eq
 8009c66:	681a      	ldreq	r2, [r3, #0]
 8009c68:	685b      	ldreq	r3, [r3, #4]
 8009c6a:	6063      	str	r3, [r4, #4]
 8009c6c:	bf04      	itt	eq
 8009c6e:	1852      	addeq	r2, r2, r1
 8009c70:	6022      	streq	r2, [r4, #0]
 8009c72:	6004      	str	r4, [r0, #0]
 8009c74:	e7ec      	b.n	8009c50 <_free_r+0x24>
 8009c76:	4613      	mov	r3, r2
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	b10a      	cbz	r2, 8009c80 <_free_r+0x54>
 8009c7c:	42a2      	cmp	r2, r4
 8009c7e:	d9fa      	bls.n	8009c76 <_free_r+0x4a>
 8009c80:	6819      	ldr	r1, [r3, #0]
 8009c82:	1858      	adds	r0, r3, r1
 8009c84:	42a0      	cmp	r0, r4
 8009c86:	d10b      	bne.n	8009ca0 <_free_r+0x74>
 8009c88:	6820      	ldr	r0, [r4, #0]
 8009c8a:	4401      	add	r1, r0
 8009c8c:	1858      	adds	r0, r3, r1
 8009c8e:	4282      	cmp	r2, r0
 8009c90:	6019      	str	r1, [r3, #0]
 8009c92:	d1dd      	bne.n	8009c50 <_free_r+0x24>
 8009c94:	6810      	ldr	r0, [r2, #0]
 8009c96:	6852      	ldr	r2, [r2, #4]
 8009c98:	605a      	str	r2, [r3, #4]
 8009c9a:	4401      	add	r1, r0
 8009c9c:	6019      	str	r1, [r3, #0]
 8009c9e:	e7d7      	b.n	8009c50 <_free_r+0x24>
 8009ca0:	d902      	bls.n	8009ca8 <_free_r+0x7c>
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	e7d3      	b.n	8009c50 <_free_r+0x24>
 8009ca8:	6820      	ldr	r0, [r4, #0]
 8009caa:	1821      	adds	r1, r4, r0
 8009cac:	428a      	cmp	r2, r1
 8009cae:	bf04      	itt	eq
 8009cb0:	6811      	ldreq	r1, [r2, #0]
 8009cb2:	6852      	ldreq	r2, [r2, #4]
 8009cb4:	6062      	str	r2, [r4, #4]
 8009cb6:	bf04      	itt	eq
 8009cb8:	1809      	addeq	r1, r1, r0
 8009cba:	6021      	streq	r1, [r4, #0]
 8009cbc:	605c      	str	r4, [r3, #4]
 8009cbe:	e7c7      	b.n	8009c50 <_free_r+0x24>
 8009cc0:	bd38      	pop	{r3, r4, r5, pc}
 8009cc2:	bf00      	nop
 8009cc4:	200002d8 	.word	0x200002d8

08009cc8 <_malloc_r>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	1ccd      	adds	r5, r1, #3
 8009ccc:	f025 0503 	bic.w	r5, r5, #3
 8009cd0:	3508      	adds	r5, #8
 8009cd2:	2d0c      	cmp	r5, #12
 8009cd4:	bf38      	it	cc
 8009cd6:	250c      	movcc	r5, #12
 8009cd8:	2d00      	cmp	r5, #0
 8009cda:	4606      	mov	r6, r0
 8009cdc:	db01      	blt.n	8009ce2 <_malloc_r+0x1a>
 8009cde:	42a9      	cmp	r1, r5
 8009ce0:	d903      	bls.n	8009cea <_malloc_r+0x22>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	6033      	str	r3, [r6, #0]
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	bd70      	pop	{r4, r5, r6, pc}
 8009cea:	f000 f9e1 	bl	800a0b0 <__malloc_lock>
 8009cee:	4a21      	ldr	r2, [pc, #132]	; (8009d74 <_malloc_r+0xac>)
 8009cf0:	6814      	ldr	r4, [r2, #0]
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	b991      	cbnz	r1, 8009d1c <_malloc_r+0x54>
 8009cf6:	4c20      	ldr	r4, [pc, #128]	; (8009d78 <_malloc_r+0xb0>)
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	b91b      	cbnz	r3, 8009d04 <_malloc_r+0x3c>
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f000 f98f 	bl	800a020 <_sbrk_r>
 8009d02:	6020      	str	r0, [r4, #0]
 8009d04:	4629      	mov	r1, r5
 8009d06:	4630      	mov	r0, r6
 8009d08:	f000 f98a 	bl	800a020 <_sbrk_r>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d124      	bne.n	8009d5a <_malloc_r+0x92>
 8009d10:	230c      	movs	r3, #12
 8009d12:	6033      	str	r3, [r6, #0]
 8009d14:	4630      	mov	r0, r6
 8009d16:	f000 f9cc 	bl	800a0b2 <__malloc_unlock>
 8009d1a:	e7e4      	b.n	8009ce6 <_malloc_r+0x1e>
 8009d1c:	680b      	ldr	r3, [r1, #0]
 8009d1e:	1b5b      	subs	r3, r3, r5
 8009d20:	d418      	bmi.n	8009d54 <_malloc_r+0x8c>
 8009d22:	2b0b      	cmp	r3, #11
 8009d24:	d90f      	bls.n	8009d46 <_malloc_r+0x7e>
 8009d26:	600b      	str	r3, [r1, #0]
 8009d28:	50cd      	str	r5, [r1, r3]
 8009d2a:	18cc      	adds	r4, r1, r3
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f000 f9c0 	bl	800a0b2 <__malloc_unlock>
 8009d32:	f104 000b 	add.w	r0, r4, #11
 8009d36:	1d23      	adds	r3, r4, #4
 8009d38:	f020 0007 	bic.w	r0, r0, #7
 8009d3c:	1ac3      	subs	r3, r0, r3
 8009d3e:	d0d3      	beq.n	8009ce8 <_malloc_r+0x20>
 8009d40:	425a      	negs	r2, r3
 8009d42:	50e2      	str	r2, [r4, r3]
 8009d44:	e7d0      	b.n	8009ce8 <_malloc_r+0x20>
 8009d46:	428c      	cmp	r4, r1
 8009d48:	684b      	ldr	r3, [r1, #4]
 8009d4a:	bf16      	itet	ne
 8009d4c:	6063      	strne	r3, [r4, #4]
 8009d4e:	6013      	streq	r3, [r2, #0]
 8009d50:	460c      	movne	r4, r1
 8009d52:	e7eb      	b.n	8009d2c <_malloc_r+0x64>
 8009d54:	460c      	mov	r4, r1
 8009d56:	6849      	ldr	r1, [r1, #4]
 8009d58:	e7cc      	b.n	8009cf4 <_malloc_r+0x2c>
 8009d5a:	1cc4      	adds	r4, r0, #3
 8009d5c:	f024 0403 	bic.w	r4, r4, #3
 8009d60:	42a0      	cmp	r0, r4
 8009d62:	d005      	beq.n	8009d70 <_malloc_r+0xa8>
 8009d64:	1a21      	subs	r1, r4, r0
 8009d66:	4630      	mov	r0, r6
 8009d68:	f000 f95a 	bl	800a020 <_sbrk_r>
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d0cf      	beq.n	8009d10 <_malloc_r+0x48>
 8009d70:	6025      	str	r5, [r4, #0]
 8009d72:	e7db      	b.n	8009d2c <_malloc_r+0x64>
 8009d74:	200002d8 	.word	0x200002d8
 8009d78:	200002dc 	.word	0x200002dc

08009d7c <__ssputs_r>:
 8009d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d80:	688e      	ldr	r6, [r1, #8]
 8009d82:	429e      	cmp	r6, r3
 8009d84:	4682      	mov	sl, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	4690      	mov	r8, r2
 8009d8a:	4699      	mov	r9, r3
 8009d8c:	d837      	bhi.n	8009dfe <__ssputs_r+0x82>
 8009d8e:	898a      	ldrh	r2, [r1, #12]
 8009d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d94:	d031      	beq.n	8009dfa <__ssputs_r+0x7e>
 8009d96:	6825      	ldr	r5, [r4, #0]
 8009d98:	6909      	ldr	r1, [r1, #16]
 8009d9a:	1a6f      	subs	r7, r5, r1
 8009d9c:	6965      	ldr	r5, [r4, #20]
 8009d9e:	2302      	movs	r3, #2
 8009da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009da4:	fb95 f5f3 	sdiv	r5, r5, r3
 8009da8:	f109 0301 	add.w	r3, r9, #1
 8009dac:	443b      	add	r3, r7
 8009dae:	429d      	cmp	r5, r3
 8009db0:	bf38      	it	cc
 8009db2:	461d      	movcc	r5, r3
 8009db4:	0553      	lsls	r3, r2, #21
 8009db6:	d530      	bpl.n	8009e1a <__ssputs_r+0x9e>
 8009db8:	4629      	mov	r1, r5
 8009dba:	f7ff ff85 	bl	8009cc8 <_malloc_r>
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	b950      	cbnz	r0, 8009dd8 <__ssputs_r+0x5c>
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	f8ca 3000 	str.w	r3, [sl]
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dce:	81a3      	strh	r3, [r4, #12]
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd8:	463a      	mov	r2, r7
 8009dda:	6921      	ldr	r1, [r4, #16]
 8009ddc:	f7fc fc56 	bl	800668c <memcpy>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	6126      	str	r6, [r4, #16]
 8009dee:	6165      	str	r5, [r4, #20]
 8009df0:	443e      	add	r6, r7
 8009df2:	1bed      	subs	r5, r5, r7
 8009df4:	6026      	str	r6, [r4, #0]
 8009df6:	60a5      	str	r5, [r4, #8]
 8009df8:	464e      	mov	r6, r9
 8009dfa:	454e      	cmp	r6, r9
 8009dfc:	d900      	bls.n	8009e00 <__ssputs_r+0x84>
 8009dfe:	464e      	mov	r6, r9
 8009e00:	4632      	mov	r2, r6
 8009e02:	4641      	mov	r1, r8
 8009e04:	6820      	ldr	r0, [r4, #0]
 8009e06:	f000 f93a 	bl	800a07e <memmove>
 8009e0a:	68a3      	ldr	r3, [r4, #8]
 8009e0c:	1b9b      	subs	r3, r3, r6
 8009e0e:	60a3      	str	r3, [r4, #8]
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	441e      	add	r6, r3
 8009e14:	6026      	str	r6, [r4, #0]
 8009e16:	2000      	movs	r0, #0
 8009e18:	e7dc      	b.n	8009dd4 <__ssputs_r+0x58>
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	f000 f94a 	bl	800a0b4 <_realloc_r>
 8009e20:	4606      	mov	r6, r0
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d1e2      	bne.n	8009dec <__ssputs_r+0x70>
 8009e26:	6921      	ldr	r1, [r4, #16]
 8009e28:	4650      	mov	r0, sl
 8009e2a:	f7ff feff 	bl	8009c2c <_free_r>
 8009e2e:	e7c8      	b.n	8009dc2 <__ssputs_r+0x46>

08009e30 <_svfiprintf_r>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	461d      	mov	r5, r3
 8009e36:	898b      	ldrh	r3, [r1, #12]
 8009e38:	061f      	lsls	r7, r3, #24
 8009e3a:	b09d      	sub	sp, #116	; 0x74
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	4616      	mov	r6, r2
 8009e42:	d50f      	bpl.n	8009e64 <_svfiprintf_r+0x34>
 8009e44:	690b      	ldr	r3, [r1, #16]
 8009e46:	b96b      	cbnz	r3, 8009e64 <_svfiprintf_r+0x34>
 8009e48:	2140      	movs	r1, #64	; 0x40
 8009e4a:	f7ff ff3d 	bl	8009cc8 <_malloc_r>
 8009e4e:	6020      	str	r0, [r4, #0]
 8009e50:	6120      	str	r0, [r4, #16]
 8009e52:	b928      	cbnz	r0, 8009e60 <_svfiprintf_r+0x30>
 8009e54:	230c      	movs	r3, #12
 8009e56:	f8c8 3000 	str.w	r3, [r8]
 8009e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5e:	e0c8      	b.n	8009ff2 <_svfiprintf_r+0x1c2>
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	6163      	str	r3, [r4, #20]
 8009e64:	2300      	movs	r3, #0
 8009e66:	9309      	str	r3, [sp, #36]	; 0x24
 8009e68:	2320      	movs	r3, #32
 8009e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e6e:	2330      	movs	r3, #48	; 0x30
 8009e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e74:	9503      	str	r5, [sp, #12]
 8009e76:	f04f 0b01 	mov.w	fp, #1
 8009e7a:	4637      	mov	r7, r6
 8009e7c:	463d      	mov	r5, r7
 8009e7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e82:	b10b      	cbz	r3, 8009e88 <_svfiprintf_r+0x58>
 8009e84:	2b25      	cmp	r3, #37	; 0x25
 8009e86:	d13e      	bne.n	8009f06 <_svfiprintf_r+0xd6>
 8009e88:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e8c:	d00b      	beq.n	8009ea6 <_svfiprintf_r+0x76>
 8009e8e:	4653      	mov	r3, sl
 8009e90:	4632      	mov	r2, r6
 8009e92:	4621      	mov	r1, r4
 8009e94:	4640      	mov	r0, r8
 8009e96:	f7ff ff71 	bl	8009d7c <__ssputs_r>
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f000 80a4 	beq.w	8009fe8 <_svfiprintf_r+0x1b8>
 8009ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea2:	4453      	add	r3, sl
 8009ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea6:	783b      	ldrb	r3, [r7, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 809d 	beq.w	8009fe8 <_svfiprintf_r+0x1b8>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	9307      	str	r3, [sp, #28]
 8009ebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ec0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ec2:	462f      	mov	r7, r5
 8009ec4:	2205      	movs	r2, #5
 8009ec6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009eca:	4850      	ldr	r0, [pc, #320]	; (800a00c <_svfiprintf_r+0x1dc>)
 8009ecc:	f7f6 f9a0 	bl	8000210 <memchr>
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	b9d0      	cbnz	r0, 8009f0a <_svfiprintf_r+0xda>
 8009ed4:	06d9      	lsls	r1, r3, #27
 8009ed6:	bf44      	itt	mi
 8009ed8:	2220      	movmi	r2, #32
 8009eda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ede:	071a      	lsls	r2, r3, #28
 8009ee0:	bf44      	itt	mi
 8009ee2:	222b      	movmi	r2, #43	; 0x2b
 8009ee4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ee8:	782a      	ldrb	r2, [r5, #0]
 8009eea:	2a2a      	cmp	r2, #42	; 0x2a
 8009eec:	d015      	beq.n	8009f1a <_svfiprintf_r+0xea>
 8009eee:	9a07      	ldr	r2, [sp, #28]
 8009ef0:	462f      	mov	r7, r5
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	250a      	movs	r5, #10
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009efc:	3b30      	subs	r3, #48	; 0x30
 8009efe:	2b09      	cmp	r3, #9
 8009f00:	d94d      	bls.n	8009f9e <_svfiprintf_r+0x16e>
 8009f02:	b1b8      	cbz	r0, 8009f34 <_svfiprintf_r+0x104>
 8009f04:	e00f      	b.n	8009f26 <_svfiprintf_r+0xf6>
 8009f06:	462f      	mov	r7, r5
 8009f08:	e7b8      	b.n	8009e7c <_svfiprintf_r+0x4c>
 8009f0a:	4a40      	ldr	r2, [pc, #256]	; (800a00c <_svfiprintf_r+0x1dc>)
 8009f0c:	1a80      	subs	r0, r0, r2
 8009f0e:	fa0b f000 	lsl.w	r0, fp, r0
 8009f12:	4318      	orrs	r0, r3
 8009f14:	9004      	str	r0, [sp, #16]
 8009f16:	463d      	mov	r5, r7
 8009f18:	e7d3      	b.n	8009ec2 <_svfiprintf_r+0x92>
 8009f1a:	9a03      	ldr	r2, [sp, #12]
 8009f1c:	1d11      	adds	r1, r2, #4
 8009f1e:	6812      	ldr	r2, [r2, #0]
 8009f20:	9103      	str	r1, [sp, #12]
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	db01      	blt.n	8009f2a <_svfiprintf_r+0xfa>
 8009f26:	9207      	str	r2, [sp, #28]
 8009f28:	e004      	b.n	8009f34 <_svfiprintf_r+0x104>
 8009f2a:	4252      	negs	r2, r2
 8009f2c:	f043 0302 	orr.w	r3, r3, #2
 8009f30:	9207      	str	r2, [sp, #28]
 8009f32:	9304      	str	r3, [sp, #16]
 8009f34:	783b      	ldrb	r3, [r7, #0]
 8009f36:	2b2e      	cmp	r3, #46	; 0x2e
 8009f38:	d10c      	bne.n	8009f54 <_svfiprintf_r+0x124>
 8009f3a:	787b      	ldrb	r3, [r7, #1]
 8009f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f3e:	d133      	bne.n	8009fa8 <_svfiprintf_r+0x178>
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	1d1a      	adds	r2, r3, #4
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	9203      	str	r2, [sp, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	bfb8      	it	lt
 8009f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f50:	3702      	adds	r7, #2
 8009f52:	9305      	str	r3, [sp, #20]
 8009f54:	4d2e      	ldr	r5, [pc, #184]	; (800a010 <_svfiprintf_r+0x1e0>)
 8009f56:	7839      	ldrb	r1, [r7, #0]
 8009f58:	2203      	movs	r2, #3
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	f7f6 f958 	bl	8000210 <memchr>
 8009f60:	b138      	cbz	r0, 8009f72 <_svfiprintf_r+0x142>
 8009f62:	2340      	movs	r3, #64	; 0x40
 8009f64:	1b40      	subs	r0, r0, r5
 8009f66:	fa03 f000 	lsl.w	r0, r3, r0
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	4303      	orrs	r3, r0
 8009f6e:	3701      	adds	r7, #1
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	7839      	ldrb	r1, [r7, #0]
 8009f74:	4827      	ldr	r0, [pc, #156]	; (800a014 <_svfiprintf_r+0x1e4>)
 8009f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f7a:	2206      	movs	r2, #6
 8009f7c:	1c7e      	adds	r6, r7, #1
 8009f7e:	f7f6 f947 	bl	8000210 <memchr>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d038      	beq.n	8009ff8 <_svfiprintf_r+0x1c8>
 8009f86:	4b24      	ldr	r3, [pc, #144]	; (800a018 <_svfiprintf_r+0x1e8>)
 8009f88:	bb13      	cbnz	r3, 8009fd0 <_svfiprintf_r+0x1a0>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	3307      	adds	r3, #7
 8009f8e:	f023 0307 	bic.w	r3, r3, #7
 8009f92:	3308      	adds	r3, #8
 8009f94:	9303      	str	r3, [sp, #12]
 8009f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f98:	444b      	add	r3, r9
 8009f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9c:	e76d      	b.n	8009e7a <_svfiprintf_r+0x4a>
 8009f9e:	fb05 3202 	mla	r2, r5, r2, r3
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	460f      	mov	r7, r1
 8009fa6:	e7a6      	b.n	8009ef6 <_svfiprintf_r+0xc6>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	3701      	adds	r7, #1
 8009fac:	9305      	str	r3, [sp, #20]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	250a      	movs	r5, #10
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fb8:	3a30      	subs	r2, #48	; 0x30
 8009fba:	2a09      	cmp	r2, #9
 8009fbc:	d903      	bls.n	8009fc6 <_svfiprintf_r+0x196>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0c8      	beq.n	8009f54 <_svfiprintf_r+0x124>
 8009fc2:	9105      	str	r1, [sp, #20]
 8009fc4:	e7c6      	b.n	8009f54 <_svfiprintf_r+0x124>
 8009fc6:	fb05 2101 	mla	r1, r5, r1, r2
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4607      	mov	r7, r0
 8009fce:	e7f0      	b.n	8009fb2 <_svfiprintf_r+0x182>
 8009fd0:	ab03      	add	r3, sp, #12
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	4b11      	ldr	r3, [pc, #68]	; (800a01c <_svfiprintf_r+0x1ec>)
 8009fd8:	a904      	add	r1, sp, #16
 8009fda:	4640      	mov	r0, r8
 8009fdc:	f7fc fbfe 	bl	80067dc <_printf_float>
 8009fe0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009fe4:	4681      	mov	r9, r0
 8009fe6:	d1d6      	bne.n	8009f96 <_svfiprintf_r+0x166>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	065b      	lsls	r3, r3, #25
 8009fec:	f53f af35 	bmi.w	8009e5a <_svfiprintf_r+0x2a>
 8009ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ff2:	b01d      	add	sp, #116	; 0x74
 8009ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff8:	ab03      	add	r3, sp, #12
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	4b07      	ldr	r3, [pc, #28]	; (800a01c <_svfiprintf_r+0x1ec>)
 800a000:	a904      	add	r1, sp, #16
 800a002:	4640      	mov	r0, r8
 800a004:	f7fc fea0 	bl	8006d48 <_printf_i>
 800a008:	e7ea      	b.n	8009fe0 <_svfiprintf_r+0x1b0>
 800a00a:	bf00      	nop
 800a00c:	0800a354 	.word	0x0800a354
 800a010:	0800a35a 	.word	0x0800a35a
 800a014:	0800a35e 	.word	0x0800a35e
 800a018:	080067dd 	.word	0x080067dd
 800a01c:	08009d7d 	.word	0x08009d7d

0800a020 <_sbrk_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4c06      	ldr	r4, [pc, #24]	; (800a03c <_sbrk_r+0x1c>)
 800a024:	2300      	movs	r3, #0
 800a026:	4605      	mov	r5, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	f7f8 faea 	bl	8002604 <_sbrk>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d102      	bne.n	800a03a <_sbrk_r+0x1a>
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	b103      	cbz	r3, 800a03a <_sbrk_r+0x1a>
 800a038:	602b      	str	r3, [r5, #0]
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	2000054c 	.word	0x2000054c

0800a040 <strncmp>:
 800a040:	b510      	push	{r4, lr}
 800a042:	b16a      	cbz	r2, 800a060 <strncmp+0x20>
 800a044:	3901      	subs	r1, #1
 800a046:	1884      	adds	r4, r0, r2
 800a048:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a04c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a050:	4293      	cmp	r3, r2
 800a052:	d103      	bne.n	800a05c <strncmp+0x1c>
 800a054:	42a0      	cmp	r0, r4
 800a056:	d001      	beq.n	800a05c <strncmp+0x1c>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1f5      	bne.n	800a048 <strncmp+0x8>
 800a05c:	1a98      	subs	r0, r3, r2
 800a05e:	bd10      	pop	{r4, pc}
 800a060:	4610      	mov	r0, r2
 800a062:	e7fc      	b.n	800a05e <strncmp+0x1e>

0800a064 <__ascii_wctomb>:
 800a064:	b149      	cbz	r1, 800a07a <__ascii_wctomb+0x16>
 800a066:	2aff      	cmp	r2, #255	; 0xff
 800a068:	bf85      	ittet	hi
 800a06a:	238a      	movhi	r3, #138	; 0x8a
 800a06c:	6003      	strhi	r3, [r0, #0]
 800a06e:	700a      	strbls	r2, [r1, #0]
 800a070:	f04f 30ff 	movhi.w	r0, #4294967295
 800a074:	bf98      	it	ls
 800a076:	2001      	movls	r0, #1
 800a078:	4770      	bx	lr
 800a07a:	4608      	mov	r0, r1
 800a07c:	4770      	bx	lr

0800a07e <memmove>:
 800a07e:	4288      	cmp	r0, r1
 800a080:	b510      	push	{r4, lr}
 800a082:	eb01 0302 	add.w	r3, r1, r2
 800a086:	d807      	bhi.n	800a098 <memmove+0x1a>
 800a088:	1e42      	subs	r2, r0, #1
 800a08a:	4299      	cmp	r1, r3
 800a08c:	d00a      	beq.n	800a0a4 <memmove+0x26>
 800a08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a092:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a096:	e7f8      	b.n	800a08a <memmove+0xc>
 800a098:	4283      	cmp	r3, r0
 800a09a:	d9f5      	bls.n	800a088 <memmove+0xa>
 800a09c:	1881      	adds	r1, r0, r2
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	42d3      	cmn	r3, r2
 800a0a2:	d100      	bne.n	800a0a6 <memmove+0x28>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0aa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a0ae:	e7f7      	b.n	800a0a0 <memmove+0x22>

0800a0b0 <__malloc_lock>:
 800a0b0:	4770      	bx	lr

0800a0b2 <__malloc_unlock>:
 800a0b2:	4770      	bx	lr

0800a0b4 <_realloc_r>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	460e      	mov	r6, r1
 800a0bc:	b921      	cbnz	r1, 800a0c8 <_realloc_r+0x14>
 800a0be:	4611      	mov	r1, r2
 800a0c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0c4:	f7ff be00 	b.w	8009cc8 <_malloc_r>
 800a0c8:	b922      	cbnz	r2, 800a0d4 <_realloc_r+0x20>
 800a0ca:	f7ff fdaf 	bl	8009c2c <_free_r>
 800a0ce:	4625      	mov	r5, r4
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d4:	f000 f814 	bl	800a100 <_malloc_usable_size_r>
 800a0d8:	42a0      	cmp	r0, r4
 800a0da:	d20f      	bcs.n	800a0fc <_realloc_r+0x48>
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4638      	mov	r0, r7
 800a0e0:	f7ff fdf2 	bl	8009cc8 <_malloc_r>
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d0f2      	beq.n	800a0d0 <_realloc_r+0x1c>
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	f7fc facd 	bl	800668c <memcpy>
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f7ff fd99 	bl	8009c2c <_free_r>
 800a0fa:	e7e9      	b.n	800a0d0 <_realloc_r+0x1c>
 800a0fc:	4635      	mov	r5, r6
 800a0fe:	e7e7      	b.n	800a0d0 <_realloc_r+0x1c>

0800a100 <_malloc_usable_size_r>:
 800a100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a104:	1f18      	subs	r0, r3, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfbc      	itt	lt
 800a10a:	580b      	ldrlt	r3, [r1, r0]
 800a10c:	18c0      	addlt	r0, r0, r3
 800a10e:	4770      	bx	lr

0800a110 <_init>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr

0800a11c <_fini>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr
